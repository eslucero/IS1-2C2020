

----QUIT----(27 September 2020 18:41:14) CuisUniversity-4383.image priorSource: 12432206!

----STARTUP---- (27 September 2020 18:41:15) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4383.image!


!testRun: #ArithmeticObjectIntervalStrategyTest #testSingleton stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAccessing stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAdd stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAddToCollection stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAt stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testComparing stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testCopyAndGrowBy stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testDeepCopy stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testDo stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testFirst stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testHash stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testIncludes stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testInvalidAt stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testInvalidCreation stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testLast stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testPrintOn stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReject stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testRemoveIfAbsent stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReverse stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReverseDo stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testSelect stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testShallowCopy stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testSize stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testStoreOn stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testBetweenAndNotInclusive stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testHash stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testMax stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testMin stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testNotInclusiveBetweenAnd stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testNotInclusiveBetweenAndNotInclusive stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testTo stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToBy stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToByDo stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToNegativeBy stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToReverse stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToYourself stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #NumberToArithmeticObjectAdapterTest #testPrintString stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #UndefinedArithmeticObjectValueExceptionTest #testSignal stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #EdgeTest #testAccessing stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #EdgeTest #testConverging stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #EdgeTest #testEqual stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #EdgeTest #testGoing stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #EdgeTest #testHash stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #EdgeTest #testIsIncidentTo stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #EdgeTest #testPrintString stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #EdgeTest #testStarting stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #GraphPathFinderTest #testGraphPathNotFoundException stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #GraphPathFinderTest #testInvalidPath stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #GraphPathFinderTest #testPathToFarAwayPlaces stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #GraphPathFinderTest #testPathToNeighborPlace stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #GraphPathFinderTest #testSamePlace stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #GraphPathFinderTest #testWithLoops stamp: 'HAW 9/27/2020 18:41:20'!
PASSED!

!testRun: #GraphTest #testAccessImmutability stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testApplyUsingDepthFistSearch stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testConvergingEdges stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithInvalidEdge stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithUnconnectedNodes stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithoutEdges stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testCreationImmutability stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testEdgesConvergingToSelf stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testEqual stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testEqualsDifferentGraphs stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testGraphCreation stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testHash stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testIncludesNode stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testIsAcyclicWhenGraphIsAcyclic stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testIsAcyclicWhenGraphIsCyclic stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testIsEmpty stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testNodesAdjacentTo stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testNodesWithoutEdges stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testNotEmpty stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testRemoveNode stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testRemoveNodeWithInvalidNode stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testRemoveNodes stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testSameNodesAs stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #GraphTest #testStartingEdges stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #TopologicalSortTest #testCreateWithCyclicGraph stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #TopologicalSortTest #testValue stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #TopologicalSortTest #testValueWithAnotherGraph stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #TopologicalSortTest #testWithGraphWithoutEdges stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testBaseUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testConvertToBaseUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDenominator stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDifferentBaseUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDifferentDomainDerivedUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDivideUnitSameBaseUnitNumerator stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDivideUnitSameDomainDerivedUnitNumerator stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideByInfinity stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideByMinusInfinity stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideByMultipliedUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideByNullUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideByNumber stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideBySameBaseUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testDivideBySameDomainDerivedUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testEqualDerivedSameBaseUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testEqualDifferentBaseUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testEqualDividedUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testEqualMultipliedUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testEqualNullUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testEqualSameBaseUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testFloatDividedByUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testFloatMultipliedByUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testIntegerDividedByUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testMeasureCreation stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByDividedUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByInfinity stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByNullUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByNumber stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testName stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testNameFor stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testNameForMany stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testNameForOne stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testNameForUndefinedAmount stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testNothingAmount stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testNullMeasure stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testNumerator stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testReciprocal stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDerivedUnitOfOtherDomain stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDifferentBaseUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsNullUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsSameBaseUnit stamp: 'HAW 9/27/2020 18:41:21'!
PASSED!

!testRun: #BaseUnitTest #testSign stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testAtBegin stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testAtEnd stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testCurrent stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceFrom stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceFromTo stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceTo stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceToFrom stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testNext stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testNextANumberOfSomething stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testPrevious stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testPreviousANumberOfSomething stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CircularReadStreamTest #testRelativeDistanceFromTo stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAdd stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAddAssociativity stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAddBags stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAddCommutativity stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAddEquality stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAddExistingUnit stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAddFloatWithMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAddFractionWithMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAddImmutability stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAddIntegerWithMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAddNothing stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAtSameBaseUnitAsWithBaseUnits stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testAtSameBaseUnitAsWithDerivedUnits stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testCompoundMeasureImmutability stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testConvertAmountToBaseUnit stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testCreationWithMeasures stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testCreationWithMeasuresCopiesCollection stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testDivideByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testDivision stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionDistributivity stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionFloatByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionFractionByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionIntegerByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionMeasureByCompoundMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testEqual stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualAllNothing stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualNumber stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualOneNothing stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualWithDifferentBagSizeButRepresentSameEntity stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualWithDifferentBagSizeIsNothing stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testHash stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testHashAllNothing stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testHashOneNothing stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testInvalidTruncated stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testIsCompoundMeasurement stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testIsFraction stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testIsNothing stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testLessThan stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testMeasures stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testModulo stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloCompoundMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloFloatByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloFractionByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloIntegerByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplication stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationByZero stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationCommutativity stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationDistributivity stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyFloatByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyFractionByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyIntegerByMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyMeasureByCompoundMeasure stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testNegated stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testNegatedDistribution stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testNegatedZeroBag stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testNotEqual stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testNumberOfMeasures stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testPrintingForMany stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testPrintingForOne stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testRemFrom stamp: 'HAW 9/27/2020 18:41:22'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainder stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderCompoundMeasure stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderFloatByMeasure stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderIntegerByMeasure stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderMeasure stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testRoundTo stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtract stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractBags stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractEquality stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractExistingUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractFloatWithMeasure stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractFractionWithMeasure stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractIntegerWithMeasure stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractMeasureByCompoundMeasure stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractNothing stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testTheZeroOfTheDomainIsEqualToZero stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testTruncated stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testUnitNameOf stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testWithWithBaseUnits stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testWithWithDerivedUnits stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testZeroDivision stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #CompoundMeasureTest #testZeroEqualsTheZeroOfTheDomain stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testAccessing stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testAccessingImmutability stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testAddUnitConversionRule stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testBreakEquivalence stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testConvertsTo stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testDerivedUnitIsEquivalentTo stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testFromToUse stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testGraph stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testGraphChange stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testIsEquivalentTo stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testNoUnitConversionRule stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testRemove stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #ConversionTableTest #testUnitConversionRuleUniqueness stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testBaseUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testConvertToBaseUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testDenominator stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testDivideByDividedUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testDivideByFloat stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testDivideByInfinity stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testDivideByInteger stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testDivideByMinusInfinity stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testDivideBySimpleUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testDividedByMultipliedUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testDividedByNullUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testEqualDividedUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testEqualMultipliedUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testEqualNullUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testEqualSimpleUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testFloatDividedByUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testFloatMultipliedByUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testIntegerDividedByUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testMeasureCreation stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByFloat stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByInfinity stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByInteger stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByNullUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testName stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testNameForMany stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testNameForOne stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testNothingAmount stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testNullMeasure stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testNumerator stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testReciprocal stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 9/27/2020 18:41:23'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsSameSimpleUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #DividedUnitTest #testSign stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #EvaluationTest #testAdd stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #EvaluationTest #testDivide stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #EvaluationTest #testIsCompoundMeasure stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #EvaluationTest #testModulo stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #EvaluationTest #testMultiply stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #EvaluationTest #testNegated stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #EvaluationTest #testRemainder stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #EvaluationTest #testSubtract stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #EvaluationTest #testTruncated stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MeasureConverterTest #testCanConvertTo stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MeasureConverterTest #testCompoundMeasureConversion stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MeasureConverterTest #testConvertToUsing stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MeasureConverterTest #testDefaultGraphPathFinder stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MeasureConverterTest #testDirectSearching stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MeasureConverterTest #testIndirectSearching stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MeasureConverterTest #testInvalidConversion stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MeasureConverterTest #testSameDomainConversion stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testAdd stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testAmount stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testBagCreationWithNumber stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testBaseUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testBetweenAnd stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testCompoundMeasureCreationWithMeasure stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testConvertAmountToBaseUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testConvertTo stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testConvertToBaseUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testDenominator stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testDivide stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testDivideByUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testDivideMeasure stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testEqualsCompoundMeasure stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testEqualsMeasure stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testIsCompoundMeasure stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testIsNothing stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testMax stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testMin stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testModulo stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testModuloMeasure stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplication stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplyByUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplyMeasure stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testNegated stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testNegative stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testNumerator stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testPositive stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testRemainder stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testRemainderMeasure stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testRoundTo stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testSameDomainAs stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testSameUnitAs stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testSubtract stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testToBy stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testToFromFixed stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testToInfinity stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testToToFixed stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testTruncated stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MinusInfinityTest #testUnitNameOf stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testBaseUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testConvertToBaseUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testDenominator stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByDividedUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByFloat stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByInfinity stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByInteger stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByMinusInfinity stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideBySimpleUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testDividedByMultipliedUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testDividedByNullUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualDividedUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualMultipliedUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualNullUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualSimpleUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatDividedByUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatMultipliedByUnit stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 9/27/2020 18:41:24'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerDividedByUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testMeasureCreation stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByFloat stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByInfinity stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByInteger stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByNullUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testName stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testNameForMany stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testNameForOne stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testNothingAmount stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testNullMeasure stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testNumerator stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testReciprocal stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsSameSimpleUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #MultipliedUnitTest #testSign stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testConvertToBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testDenominator stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testName stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNameForMany stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNameForOne stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNothingAmount stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNullMeasure stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNumerator stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testReciprocal stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testSameDomainAs stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testSign stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testConvertToBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testDenominator stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testDivideByDividedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testDivideByMultipliedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testDivideByNullUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testDivideBySimpleUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testEqualBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testEqualDerivedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testEqualDividedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testEqualMultipliedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testEqualNullUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testMeasureCreation stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByDividedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByNullUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testName stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testNameForMany stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testNameForOne stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testNumerator stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testReciprocal stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsNullUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NullUnitTest #testSign stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testAmount stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertTo stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertToBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertToIfSuccessfullDoIfFails stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testIsNothing stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #PlusInfinityTest #testAdd stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #PlusInfinityTest #testAmount stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #PlusInfinityTest #testBagCreationWithNumber stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #PlusInfinityTest #testBaseUnit stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #PlusInfinityTest #testBetweenAnd stamp: 'HAW 9/27/2020 18:41:25'!
PASSED!

!testRun: #PlusInfinityTest #testCompoundMeasureCreationWithMeasure stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testConvertAmountToBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testConvertTo stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testConvertToBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testDenominator stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testDivide stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testDivideByUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testDivideMeasure stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testEqualsCompoundMeasure stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testEqualsMeasure stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testIsCompoundMeasure stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testIsNothing stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testMax stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testMin stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testModulo stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testModuloMeasure stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplication stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplyByUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplyMeasure stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testNegated stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testNegative stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testNumerator stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testPositive stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testRemainder stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testRemainderMeasure stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testRoundTo stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testSameDomainAs stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testSameUnitAs stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testSubtract stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testToBy stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testToFromFixed stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testToInfinity stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testToToFixed stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testTruncated stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #PlusInfinityTest #testUnitNameOf stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConversionFactor stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConvertToBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDenominator stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDifferentBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDifferentDomainDerivedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDivideUnitSameDerivedUnitNumerator stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDividedUnitSameBaseUnitNumerator stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByMultipliedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByNullUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideBySameBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideBySameDomainDerivedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDerivedSameBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDifferentBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDividedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualMultipliedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualNullUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualSameBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualSameDerivedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMeasureCreation stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByNullUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testName stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNameForMany stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNameForOne stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNothingAmount stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNullMeasure stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNumerator stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testReciprocal stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDerivedUnitOfOtherDomain stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDifferentBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsSameBaseUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsUnit stamp: 'HAW 9/27/2020 18:41:26'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSign stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testAccessing stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testEqual stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testHash stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testInvalidValues stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testValidValues stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAbs stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddAssociativity stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddBaseUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddBaseUnitAndDerivedUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddCommutativity stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDerivedUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDifferentBaseUnits stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDifferentUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDividedMeasure stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddFloatWithMeasure stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddFractionWithMeasure stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddInfinity stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddIntegerWithMeasure stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddMinusInfinity stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddMultipliedMeasure stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAddNumber stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAmount stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToFloat stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToFraction stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToInteger stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testAtBaseUnitIfNone stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testBaseUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testBetweenAnd stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testBetweenAndNotInclusive stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testCompareGreaterThan stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertAmountToBaseUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertNothing stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertTo stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertToBaseUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDenominator stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivideInfinity stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivideMinusInfinity stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByDividedMeasure stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureBaseUnitOverBaseUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureBaseUnitOverDerivedUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureDerivedUnitOverBaseUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByNumber stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByZero stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionFloatByMeasure stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionFractionByMeasure stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionIntegerByMeasure stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionOfBaseUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionOfDerivedUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testEqual stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualDifferentBaseUnit stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualNothingWhenRepresentSameEntity stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualNumber stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testGreaterThanEquals stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testHash stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testIntegerDivideCompoundMeasure stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidBetweenAnd stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidBetweenAndNotInclusive stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidConvertTo stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThan stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThanAgainstScalar stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThanEquals stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidLessThan stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidLessThanEquals stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidMax stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidMin stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidNotInclusiveBetweenAnd stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidNotInclusiveBetweenAndNotInclusive stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testIsFraction stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testIsNothing stamp: 'HAW 9/27/2020 18:41:27'!
PASSED!

!testRun: #SimpleMeasureTest #testLessThan stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testLessThanEquals stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMax stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMeasures stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMin stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloByZero stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloFloatByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloFractionByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloInfinity stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloIntegerByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloMinusInfinity stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloOfBaseUnit stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloOfDerivedUnit stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplicationOfBaseUnit stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplicationOfDerivedUnit stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByDividedMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMeasureAssociativity stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMultipliedMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByNumber stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyFloatByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyFractionByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyInfinity stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyIntegerByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyMinusInfinity stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testNegated stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testNegative stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testNotEqual stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testNotInclusiveBetweenAnd stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testNotInclusiveBetweenAndNotInclusive stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testNumerator stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testPositive stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testPrintingForMany stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testPrintingForOne stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRemFrom stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderByZero stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderCompoundMeasureByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderFloatByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderInfinity stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderIntegerByMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderMinusInfinity stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderOfBaseUnit stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderOfDerivedUnit stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testRoundTo stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSameDomainAs stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSimplificationsAddingWithZero stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSimplificationsDividingFromZero stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractAssociativity stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractBaseUnit stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractDerivedUnit stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractDividedMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractFloatWithMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractFractionWithMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractInfinity stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractIntegerWithMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractMinusInfinity stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractMultipliedMeasure stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testTheZeroOfTheDomainIsEqualToZero stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testTo stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testToAt stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testToAtByNegative stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testToBy stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testToByDo stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testToCollect stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testToFirst stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testToLast stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testToSize stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testTruncated stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testUnit stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testUnitNameOf stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #SimpleMeasureTest #testZeroIsEqualToTheZeroOfTheDomain stamp: 'HAW 9/27/2020 18:41:28'!
PASSED!

!testRun: #UnitConversionRuleTest #testAccessing stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #UnitConversionRuleTest #testConvert stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #UnitConversionRuleTest #testEqual stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #UnitConversionRuleTest #testHash stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testAccessing stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEdgeProtocol stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEdgeProtocolBehavior stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEqual stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testHash stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #AllDatesUniverseTest #testDo stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #AllDatesUniverseTest #testFrom stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #AllDatesUniverseTest #testPrintOn stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #AllDatesUniverseTest #testTo stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testCreation stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayMovesToTheNextMonday stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayMovesToThePreviousMonday stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayWhenDayIsMonday stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayWhenDayIsSaturday stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testPrintOn stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testDifferentMonth stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testIncludesDayMovesToTheThirdMonday stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testIncludesDayWhenDayIsSaturday stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testPrintOn stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DayOfMonthRuleTest #testAccessing stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DayOfMonthRuleTest #testIncludes stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testAdd stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testAddRules stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testAlwaysFulfills stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testAsOrderedCollection stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testAsSortedCollection stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testComposite stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testCreation stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testDo stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludedFromTo stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludedIn stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludes stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludesAll stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludedFromTo stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludedIn stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludes stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludesAll stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testInvalidDo stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testIsEmpty stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveAllRules stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveIfAbsent stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveRule stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testRulesCopy stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testRulesThatInclude stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testSize stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #DefinedByRulesTest #testSpecies stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testAccessing stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testEquals stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testImmutableValue stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testMonday stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testMonth stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testNext stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testNextFiltered stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testPreviousFiltered stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testPrintOn stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testSaturday stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testSunday stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #FilteredGregorianDateTest #testToday stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testFrom stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testIncludes stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testInstanceCreating stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testPrintString stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testTo stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testDaysBetween stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludedFromTo stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludedIn stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludes stamp: 'HAW 9/27/2020 18:41:29'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludesAll stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludedFromTo stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludedIn stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludes stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludesAll stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testName stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNegated stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNextNegativeDuration stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNextPositiveDuration stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testPrintOn stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testStream stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAbsoluteDate stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAcceptAVisitor stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAsSmalltalkDate stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAt stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtMidnight stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtNoon stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtTimeOfDay stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDay stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDayNumber stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDayOfMonth stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDaysFrom stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDaysTo stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDefaultIntervalIncrement stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testEqual stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testHash stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIntervalStrategy stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsFirstDayOfMonth stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsFirstDayOfYear stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsLastDayOfMonth stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsLastDayOfYear stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testLessThan stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testMonth stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testMonthOfYear stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNext stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNextDay stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromBaseDate stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysToEndOfYear stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPrevious stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPreviousDay stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPrintOn stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEvery stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDay stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDayNumber stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDayNumbers stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #RelativeGregorianDateTest #testYear stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #SpecificDayRuleTest #testAccessing stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #SpecificDayRuleTest #testIncludes stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testAccessing stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testIncludes stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testPrintOn stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testAtEnd stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testCurrent stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testDo stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testReset stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testAddArgentineLaw23555Rule stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testAddCardinalDayMonthRuleRule stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDateRule stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDayOfMonthRule stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDayRule stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRuleFrom stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRuleFromTo stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRules stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRulesFrom stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRulesFromTo stamp: 'HAW 9/27/2020 18:41:30'!
PASSED!

!testRun: #TimeLineFilterTest #testDateRule stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testDayOfMonthRule stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testDayRule stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testDaysBetween stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludedFromTo stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludedIn stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludes stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludesAll stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testFromString stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testHash stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludedFromTo stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludedIn stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludes stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludesAll stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testNegatedIncludes stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testNegatedNext stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testNextNegativeDuration stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testNextPositiveDuration stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testNumberOfDaysBetweenTwoDates stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testPrintOn stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testRemoveAllRules stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testRuleFromTo stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testRules stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testRulesThatIncludeADate stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #TimeLineFilterTest #testStream stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #UniverseTest #testDo stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testEqual stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testHash stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLastDayNumber stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLessThan stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testName stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNext stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumber stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrevious stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrintString stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #test29OfFebruaryToEveryDayOfMonth stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testAsSmalltalkDate stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testAt stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtMidnight stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtNoon stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtTimeOfDay stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testCreation stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testDay stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayNumber stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayOfMonth stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysFrom stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysTo stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testEqual stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testHash stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testImmutableValue stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDate stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDateTime stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesMonthOfYear stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesYear stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testInvalidCreation stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsApril stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsAugust stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsDecember stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFebruary stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfMonth stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfYear stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFriday stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJanuary stamp: 'HAW 9/27/2020 18:41:31'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJuly stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJune stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfMonth stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfYear stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMarch stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMay stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMonday stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsNovember stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsOctober stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSaturday stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSeptember stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSunday stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsThursday stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsTuesday stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsWednesday stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testLessThan stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonth stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonthOfYear stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNext stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDay stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDayOfMonth stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInNumberOfDays stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInWeeks stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextMonth stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBaseDate stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfYear stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrevious stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDay stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDayOfMonth stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInNumberOfDays stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInWeeks stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrintString stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testTheBeginningAndTheEndOfTime stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testTo stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToBy stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByDo stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByReverse stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningDifferentDay stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningSameDay stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningDifferentDay stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningSameDay stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumber stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumbers stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayOfMonth stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testToNegativeBy stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testTomorrow stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testVisitorAccessing stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testYear stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #FixedGregorianDateTest #testYesterday stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #GregorianDateTimeTest #testAccessing stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #GregorianDateTimeTest #testAdd stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #GregorianDateTimeTest #testComparing stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #GregorianDateTimeTest #testFirstTimeOfDay stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #GregorianDateTimeTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #GregorianDateTimeTest #testHash stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #GregorianDateTimeTest #testLastTimeOfDay stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #GregorianDateTimeTest #testLessThan stamp: 'HAW 9/27/2020 18:41:32'!
PASSED!

!testRun: #GregorianDateTimeTest #testNow stamp: 'HAW 9/27/2020 18:41:33'!
PASSED!

!testRun: #GregorianDateTimeTest #testPrintString stamp: 'HAW 9/27/2020 18:41:33'!
PASSED!

!testRun: #GregorianDateTimeTest #testReverse stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameDateAs stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameTimeOfDayAs stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testSpecialDateTimes stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testSubtract stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFrom stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFromMidnight stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeTo stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeToEndOfDay stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testTo stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testToBy stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByDo stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByMinutesDo stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testToNegativeByDo stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDay stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDayOfMonth stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComma stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComparing stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testCreation stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDateOfYear stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysFrom stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysTo stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDivisionSymbolCanBeUseToCreateADate stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testEqual stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testHash stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testInvalidCreation stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfMonth stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfYear stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfMonth stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfYear stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNext stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNextANumberOfDays stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfYear stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrevious stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPreviousANumberOfDays stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrintString stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testTo stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToBy stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToByDo stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumber stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumbers stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToNegativeBy stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToReverse stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToday stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testCommonDaysMeasure stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testDayCreation stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testDayPositionedInWeek stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testDays stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testDaysFrom stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testDaysTo stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testEqual stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testGlobalVariables stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testInvalidNameCreation stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testIsFriday stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testIsMonday stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testIsSaturday stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testIsSunday stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testIsThursday stamp: 'HAW 9/27/2020 18:41:34'!
PASSED!

!testRun: #GregorianDayTest #testIsTuesday stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testIsWednesday stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testName stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testNext stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testNextInANumberOfDays stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testNumberOfDaysSinceSunday stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testPrevious stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testPreviousInANumberOfDays stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testPrintString stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testSinceSunday stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testTo stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testToBy stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testToDo stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeBy stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeByDo stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianDayTest #testToday stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCardinalDay stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCreation stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCurrent stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testDates stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testEqual stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDate stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDay stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testHash stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDate stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDateTime stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesMonthOfYear stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesYear stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testInvalidCreation stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDate stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDay stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDayNumber stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLessThan stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsFrom stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsTo stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testName stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNext stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextANumberOfMonths stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextMonthDefinedAs stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNumberOfDays stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrevious stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousANumberOfMonths stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousMonthDefinedAs stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrintString stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testTo stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToBy stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByDo stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByYearsDo stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToNegativeBy stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToReverse stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testApril stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testAugust stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testComma stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testCommonMonthsMeasure stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testCurrent stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testDayOfMonthCreation stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testDecember stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testDivisionSymbolCanBeUseToCreateADayOfMonth stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testFebruary stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testFirstDayOfMonth stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testGlobalVariables stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIdentity stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsApril stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsAugust stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsDecember stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsFebruary stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsJanuary stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsJuly stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsJune stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsMarch stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsMay stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsNovember stamp: 'HAW 9/27/2020 18:41:35'!
PASSED!

!testRun: #GregorianMonthTest #testIsOctober stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testIsSeptember stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testJanuary stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testJuly stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testJune stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testLastDayOfMonth stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testLessThan stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testMarch stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testMay stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testMonthCreation stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsFrom stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsTo stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testNamed stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testNext stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testNextInANumberOfMonths stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testNovember stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testNumberOfMonthsPerYear stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testOctober stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testOf stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testOfYear stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testPrevious stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testPreviousInANumberOfMonths stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testSeptember stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testTo stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testToBy stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testToByDo stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testToNegativeByDo stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianMonthTest #testToReverse stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianTimespanTest #testAccessing stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianTimespanTest #testAsInterval stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanAfterATimeMeasure stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanBeforeATimeMeasure stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianTimespanTest #testEqual stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianTimespanTest #testFromInterval stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianTimespanTest #testHash stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianTimespanTest #testPrintString stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianTimespanTest #testTo stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testCurrent stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testDates stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testDaysInFebruary stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testDistanceTo stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testEqual stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testFirstDate stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testFirstDay stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testFirstMonth stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testHash stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDate stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDateTime stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testIncludesMonthOfYear stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testIncludesYear stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testInvalidNextANumberOfYears stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testInvalidPreviousANumberOfYears stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testInvalidYear stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testIsLeap stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testLastDate stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testLastDay stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testLastMonth stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testLessThan stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testMonths stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testMonthsOfYearsAccessing stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testNext stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testNextANumberOfYears stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testNextLeapYear stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testNumber stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDays stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDaysFromBaseDate stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testPrevious stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testPreviousANumberOfYears stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testPreviousLeapYear stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testPrintString stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testTo stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testToBy stamp: 'HAW 9/27/2020 18:41:36'!
PASSED!

!testRun: #GregorianYearTest #testToByDo stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #GregorianYearTest #testToByReverse stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #GregorianYearTest #testToNegativeBy stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #GregorianYearTest #testYearsFrom stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #GregorianYearTest #testYearsTo stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #GregorianYearTest #testZeroYears stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testEqual stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testHash stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLastDayNumber stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLessThan stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testName stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNext stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumber stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrevious stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrintString stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #MoreThanOnePointInTimeIntervalStrategyTest #testIsValidIntervalFromToBy stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testEqual stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testHash stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLastDayNumber stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThanFebruary stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testName stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumber stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testPrintString stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testDayOfMonthCreation stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testEqual stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testHash stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLastDayNumber stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThan stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThanFebruary stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testName stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumber stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testPrintString stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtieth stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtyfirst stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testAdd stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testCanCreateAsWrittenInEnglish stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testCanNotCreateTimeOfDayWithSemiColonWhenReceiverHasSeconds stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testComparing stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testCreation stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testCreationHour stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMilliseconds stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMinute stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testCreationSecond stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testFirstTimeOfDay stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testGreaterThan stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testHash stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testInvalidCreation stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testLastTimeOfDay stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testLessThan stamp: 'HAW 9/27/2020 18:41:37'!
PASSED!

!testRun: #TimeOfDayTest #testNow stamp: 'HAW 9/27/2020 18:41:38'!
PASSED!

!testRun: #TimeOfDayTest #testOneMillisecond stamp: 'HAW 9/27/2020 18:41:38'!
PASSED!

!testRun: #TimeOfDayTest #testOneSecond stamp: 'HAW 9/27/2020 18:41:38'!
PASSED!

!testRun: #TimeOfDayTest #testPrintString stamp: 'HAW 9/27/2020 18:41:38'!
PASSED!

!testRun: #TimeOfDayTest #testReverse stamp: 'HAW 9/27/2020 18:41:38'!
PASSED!

!testRun: #TimeOfDayTest #testSubtract stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFrom stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFromMidnight stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeOfDayTest #testTimeTo stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeOfDayTest #testTimeToEndOfDay stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeOfDayTest #testTo stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeOfDayTest #testToBy stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeOfDayTest #testToByDo stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeOfDayTest #testToNegativeByDo stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeOfDayTest #testTwentyFourHours stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeOfDayTest #testZeroHours stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeUnitsTest #testAllUnits stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeUnitsTest #testDay stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeUnitsTest #testHour stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeUnitsTest #testMillisecond stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeUnitsTest #testMinute stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeUnitsTest #testMonth stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeUnitsTest #testSecond stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeUnitsTest #testWeek stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #TimeUnitsTest #testYear stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #BinarySearchTest #testquickFindFirst stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #BinarySearchTest #testquickFindLast stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOf stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOfWithSemistableOrder stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectTest #testIdentitySet stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectTest #testOrderedCollection stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectTest #testSet stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectTest #testSortedCollection stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testAsCommaSeparatedOnWorksAsCommaStringAnd stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndDoesNotAddAnythingWhenEmpty stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndDoesNotAddAnythingWhenHasOneElement stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndSeparatesWithAndWhenTwoOneElements stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndSeparatesWithCommaButLastOneWithAndWhenMoreThanTwoElements stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testAverageFailsWhenTheCollectionIsEmpty stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testAverageIfEmptyCalculatesItAsUsualWhenTheCollectionIsNotEmpty stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testAverageIfEmptyEvaluatesEmptyBlockWhenTheCollectionIsEmpty stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testGroupByHavingSelectsTheResultOfGroupBy stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testGroupByReturnsADictionaryThatGroupsACollectionByThePluggableKey stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testIsCollection stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testItMaintainsTheSameCollectionSpecies stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testSetEquality stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsASingleLevelOfElementsItReturnsTheSameCollection stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsMoreThanTwoLevelsltReturnsTheElementsOfAllNestedCollections stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsStringCollectionsItDoesNotFlattenTheStrings stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsStringsItReturnsTheSameCollection stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsTwoLevelsOfElementsItReturnsTheElementsOfAllNestedCollections stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionIsEmptyItReturnsTheSameCollection stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #CollectionTest #testsAverageWorksWithABlock stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #DictionaryTest #testIsCollection stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #DictionaryTest #testKeyNotFoundSignalTheRightMessage stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testAt stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeNumbersOutsideTheInInterval stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeObjectsThatAreNotNumbers stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStep stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStepWithReversedIntervals stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testFloatInterval stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testFloatToByDo stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectAStepDifferentToOne stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectNegativeSteps stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheInterval stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheIntervalEvenForReversedIntervals stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testIntegerInterval stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testIntegerToByDo stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepBiggerThanOneIncludeOnlyThatNumber stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepIncludeOnlyThatNumber stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndStepBiggerThanOneIncludesOnlyTheNumber stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberIncludesOnlyTheNumber stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #OrderedCollectionTest #testIsCollection stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #OrderedCollectionTest #testStreamContentsWorksAsExpected stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #OrderedCollectionTest #testWriteStreamOnOrderedCollectionGrowsAsExpected stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #OrderedDictionaryTest #testOrder stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #OrderedDictionaryTest #testRemove stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #SequenceableCollectionTest #testCombinationsAtATimeDoShouldEvaluateBlockWithEmptyCollection stamp: 'HAW 9/27/2020 18:41:39'!
PASSED!

!testRun: #SequenceableCollectionTest #testCombinationsAtATimeDoWorksAsExpected stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNotValueSeparatedBlockForCollectionsOfOneElement stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNotValueSeparatedBlockOnLastElement stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNothingForEmptyCollection stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsAllObjectsWhenRequestedMoreThanTheSize stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsAllObjectsWhenRequestedTheReceiversSize stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsTheFirstRequestedObjectsWhenTheyAreAvailable stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsAllObjectsWhenRequestedMoreThanTheSize stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsAllObjectsWhenRequestedTheReceiversSize stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsTheLastRequestedObjectsWhenTheyAreAvailable stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNotValueSeparatedBlockForCollectionsOfOneElement stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNotValueSeparatedBlockOnLastElement stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNothingForEmptyCollection stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #TextTest #testIsText stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #WeakIdentitySetTest #test stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testAllAccessToInstVarReturnsAccessReceiversBranch stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testAllAccessToIsEmptyForVariableNotDefinedInClass stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testAllBroadAccessToReturnsAccessInAllHierarchy stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToFailsWhenWantsToStopOnInvalidSuperclass stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToPutsFirstSuperclassesFirst stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToStopsOnRightClass stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testAllUnreferencedInstanceVariablesReturnsOnlyUnreferencedVariables stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testHasReferencesToInstanceVariableNamedLooksInClassOnly stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingReturnsReceiverWhenNoOtherSuperclassImplementsSelector stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingReturnsTheTopSuperclassImplementingSelector stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingValuesIfNoneBlockWhenSelectorIsNotImplemented stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testIsInstanceVariableNamedReferencedInHierarchyLooksReferencesInHierarchy stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testProtoObjectAllRegularInstVarNamesDoesNotFail stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testUnreferencedInstanceVariablesReturnsOnlyUnreferencedVariables stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #BehaviorTest #testWithAllSuperclassesUpToIncludesReceiverClass stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #CategorizerTest #testClassifiesWithoutLeadingBlanks stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #CategorizerTest #testClassifiesWithoutTrailingBlanks stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #CategorizerTest #testRemovesLeadingBlanksWhenAddingCategory stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #CategorizerTest #testRemovesTrailingBlanksWhenAddingCategory stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #CategorizerTest #testRenamesWithoutLeadingBlanks stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #CategorizerTest #testRenamesWithoutTrailingBlanks stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #ClassTest #testDefinitionReplacingCategoryWithReplacesTheCategoryWithTheGivenOne stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #ClassTest #testDefinitionReplacingCategoryWithWorksWhenCategoryIsNil stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #DateAndTimeTest #testCreation stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #DateAndTimeTest #testDayOfWeek stamp: 'HAW 9/27/2020 18:41:40'!
PASSED!

!testRun: #DateAndTimeTest #testInvalidOperations stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #DateAndTimeTest #testIsDateAndTime stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #DateAndTimeTest #testLessDateAndTime stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #DateAndTimeTest #testOperations stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #DateAndTimeTest #testToByDo stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #DateTest #testCreation stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #DateTest #testInvalidOperations stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #DateTest #testLessDate stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #DateTest #testLessDuration stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #DurationTest #testPrintString stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #MonthTest #testCreation stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #MonthTest #testPrintString stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #TimeTest #testCreation stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #TimeTest #testEqual stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #TimeTest #testSqueakInquiries stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #TimeTest #testTimePartsArePositive stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #TimespanTest #testIsTimespan stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #WeekTest #testCreation stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #WeekTest #testIncluding stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #WeekTest #testInvalidOperations stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #WeekTest #testPrintString stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #WeekTest #testWeekDayNames stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #YearTest #testCreation stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #YearTest #testIncluding stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test01isGetterWhenSameSelectorAsInstanceVariableAndOnlyReturnsThatVariable stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test01withPropertiesDoIfSelectorEvaluatesFirstBlockWhenMethodHasProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test02isNotGetterWhenDifferentSelectorAsInstanceVariable stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test02removePropertiesRestoresPenultimalLiteralToSelector stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test03isNotGetterWhenSameSelectorAsInstanceVariableButDoesOtherThingBesidesReturningVariable stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test03removePropertiesKeepsSelectorIfMethodDoesNotHaveProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test04isSetterWhenSameKeywordSelectorAsInstanceVariableAndOnlySetsTheVariable stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test04withPropertiesDoIfSelectorEvaluatesSecondBlockWhenMethodHasNoProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test05hasLiteralSuchThatTravelsListeralsWhenMethodHasProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test05isNotSetterWhenDifferentKeywordSelectorAsInstanceVariable stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test06hasLiteralSuchThatTravelsListeralsWhenMethodHasNoProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test06isNotSetterWhenSameKeywordSelectorAsInstanceVariableButDoesNotAssignParameter stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test0701withPropertiesDoReturnsNilIfMethodHasNoProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test07AccessorDescriptionIsGetterForAGetter stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test07withPropertiesDoEvaluatesBlockOnlyWhenMethodHasProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test08AccessorDescriptionIsSetterForASetter stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test08hasLiteralThoroughReturnTrueWhenMethodHasPropertiesAndHasLiteral stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test09AccessorDescriptionIsReadForMethodThatReadsInstanceVariable stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test09hasLiteralThoroughReturnFalseWhenMethodHasPropertiesAndHasNoLiteral stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test10AccessorDescriptionIsWriteForMethodThatWritesInstanceVariable stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test10hasLiteralThoroughReturnTrueWhenMethodHasNoPropertiesAndHasLiteral stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test11AccessorDescriptionIsWriteReadForMethodThatWritesAndReadInstanceVariable stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test11hasLiteralThoroughReturnFalseWhenMethodHasNoPropertiesAndHasNoLiteral stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test12pragmaAtReturnsPragmaIfExist stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test13pragmaAtReturnsNilIfPragmaDoesNotExist stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test14pragmasReturnsCollectionOfMethodPragmas stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test15pragmasReturnsEmptyCollectionWhenMethodHasNoProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test16propertiesReturnsAnNewAdditionalMethodStateWhenNoPropertiesHasBeenSet stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test17propertiesReturnsTheAlreadySetAdditionalMethodStateWhenHasProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test18propertyKeysAndValuesDoIteratesOverProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test19propertyKeysAndValuesDoDoesNotEvaluateBlockWhenMethodHasNoProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test20propertyValueAtReturnsPropertyValueWhenSetted stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test21propertyValueAtReturnsNilWhenPropertyIsNotFound stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test22propertyValueAtReturnsNilWhenMethodHasNoProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test23propertyValueAtIfAbsetReturnsPropertyValueWhenFound stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test24propertyValueAtIfAbsetEvaluatesIfAbsentBlockWhenNotFound stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test25propertyValueAtIfAbsetEvaluatesIfAbsentBlockWhenMethodHasNoProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test26propertyValueAtPutCreatesPropertiesWithNewOne stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test27propertyValueAtPutReplacesPropertyIfAlreadyExisted stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test28propertyValueAtPutAddsNewPropertyIfPropertiesExisted stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test29selectorReturnsMethodSelectorWhenNoProperties stamp: 'HAW 9/27/2020 18:41:41'!
PASSED!

!testRun: #CompiledMethodTest #test30selectorReturnsMethodSelectorWhenHasProperties stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CompiledMethodTest #test31SettingSelectorWhenHasNoProperties stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CompiledMethodTest #test32SettingSelectorWhenHasProperties stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #DelayTest #testBounds stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #DelayTest #testMultiProcessWaitOnSameDelay stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #DelayTest #testMultiSchedule stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #MonitorTest #testExample1 stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #MonitorTest #testExample2 stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #MonitorTest #testMonitorNotGainingUnwantedSignalsDuringUnwinding stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #ProcessTest #testAtomicSuspend stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #SemaphoreTest #testCritical stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #SemaphoreTest #testCriticalIfError stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #SemaphoreTest #testSemaAfterCriticalWait stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #SemaphoreTest #testSemaInCriticalWait stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #SemaphoreTest #testWaitAndWaitTimeoutTogether stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #SemaphoreTest #testWaitTimeoutMSecs stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!classDefinition: #BecomeTestExperiment category: 'BaseImageTests-Kernel' stamp: 'HAW 9/27/2020 18:41:42'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!testRun: #BecomeTest #testBecome stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!classDefinition: #BecomeTestExperiment category: 'BaseImageTests-Kernel' stamp: 'HAW 9/27/2020 18:41:42'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!testRun: #BecomeTest #testShapeMutation stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #BooleanTest #testAndAndAndAndTrueTable stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #BooleanTest #testAndAndAndTrueTable stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #BooleanTest #testAndAndTrueTable stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #BooleanTest #testIsBoolean stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #BooleanTest #testOrOrOrOrTrueTable stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #BooleanTest #testOrOrOrTrueTable stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #BooleanTest #testOrOrTrueTable stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsFalseForCharacterNotIncluded stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsFalseForObjectsThatAreNotCharacters stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsTrueForCharacterIncluded stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterTest #testCaseConversion stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil0Arg stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil0ArgAsVar stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil1Arg stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil1ArgAsVar stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil0Arg stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil0ArgAsVar stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil1Arg stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil1ArgAsVar stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil0Arg stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil0ArgAsVar stamp: 'HAW 9/27/2020 18:41:42'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil1Arg stamp: 'HAW 9/27/2020 18:41:43'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil1ArgAsVar stamp: 'HAW 9/27/2020 18:41:43'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessor stamp: 'HAW 9/27/2020 18:41:44'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessorOnlyForNoTimeout stamp: 'HAW 9/27/2020 18:41:46'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessorOnlyForTimeout stamp: 'HAW 9/27/2020 18:41:47'!
PASSED!

!testRun: #ProcessorTest #testValueUnpreemptively stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #SpecialSelectorsTest #testCollectionAtSymbol stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #SpecialSelectorsTest #testNumberAtSymbol stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StrikeFontTest #testBaseAndDerivedFont stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StrikeFontTest #testBaseAndDerivedFontSanity stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateIfAbsentReturnsAntepenultimateIfExists stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateIfAbsentValuesIfAbsentBlockWhenNoAntepenultimate stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateReturnsAntepenultimateIfExists stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateSignalsErrorWhenCollectionIsNotBigEnough stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testCanNotInsertShiftingRightWhenInsertionPointIsBiggerThanSize stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testCanNotInsertShiftingRightWhenInsertionPointIsLessThanOne stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightLoosesLastElementAndKeepsPreviousOnes stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightReplacesElementWhenSizeIsOne stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightReplacesLastElementWhenInsertingAtLastIndex stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testIsArray stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testIsCollection stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testLastIfEmptyReturnsLastWhenExist stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testLastIfEmptyValuesEmptyBlockWhenEmpty stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testLastSignalsErrorWhenEmpty stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testPenultimateIfAbsentReturnsPenultimateIfExists stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testPenultimateIfAbsentValuesIfAbsentBlockWhenNoPenultimate stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testPenultimateReturnsPenultimateIfExists stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #ArrayTest #testPenultimateSignalsErrorWhenCollectionIsNotBigEnough stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #Float32ArrayTest #testIsType stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #Float32ArrayTest #testZeroArrayDividend stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #Float32ArrayTest #testZeroArrayDivisor stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #Float32ArrayTest #testZeroDividend stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #Float32ArrayTest #testZeroDivisor stamp: 'HAW 9/27/2020 18:41:49'!
PASSED!

!testRun: #Float64ArrayTest #testIsCollection stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #Float64ArrayTest #testSum stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #Float64ArrayTest #testZeroArrayDividend stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #Float64ArrayTest #testZeroArrayDivisor stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #Float64ArrayTest #testZeroDividend stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #Float64ArrayTest #testZeroDivisor stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testBlockClosuresCanBeUsedAsHandlingCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndExceptionType stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndFilterCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndOrCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndExceptionType stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndFilterCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndOrCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndExceptionType stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndFilterCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndOrCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndExceptionType stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndFilterCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndOrCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndExceptionType stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndFilterCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndOrCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndExceptionType stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndFilterCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndOrCondition stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testExceptionsFollowTheExpectedHierarchy stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testFilterConditionWorksAsExcpetedWhenHandlingException stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testOrConditionWorksAsExcpetedWhenHandlingException stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testDoubleOuterPass stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testDoublePassOuter stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testDoubleResume stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testHandlerFromAction stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testNoTimeout stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testNonResumableFallOffTheEndHandler stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testNonResumableOuter stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testNonResumablePass stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testResignalAs stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testResignalAsUnwinds stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testResumableFallOffTheEndHandler stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testResumableOuter stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testResumablePass stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSignalFromHandlerActionTest stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsure stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithError stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithNotification stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithUparrow stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleIsNested stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleOuter stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimplePass stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleResignalAs stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleResume stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleRetry stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleRetryUsing stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testSimpleReturn stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ExceptionTests #testTimeoutWithZeroDuration stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ProcessTerminateBug #testSchedulerTermination stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ProcessTerminateBug #testTerminationDuringUnwind stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ProcessTerminateBug #testUnwindFromActiveProcess stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ProcessTerminateBug #testUnwindFromForeignProcess stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ArrayLiteralTest #testIsArray stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ArrayLiteralTest #testReservedIdentifiers stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ArrayLiteralTest #testSymbols stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test01isAtSuperclassWhenIndexIsInSuperclass stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test02isNotAtSuperclassWhenIndexIsOutsideSuperclass stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test03isAtClassNameWhenIndexIsInClassName stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test04isNotAtClassNameWhenIndexIsOutsideClassName stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test05isAtInstanceVariablesWhenIndexIsInInstanceVariablesString stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test06isNotAtInstanceVariablesWhenIndexIsOutsideInstanceVariablesString stamp: 'HAW 9/27/2020 18:41:50'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test07CanAccessSuperclass stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test08isAtCategoryWhenIndexIsInCategoryString stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test09isNotAtCategoryWhenIndexIsOutsideCategoryString stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test10InstanceVariablesIsTheSecondParameter stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test11CategoryIsTheFifthParameter stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockDoitDecompilation stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockNumbering stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockNumberingForInjectInto stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testDebuggerTempAccess stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testInjectIntoDecompilationsEncoderForV3PlusClosures stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testInjectIntoDecompiledDebugs stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionEM1 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR1 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR2 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR3 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionSD1 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testSourceRangeAccessForClosureBytecodeInjectInto stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testSourceRangeAccessForInjectInto stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureCompilerTest #testTempNameAccessForInjectInto stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample01 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample02 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample03 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample04 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample05 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample06 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample07 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample08 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample09 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample10 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureSerializationTest #testSample11 stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testBlockArgument stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testBlockTemp stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testCopyNonLocalReturn stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testIsTrivialClosure stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testMethodArgument stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testMethodTemp stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testToDoArgument stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testToDoArgumentNotInlined stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testToDoInsideTemp stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testToDoInsideTempNotInlined stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testToDoOutsideTemp stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testToDoOutsideTempNotInlined stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testWhileModificationAfter stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testWhileModificationAfterNotInlined stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testWhileModificationBefore stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testWhileModificationBeforeNotInlined stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testWhileWithTemp stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ClosureTests #testWhileWithTempNotInlined stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #ContextCompilationTest #testVariablesAndOffsetsDo stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorAt stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorClass stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorEqEq stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorInstVarAt stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorPerform stamp: 'HAW 9/27/2020 18:41:51'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorSize stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #ParserTest #testItGeneratesATempDeclarationNodeForEachTempInABlock stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #ParserTest #testItGeneratesATempDeclarationNodeForEachTempInAMethod stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #ParserTest #testItGeneratesAnEmptyTempsDeclarationNodeForAMethodWithoutTemps stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #ParserTest #testRangesAreOkWhenReturningAVariableWithoutSpaceAfterThat stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #PrettyPrintingTest #test1 stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #PrettyPrintingTest #test2 stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #PrettyPrintingTest #test3 stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #PrettyPrintingTest #test4 stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #PrettyPrintingTest #test5 stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #PrettyPrintingTest #test6 stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #ScannerTest #testLiteralSymbols stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test01TryingToTrimAnAlreadyTrimmedIntervalThatRepresentsASmalltalkExpressionDoesNotChangeTheOriginalInterval stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test02StartingAndEndingSeparatorsAreTrimmed stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test03StartingAndEndingDotsAreTrimmed stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test04GroupsOfParenthesesAreTrimmed stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test05GroupsOfParenthesesIncludingSeparatorsAreTrimmed stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test06AnIntervalThatDoesNotHaveCharactersToExpandRemainsTheSame stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test07AnIntervalEnclosedByParenthesesCanBeExpanded stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test08AnIntervalWithParenthesesOnJustOneSideCannotBeExpanded stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test09AnIntervalEnclosedByBackticksCanBeExpanded stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test10AnIntervalEnclosedMultipleBackticksAndParenthesesCanBeExpanded stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #SourceCodeIntervalTest #test11AsSourceCodeIntervalMessageDoesNotCreateANewSourceCodeIntervalInstance stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileIOAccessorTest #testDirectoryExists stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testAbsolutePath stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testAtPut stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testConcatenation stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testCopy stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testDefaultDirectory stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testFileContents stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testIsAbsolutePathName stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testIsRelativePathName stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testPathComponents stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testPipe stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testRecursiveDelete stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testRefresh stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testRename stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testRoot stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #FileManTest #testStream stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testAddressRange stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testChangesFileAddressRange stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testFileIndexFromSourcePointer stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testFilePositionFromSourcePointer stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testSourcePointerFromFileIndexAndPosition stamp: 'HAW 9/27/2020 18:41:52'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testSourcesFileAddressRange stamp: 'HAW 9/27/2020 18:41:53'!
PASSED!

!testRun: #SystemConsistencyTest #testMethodsWithUnboundGlobals stamp: 'HAW 9/27/2020 18:41:53'!
PASSED!

!testRun: #TrieTest #testAllMesssagesLikeDicionary stamp: 'HAW 9/27/2020 18:41:57'!
PASSED!

!testRun: #TrieTest #testAllMesssagesLikeSet stamp: 'HAW 9/27/2020 18:42:01'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsFalseForObjectsThatAreNotString stamp: 'HAW 9/27/2020 18:42:01'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsFalseForStringsNotIncluded stamp: 'HAW 9/27/2020 18:42:01'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsTrueForIncludedStrings stamp: 'HAW 9/27/2020 18:42:01'!
PASSED!

!testRun: #TrieTest #testKeyNotFoundSignalTheRightMessage stamp: 'HAW 9/27/2020 18:42:01'!
PASSED!

!testRun: #TrieTest #testPrefixIteration stamp: 'HAW 9/27/2020 18:42:01'!
PASSED!

!testRun: #TrieTest #testPrefixIteration2 stamp: 'HAW 9/27/2020 18:42:02'!
PASSED!

!testRun: #TrieTest #testRemoveLikeDicionary stamp: 'HAW 9/27/2020 18:42:05'!
PASSED!

!testRun: #TrieTest #testRemoveLikeSet stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #TrieTest #testSetProtocol stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #ReferenceStreamTest #testDiskProxy stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #ReferenceStreamTest #testSortedCollection stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #ReferenceStreamTest #testWeakDumps stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #SmartRefStreamTest #testDiskProxy stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #SmartRefStreamTest #testSortedCollection stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #SmartRefStreamTest #testWeakDumps stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbAdd stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMax stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMin stamp: 'HAW 9/27/2020 18:42:09'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMinInvert stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMul stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbSub stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #BitBltTest #testAlphaCompositing stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #BitBltTest #testAlphaCompositing2 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test16bpp stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test16bpp61 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test16bpp62 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test16bpp63 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test16bppLE stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test16bppLE61 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test16bppLE62 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test16bppLE63 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test32bpp stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test32bpp63 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #test32bppLE63 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testBA16bpp stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testBA16bpp61 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testBA16bpp62 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testBA16bpp63 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testBA16bppLE stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testBA16bppLE61 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testBA16bppLE62 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testBA16bppLE63 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testBA32bpp stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testBA32bpp63 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testGray stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testGray61 stamp: 'HAW 9/27/2020 18:42:10'!
PASSED!

!testRun: #JpegTest #testGray62 stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #JpegTest #testGray63 stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #JpegTest #testGrayBA stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #JpegTest #testGrayBA61 stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #JpegTest #testGrayBA62 stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #JpegTest #testGrayBA63 stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #AffineTransformationTest #testComposition stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #AffineTransformationTest #testDisplayBounds stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #AffineTransformationTest #testFloatInverseTransform stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #AffineTransformationTest #testFloatTransform stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #AffineTransformationTest #testInverseTransformation stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #LayoutMorphTest #testLayout1 stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #LayoutMorphTest #testLayout2 stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #LayoutMorphTest #testLayout3 stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #MorphicLocationTest #testComposition stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #MorphicTranslationTest #testComposition stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #MorphicTranslationTest #testDisplayBounds stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #MorphicTranslationTest #testInverseTransform stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #MorphicTranslationTest #testInverseTransformation stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #MorphicTranslationTest #testTransform stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #WorldTest #testDoOneCycleWorksWithDeferredQueue stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TaskbarTest #testClassSingleton stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TaskbarTest #testHorizontalAlignment stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TaskbarTest #testWidth stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesByPassesWhenActionChangesConditionByTheSpecifiedAmount stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesFromToPassesWhenActionChangesConditionFromAndToTheSpecifiedValues stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesPassesWhenConditionIsAlteredByAction stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertDoeNotChangePassesWhenConditionIsNotAlteredByAction stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertIncludesFailsWhenElementIsNotIncludedInCollection stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertIncludesShouldNotFailWhenElementIsInCollection stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesForSameNumberDifferentToZero stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesWhenBothAreZero stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesWithSameCalculatedNumber stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToWithPrecisionPassesWhenDifferenceIsNegativeAndLessThanPrecision stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToWithPrecisionPassesWhenDifferenceIsPositiveAndLessThanPrecision stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testAssertIsNotCloseWithPrecisionPassesWhenDifferenceIsBiggerThanPrecision stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testIsTestCase stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testShouldFailErrorsWhenNoErrorIsSignaled stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testShouldFailPassesWhenAnErrorIsSignaled stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testShouldNotTakeMoreThanFailsWhenClosureTakesMoreThanTheLimit stamp: 'HAW 9/27/2020 18:42:11'!
PASSED!

!testRun: #TestCaseTest #testShouldNotTakeMoreThanPassesWhenClosureTakesLessThanTheLimit stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoCanExpectException stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoFailsWhenNoExceptionIsSignaled stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoFailsWhenOtherExceptionTypeIsSignaled stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoPassSignaledExceptionToAssertionsBlock stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoValuesAssertionsBlockWhenExceptionIsRaised stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithMessageTextDoesNotFailWithRightMessageText stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithMessageTextFailsWithDifferentMessageText stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestCaseTest #testShoulndFailErrorsWhenAnErrorIsSignaled stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestCaseTest #testShoulndFailPassesWhenNoErrorIsSignaled stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestSuiteTest #test01SuiteForTestCaseClassHasTheSameTestAsCreatingTheSuiteFromTheTestCaseClass stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestSuiteTest #test02SuiteForNoTestCaseClassUsesTestClassWithSameNameEndingWithTest stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestSuiteTest #test03SuiteForNoTestCaseClassAndNoTestClassLooksForReferencesInTests stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestSuiteTest #test04SuiteForTestMethodIncludesOnlyTheMethod stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestSuiteTest #test05SuiteForNoTestMethodIncludesTestCaseSendingTheCompiledMethodSelector stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestSuiteTest #test06ForSystemCategoryWithTestCasesIncludesOnlyTestCasesClasses stamp: 'HAW 9/27/2020 18:42:12'!
PASSED!

!testRun: #TestSuiteTest #test07ForSystemCategoryWithNoTestCasesIncludesTestClassesTests stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #TestSuiteTest #test08ForMessageCategoryContainingTestCasesIncludesThoseTestCases stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #TestSuiteTest #test09ForMessageCategoryWihoutTestIsEmpty stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #TestSuiteTest #test10CanNotDebugAsFailureQuickMethods stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #DifferenceFinderTest #testCharacters stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #DifferenceFinderTest #testCharacters2 stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #DifferenceFinderTest #testCode stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #DifferenceFinderTest #testLines stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #DifferenceFinderTest #testWords stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #UnicodeTest #test1ReadBinary stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #UnicodeTest #test2ReadWithOutBinary stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #UnicodeTest #test3ReadUtf8 stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #UnicodeTest #test4BackConversion stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #UnicodeTest #test5ReadWriteUtf8 stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinNonLocalReturnFixReal stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinNonLocalReturnFixSimply stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingBasic stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingNestedInner stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingNestedOuter stamp: 'HAW 9/27/2020 18:42:13'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingRepeat stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testIsStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testNewLineTabWhenConditionIsFalseDoesNotPutANewLineTabInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testNewLineTabWhenConditionIsTruePutsANewLineTabInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testNewLineWhenConditionIsFalseDoesNotPutANewLineInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testNewLineWhenConditionIsTruePutsANewLineInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testNextPutAllWhenConditionIsFalseDoesNotPutCollectionInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testNextPutAllWhenConditionIsTruePutsCollectionInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testNextPutWhenConditionIsFalseDoesNotPutObjectInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testNextPutWhenConditionIsTruePutsObjectInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testPrintWhenConditionIsFalseDoesNotPrintObjectInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testPrintWhenConditionIsTruePrintsObjectInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testSpaceManyTimesWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testSpaceManyTimesWhenConditionIsTruePutSpacesInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testSpaceWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testSpaceWhenConditionIsTruePutsASpaceInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testTabManyTimesWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testTabManyTimesWhenConditionIsTruePutsTabsInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testTabWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WriteStreamTest #testTabWhenConditionIsTruePutsATabInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testNewLineWhenConditionIsFalseDoesNotPutANewLineInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testNewLineWhenConditionIsTruePutsANewLineInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testNextPutAllWhenConditionIsFalseDoesNotPutCollectionInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testNextPutAllWhenConditionIsTruePutsCollectionInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testNextPutWhenConditionIsFalseDoesNotPutObjectInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testNextPutWhenConditionIsTruePutsObjectInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testPrintWhenConditionIsFalseDoesNotPrintObjectInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testPrintWhenConditionIsTruePrintsObjectInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testSpaceWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testSpaceWhenConditionIsTruePutsASpaceInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testTabWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #TranscriptTest #testTabWhenConditionIsTruePutsATabInStream stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #ColorTest #testIsColor stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #RectangleTest #testIsRectangle stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #ColorFormTest #testIsColorForm stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #GrayFormTest #testIsGrayForm stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #ObjectTest #testErrorSignalsTheRightException stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenBecauseSignalsTheRightError stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenSignalsTheRightError stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #WeakMessageSendTest #testIsMessageSend stamp: 'HAW 9/27/2020 18:42:14'!
PASSED!

!testRun: #MethodReferenceTest #test01DefaultStringVersionIsClassAndSelector stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #test02CanPrefixStringVersion stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassIfAbsentEvaluatesBlockIfClassDoesNotExist stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassIfAbsentReturnsClassIfClassExists stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassReturnNilWhenClassDoesNotExist stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassReturnsClassIfExists stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentEvaluatesAbsentBlockWhenActualClassIsNil stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentEvaluatesAbsentBlockWhenSelectorIsNotImplemented stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentReturnsImplementedMethodWhenItExists stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testReferencesParameterAtReturnsFalseWhenInvalid stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testReferencesParameterAtReturnsTrueWhenTheParameterIsReferenced stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentEvaluatesBlockIfClassDoesNotExist stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentEvaluatesBlockIfMethodDoesNotExist stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentReturnsSourceCodeIfExists stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeReturnsSourceCodeIfMethodExist stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeSignalExceptionIfClassDoesNotExist stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeSignalExceptionIfMethodDoesNotExist stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #SymbolTest #testIsNotValidBinarySelectorIfItContainsACharacterNotAllowed stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #SymbolTest #testIsNotValidKeywordSelectorIfItContainsSeparators stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #SymbolTest #testIsNotValidUnarySelectorIfItContainsCharactersUsedInBinarySelectors stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #SymbolTest #testIsNotValidUnarySelectorIfItStartsWithALetterAndContainsSeparators stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #SymbolTest #testIsValidBinarySelectorIfItContainsAnAllowedCharacterOrSequenceOfCharacters stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #SymbolTest #testIsValidKeywordSelectorIfItContainsKeywordsWithColons stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #SymbolTest #testIsValidUnarySelectorIfItStartsWithALetterAndDoesNotContainSeparators stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'HAW 9/27/2020 18:42:15'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'HAW 9/27/2020 18:42:16'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 9/27/2020 18:42:16'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 9/27/2020 18:42:16'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'HAW 9/27/2020 18:42:17'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 9/27/2020 18:42:17'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 9/27/2020 18:42:17'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'HAW 9/27/2020 18:42:18'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 9/27/2020 18:42:18'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 9/27/2020 18:42:18'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'HAW 9/27/2020 18:42:18'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 9/27/2020 18:42:18'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 9/27/2020 18:42:19'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'HAW 9/27/2020 18:42:19'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 9/27/2020 18:42:19'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 9/27/2020 18:42:19'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'HAW 9/27/2020 18:42:20'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 9/27/2020 18:42:20'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 9/27/2020 18:42:21'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'HAW 9/27/2020 18:42:21'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test01ManyMethodsCanBeTypeChecked stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test02ClassesCanBeTypeChecked stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test04ProblemsDetectIfNone stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test05ProblemsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test07ErrorsDetectIfNone stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test10WarningsDetectIfNone stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test15HasErrorsOrWarnings stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test01MethodNotAnnotatingTypesGeneratesWarning stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test02EmptyMethodDoesNotGenerateWarningsOrErrors stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test03MessageSendNotUnderstoodByReceiverGeneratesError stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test04MessageUnderstooodByReceiverDoesNotGenerateErrors stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test05ErrorsWhenNoTypeImplementMessageSent stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test06DifferentErrorsAreReported stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test07ReceiverWithoutTypesGeneratesWarning stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test08GivesAWarningWhenReceiversTypeHasAnError stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test09WhenMethodHasNoReturnTypesAProblemIsAdded stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test10PrimitiveMethodsAreNotTypedChecked stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test11IfNotNilFiltersUndefinedObjectType stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test12IfNotNilDoesNotFiltersUndefinedObjectTypeForNotCheckedObject stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test13ComparingForNilWithIfTrueIfFalse stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test14ComparingForNilWithIfTrueIfFalseWhenNilFiltersOtherTypes stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test15ComparingForNilWithIfTrueIfFalseWhenNilKeepsUndefinedObject stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test16NestedIfNotNilFiltersUndefinedObjectType stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test17NestedIfNotNilDoesNotFilterUndefinedObjectWhenOutsideRightIfNotNil stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test18IfNilAssumesUndefinedObjectAsType stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test19NestedIfNilAssumesUndefinedObjectAsType stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test20NestedIfNilDoesUseUndefinedObjectWhenOutsideRightIfNil stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test21IfNilIfNotNilWorksAsExpected stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test22IfNotNilIfNilWorksAsExpected stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test23EqualsNilIfTrueIfFalseWorksAsExpected stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test24EqualsNilIfTrueWorksAsExpected stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test25IdenticalToNilIfTrueWorksAsExpected stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test26EqualsNilIfFalseWorksAsExpected stamp: 'HAW 9/27/2020 18:42:22'!
PASSED!

!testRun: #MethodTypeCheckerTest #test27IdenticalToNilIfFalseWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test28EqualsToNilIfFalseIfTrueWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test29IdenticalToNilIfFalseIfTrueWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test30nilEqualsToIfTrueIfFalseOrIfFalseIfTrueWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test31nilEqualsToIfTrueOrIfFalseWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32nilIdenticalToWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32_01_nilNotIdenticalOrEqualToWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test33NotEqualToNilWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test34NotIdenticalToNilWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test35isNilWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test36notNilWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test37TypeCastWithEqualOrIdenticalToWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test38TypeCastWithNotEqualOrNotIdenticalToWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test39TypeCastToUsingEqualOrIdenticalToWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test40TypeCastToUsingNotEqualOrNotIdenticalToWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test41TypeCastUsingIsKindOfToWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test42TypeCheckMessageWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test43TypeCheckMessageSentToSelfWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test44TypeCheckMessageWorksAsExpected stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test46TypeCastRejectsCanBeNested stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test47IsKindOfCastingAllowsSubtypes stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test48IfNotNilWithBlockArgumentFiltersUndefinedObject stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test49TypeCastWithBlockInRejectBlockKeepsCastingStrategy stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test50TypeCastWithoutBlockShouldFail stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test51NotNilAndFiltersUndefinedObject stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test52CascasdeMessageSendAreTypeChecked stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test53TypeCastWorksOnCascadeMessageSends stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test54IfNilWithReturnRejectsNilInNextColaborations stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test55TypeCheckMessageWithSubclassesReturningFalse stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test56Float_store_on_hasNoTypeErrors stamp: 'HAW 9/27/2020 18:42:23'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test57TypeCheckMessageWithFalse_True_False_InSubclassesCastCorrectly stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test58TypeCheckMessageWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test59TypeCheckMessageWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test60TypeCastWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test61TypeCastWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test62ifNotNilifNotNilWithMoreThanAMessageSendAndNilAsValue stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test63orCheck stamp: 'HAW 9/27/2020 18:42:23'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test64notNilAndIfTrue stamp: 'HAW 9/27/2020 18:42:23'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test65isNilOr stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66DoesNotFailsWithMessageSendAsConditionOfIfTrueWithCascadeSend stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66orWithoutMessageAsReceiverShouldNotError stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test67andWithoutMessageAsReceiverShouldNotError stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #MethodTypeCheckerTest #test68DoesNotFailsWithIfTrueSendInCascadeMode stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #DenotativeObjectRenameMethodApplierTest #test01ScopeOptionsAreTheSame stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #DenotativeObjectTest #test01IsDenotativeObjectNamedReturnsTrueForADenotativeObject stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #DenotativeObjectTest #test02IsDenotativeObjectNamedReturnsFalseForANoDenotativeObject stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #TestChangesTest #testDataClassName stamp: 'HAW 9/27/2020 18:42:23'!
PASSED!

!testRun: #ClassOrganizerTest #testClassifiesWithoutLeadingBlanks stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #ClassOrganizerTest #testClassifiesWithoutTrailingBlanks stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #ClassOrganizerTest #testRemovesLeadingBlanksWhenAddingCategory stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #ClassOrganizerTest #testRemovesTrailingBlanksWhenAddingCategory stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #ClassOrganizerTest #testRenamesWithoutLeadingBlanks stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #ClassOrganizerTest #testRenamesWithoutTrailingBlanks stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #test32bitConversion stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #test32bitConversion2 stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #test32bitInfinities stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #test32bitNaN stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #test32bitRoundingMode stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testArTanh stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testArcTan stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testAsTrueFraction stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'HAW 9/27/2020 18:42:24'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 9/27/2020 18:42:24'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 9/27/2020 18:42:24'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 9/27/2020 18:42:24'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testE stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testExactStoreString stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testExactStoreString2 stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testExp stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'HAW 9/27/2020 18:42:24'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testFloor stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testFloorLog2 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testHashWithFraction stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testHugeValues stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testIsDenormalized stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testIsZero stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testMaxExactInteger stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testMixedTypeComparison stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testMultiply stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNaN2 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNaN3 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNaN4 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNaNCompare stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'HAW 9/27/2020 18:42:25'!
FAILURE!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNaNTruncated stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNaNisLiteral stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNextTowardsZero stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testNoIntegerHash stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPartBits stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimAdd stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimArcTan stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimDivideBy stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimEqual stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimSin stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimSqrt stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'HAW 9/27/2020 18:42:25'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'HAW 9/27/2020 18:42:25'!
FAILURE!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testPrintStringStress stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'HAW 9/27/2020 18:42:26'!
ERROR!

!testRun: #FloatTest #testReciprocal stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testSin stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testSqrt stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testStoreBase16 stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testStoreOn stamp: 'HAW 9/27/2020 18:42:26'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 9/27/2020 18:42:27'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 9/27/2020 18:42:27'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 9/27/2020 18:42:27'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 9/27/2020 18:42:27'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 9/27/2020 18:42:27'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 9/27/2020 18:42:27'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 9/27/2020 18:42:27'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 9/27/2020 18:42:27'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 9/27/2020 18:42:27'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 9/27/2020 18:42:27'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testExactRaisedTo stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testFloorLogExactness stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testFractionPrinting stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testHash stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testIntegerWholeMultiplication stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testRounded stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testTruncated stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testWholeMultiplication stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerDigitLogicTest #testAndSingleBitWithMinusOne stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerDigitLogicTest #testLargeShift stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerDigitLogicTest #testMixedSignDigitLogic stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerDigitLogicTest #testNBitAndNNegatedEqualsN stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerDigitLogicTest #testNNegatedEqualsNComplementedPlusOne stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerDigitLogicTest #testShiftMinusOne1LeftThenRight stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerDigitLogicTest #testShiftOneLeftThenRight stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'HAW 9/27/2020 18:42:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'HAW 9/27/2020 18:42:28'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'HAW 9/27/2020 18:42:29'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'HAW 9/27/2020 18:42:29'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'HAW 9/27/2020 18:42:30'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testOne stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'HAW 9/27/2020 18:42:31'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'HAW 9/27/2020 18:42:31'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'HAW 9/27/2020 18:42:31'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'HAW 9/27/2020 18:42:32'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'HAW 9/27/2020 18:42:33'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'HAW 9/27/2020 18:42:33'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'HAW 9/27/2020 18:42:33'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'HAW 9/27/2020 18:42:34'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNext stamp: 'HAW 9/27/2020 18:42:34'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBits stamp: 'HAW 9/27/2020 18:42:34'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBitsInvalid stamp: 'HAW 9/27/2020 18:42:34'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextInteger stamp: 'HAW 9/27/2020 18:42:34'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextIntegerInvalid stamp: 'HAW 9/27/2020 18:42:34'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'HAW 9/27/2020 18:42:34'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'HAW 9/27/2020 18:42:34'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'HAW 9/27/2020 18:42:34'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger1 stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger2 stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSeedAndRepeatability stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSetAtRandom stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSimpleBuckets stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNext stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBits stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBitsInvalid stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextInteger stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextIntegerInvalid stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger1 stamp: 'HAW 9/27/2020 18:42:35'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger2 stamp: 'HAW 9/27/2020 18:42:36'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSeedAndRepeatability stamp: 'HAW 9/27/2020 18:42:36'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSetAtRandom stamp: 'HAW 9/27/2020 18:42:36'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSimpleBuckets stamp: 'HAW 9/27/2020 18:42:36'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesAAtoAM stamp: 'HAW 9/27/2020 18:42:37'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesANtoAZ stamp: 'HAW 9/27/2020 18:42:38'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesBAtoBM stamp: 'HAW 9/27/2020 18:42:39'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesBNtoBZ stamp: 'HAW 9/27/2020 18:42:40'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesCAtoCM stamp: 'HAW 9/27/2020 18:42:42'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesCNtoCZ stamp: 'HAW 9/27/2020 18:42:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesDAtoDM stamp: 'HAW 9/27/2020 18:42:46'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesDNtoDZ stamp: 'HAW 9/27/2020 18:42:46'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesEAtoEM stamp: 'HAW 9/27/2020 18:42:47'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesENtoEZ stamp: 'HAW 9/27/2020 18:42:48'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesFAtoFM stamp: 'HAW 9/27/2020 18:42:50'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesFNtoFZ stamp: 'HAW 9/27/2020 18:42:50'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesGAtoGM stamp: 'HAW 9/27/2020 18:42:50'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesGNtoGZ stamp: 'HAW 9/27/2020 18:42:52'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesHAtoHM stamp: 'HAW 9/27/2020 18:42:52'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesHNtoHZ stamp: 'HAW 9/27/2020 18:42:52'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesIAtoIM stamp: 'HAW 9/27/2020 18:42:52'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesINtoIZ stamp: 'HAW 9/27/2020 18:42:55'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesJAtoJM stamp: 'HAW 9/27/2020 18:42:55'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesJNtoJZ stamp: 'HAW 9/27/2020 18:42:55'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesKAtoKM stamp: 'HAW 9/27/2020 18:42:55'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesKNtoKZ stamp: 'HAW 9/27/2020 18:42:55'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesLAtoLM stamp: 'HAW 9/27/2020 18:42:56'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesLNtoLZ stamp: 'HAW 9/27/2020 18:42:56'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesMAtoMM stamp: 'HAW 9/27/2020 18:42:57'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesMNtoMZ stamp: 'HAW 9/27/2020 18:42:58'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesNAtoNM stamp: 'HAW 9/27/2020 18:42:59'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesNNtoNZ stamp: 'HAW 9/27/2020 18:42:59'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesOAtoOM stamp: 'HAW 9/27/2020 18:42:59'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesONtoOZ stamp: 'HAW 9/27/2020 18:43:00'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesPAtoPM stamp: 'HAW 9/27/2020 18:43:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesPNtoPZ stamp: 'HAW 9/27/2020 18:43:02'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesQAtoQM stamp: 'HAW 9/27/2020 18:43:02'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesQNtoQZ stamp: 'HAW 9/27/2020 18:43:02'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesRAtoRM stamp: 'HAW 9/27/2020 18:43:03'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesRNtoRZ stamp: 'HAW 9/27/2020 18:43:03'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesSAtoSM stamp: 'HAW 9/27/2020 18:43:06'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesSNtoSZ stamp: 'HAW 9/27/2020 18:43:08'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesTAtoTM stamp: 'HAW 9/27/2020 18:43:10'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesTNtoTZ stamp: 'HAW 9/27/2020 18:43:10'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesUAtoUM stamp: 'HAW 9/27/2020 18:43:10'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesUNtoUZ stamp: 'HAW 9/27/2020 18:43:11'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesVAtoVM stamp: 'HAW 9/27/2020 18:43:11'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesVNtoVZ stamp: 'HAW 9/27/2020 18:43:11'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesWAtoWM stamp: 'HAW 9/27/2020 18:43:11'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesWNtoWZ stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesXAtoXM stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesXNtoXZ stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesYAtoYM stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesYNtoYZ stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesZAtoZM stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesZNtoZZ stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testRemoteTemp stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'HAW 9/27/2020 18:43:12'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'HAW 9/27/2020 18:43:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'HAW 9/27/2020 18:43:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'HAW 9/27/2020 18:43:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'HAW 9/27/2020 18:43:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'HAW 9/27/2020 18:43:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'HAW 9/27/2020 18:43:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'HAW 9/27/2020 18:43:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'HAW 9/27/2020 18:43:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'HAW 9/27/2020 18:43:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'HAW 9/27/2020 18:43:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'HAW 9/27/2020 18:43:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'HAW 9/27/2020 18:43:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'HAW 9/27/2020 18:43:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'HAW 9/27/2020 18:43:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'HAW 9/27/2020 18:43:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'HAW 9/27/2020 18:43:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'HAW 9/27/2020 18:43:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 9/27/2020 18:43:18'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'HAW 9/27/2020 18:43:19'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'HAW 9/27/2020 18:43:20'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'HAW 9/27/2020 18:43:20'!
PASSED!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:20'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:20'!
griffle [ var1 := 1. goo := 1. ^goo + var1 ]! !

!testRun: #CompilerTest #testAddsMoreThanOneUndeclaredVariableCorrectlyInBlock stamp: 'HAW 9/27/2020 18:43:20'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:20'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:20'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:20'!
griffle [|var1| var1 := 1.goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenNoSpaceBetweenLastOneAndPipe stamp: 'HAW 9/27/2020 18:43:20'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:21'!
griffle [ :var1 | goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenTheresAnArgumentAlready stamp: 'HAW 9/27/2020 18:43:21'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:21'!
griffle [ :var1 | | | goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenTheresArgumentsAndTempDeclarationPipesWithNoTemps stamp: 'HAW 9/27/2020 18:43:21'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:22'!
griffle var1 := 1. [ goo := 1. ^goo + var1 ]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInMethodAndInBlock stamp: 'HAW 9/27/2020 18:43:22'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:23'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:23'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:23'!
griffle |var1| var1 := 1.goo := 1.^ goo + var1! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInMethodWhenNoSpaceBetweenLastOneAndPipe stamp: 'HAW 9/27/2020 18:43:23'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:23'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:23'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:23'!
griffle [|goo| goo := 1. ^goo ]. [goo1:=1.^ goo1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableInRightBlock stamp: 'HAW 9/27/2020 18:43:23'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:24'!
griffle [ :var1 | | foo | foo := 2. goo := 1.^ goo + var1 + foo ]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableWithAnArgumentAndTempAlreadyInBlock stamp: 'HAW 9/27/2020 18:43:24'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testCanNotDefineVarsInsideBackTick stamp: 'HAW 9/27/2020 18:43:25'!
PASSED!

!testRun: #CompilerTest #testCanNotHaveMoreThanOneExpressionInsideBackTick stamp: 'HAW 9/27/2020 18:43:25'!
PASSED!

!testRun: #CompilerTest #testCanNotHaveReturnInsideBackTick stamp: 'HAW 9/27/2020 18:43:25'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceSelfInsideBackTick stamp: 'HAW 9/27/2020 18:43:26'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceSuperInsideBackTick stamp: 'HAW 9/27/2020 18:43:26'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceTempVarsInsideBackTick stamp: 'HAW 9/27/2020 18:43:27'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceThisContextInsideBackTick stamp: 'HAW 9/27/2020 18:43:27'!
PASSED!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:27'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:27'!
griffle [ | goo | ]. [ | goo | ]! !

!testRun: #CompilerTest #testDoesNotConfusesVariablesWithSameNameOfDifferentBlocksWhenRemoving stamp: 'HAW 9/27/2020 18:43:27'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:28'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:28'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:28'!
griffle | goo |! !

!testRun: #CompilerTest #testDoesNotRemoveUnusedVariableIfSaidSo stamp: 'HAW 9/27/2020 18:43:28'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:29'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:29'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:29'!
griffle | goo a | a := 1. ^a! !

!testRun: #CompilerTest #testKeepsVariableDefinitionWhenThereAreUsedTemporaries stamp: 'HAW 9/27/2020 18:43:29'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:29'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:29'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:29'!
griffle [ | goo | ]! !

!testRun: #CompilerTest #testRemovesUnusedVariablesFromBlocks stamp: 'HAW 9/27/2020 18:43:29'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:30'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:30'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:30'!
griffle | goo |! !

!testRun: #CompilerTest #testRemovesVariableDefinitionWhenNoMoreUnusedTemporaries stamp: 'HAW 9/27/2020 18:43:30'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:30'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:30'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:30'!
griffle [ || goo := 1.^ goo ]! !

!testRun: #CompilerTest #testReusesBlockTempDeclarationWhenEmptyForUndeclaredVariable stamp: 'HAW 9/27/2020 18:43:30'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:31'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:31'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:43:31'!
griffle || goo := 1.^ goo! !

!testRun: #CompilerTest #testReusesMethodTempDeclarationWhenEmptyForUndeclaredVariable stamp: 'HAW 9/27/2020 18:43:31'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:32'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:32'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUndeclaredVariableIsSignaledForUndeclaredVariables stamp: 'HAW 9/27/2020 18:43:32'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:32'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:32'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUndefinedVariableIsSignaledForVariablesDefinedButNotInitialized stamp: 'HAW 9/27/2020 18:43:32'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:33'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:33'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUnknownSelectorIsSignalForMessagesSendNotImplemented stamp: 'HAW 9/27/2020 18:43:33'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:34'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:43:34'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUnusedVariableIsSignaledForUnusedVariables stamp: 'HAW 9/27/2020 18:43:34'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 9/27/2020 18:43:34'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 9/27/2020 18:43:35'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test01ScanNewClassChange stamp: 'HAW 9/27/2020 18:43:35'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 9/27/2020 18:43:35'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test02AddingANewMethodShouldBeLogged stamp: 'HAW 9/27/2020 18:43:35'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 9/27/2020 18:43:36'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test02ScanNewMethodChange stamp: 'HAW 9/27/2020 18:43:36'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 9/27/2020 18:43:37'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test03ChangingAMethodShouldBeLogged stamp: 'HAW 9/27/2020 18:43:37'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 9/27/2020 18:43:37'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test03ScanMethodModifiedChange stamp: 'HAW 9/27/2020 18:43:37'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 9/27/2020 18:43:38'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test04RemovingAMethodShouldBeLogged stamp: 'HAW 9/27/2020 18:43:38'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 9/27/2020 18:43:39'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test04ScanMethodRemovalChange stamp: 'HAW 9/27/2020 18:43:39'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 9/27/2020 18:43:39'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test05RemovingAClassShouldBeLogged stamp: 'HAW 9/27/2020 18:43:39'!
PASSED!

!testRun: #ChangesTest #test05ScanClassRemovalChange stamp: 'HAW 9/27/2020 18:43:40'!
PASSED!

!testRun: #ChangesTest #test06RenamingAClassShouldBeLogged stamp: 'HAW 9/27/2020 18:43:41'!
PASSED!

!classRemoval: #NewTestClass__ stamp: 'HAW 9/27/2020 18:43:41'!
RefactoringClassTestData subclass: #NewTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test06ScanClassRenamedChange stamp: 'HAW 9/27/2020 18:43:41'!
PASSED!

!classRemoval: #NewTestClass__ stamp: 'HAW 9/27/2020 18:43:42'!
RefactoringClassTestData subclass: #NewTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #testDataClassName stamp: 'HAW 9/27/2020 18:43:42'!
PASSED!

!testRun: #GreenTest #test01WhenANewTestIsAddedThenIsWritingAFailingTest stamp: 'HAW 9/27/2020 18:43:42'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:43:43'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test02WhenAProductionMethodIsAddedThenIsRefactoring stamp: 'HAW 9/27/2020 18:43:43'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 9/27/2020 18:43:44'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test03WhenAProductionMethodIsChangedThenIsRefactoring stamp: 'HAW 9/27/2020 18:43:44'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 9/27/2020 18:43:44'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test04WhenAProductionClassIsAddedThenIsRefactoring stamp: 'HAW 9/27/2020 18:43:44'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 9/27/2020 18:43:45'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test05WhenAProductionClassIsRemovedThenIsRefactoring stamp: 'HAW 9/27/2020 18:43:45'!
PASSED!

!testRun: #GreenTest #test06WhenATestIsChangedThenIsRefactoring stamp: 'HAW 9/27/2020 18:43:46'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 9/27/2020 18:43:46'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test07WhenATestPassesNothingHappens stamp: 'HAW 9/27/2020 18:43:46'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 9/27/2020 18:43:47'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test08WhenAMethodIsRemovedIsRefactoring stamp: 'HAW 9/27/2020 18:43:47'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 9/27/2020 18:43:48'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test09WhenATestHasAnErrorAnErrorIsReportedAndTransitionsToRed stamp: 'HAW 9/27/2020 18:43:48'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 9/27/2020 18:43:49'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test10WhenATestIsRenamedThenIsRefactoring stamp: 'HAW 9/27/2020 18:43:49'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 9/27/2020 18:43:49'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test11WhenATestFailsAnErrorIsReportedAndTransitionsToRed stamp: 'HAW 9/27/2020 18:43:49'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 9/27/2020 18:43:50'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test12WhenATestIsRemovedThenIsRefactoring stamp: 'HAW 9/27/2020 18:43:50'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 9/27/2020 18:43:51'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test13WhenATestClassIsRemovedThenIsRefactoring stamp: 'HAW 9/27/2020 18:43:51'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:43:52'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test14WhenATestClassIsAddedThenIsRefactoring stamp: 'HAW 9/27/2020 18:43:52'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:43:52'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test15WhenATestClassIsRenamedThenIsRefactoring stamp: 'HAW 9/27/2020 18:43:52'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 9/27/2020 18:43:53'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test01WhenAClassIsRemovedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:43:53'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:43:54'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test02WhenTheLastOfTheTestsIsRemovedIsBackToWritingAFailingTest stamp: 'HAW 9/27/2020 18:43:54'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:43:55'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test03WhenTheFirstOfTheTestsIsRemovedIsBackToWritingAFailingTest stamp: 'HAW 9/27/2020 18:43:55'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:43:55'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test04WhenAnotherTestIsRemovedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:43:56'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 9/27/2020 18:43:56'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:43:57'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test05WhenAMethodIsRemovedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:43:57'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:43:57'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:43:57'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test06WhenAModelMethodIsChangedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:43:58'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:43:58'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:43:58'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test07WhenAModelClassIsAddedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:43:59'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:43:59'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:43:59'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test08WhenAModelMethodIsAddedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:44:00'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:00'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:00'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test09WhenATestIsAddedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:44:01'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:01'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test10WhenATestClassIsAddedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:44:01'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 9/27/2020 18:44:02'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:02'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test11WhenOneOfTheTestTheTestsIsChangedIsStillInThisState stamp: 'HAW 9/27/2020 18:44:02'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:03'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test12WhenAnotherTestIsChangedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:44:03'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:04'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test13WhenATestFailsAnErrorIsReportedAndGoesToRed stamp: 'HAW 9/27/2020 18:44:04'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:04'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test14WhenOneOfTheTestsPassesTwoErrorsAreReported stamp: 'HAW 9/27/2020 18:44:05'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:05'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test15WhenAllOfTheTestsPassErrorsAreReportedAndGoesToGreen stamp: 'HAW 9/27/2020 18:44:05'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:06'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test16WhenOneOfTheTestsIsRenamedIsStillInThisState stamp: 'HAW 9/27/2020 18:44:06'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:07'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test17WhenAnotherTestIsRenamedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:44:07'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:07'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test18WhenATestUtilityIsChangedNothingHappens stamp: 'HAW 9/27/2020 18:44:07'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:08'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test01WhenAProductionClassIsAddedIsStillNotDoingTDD stamp: 'HAW 9/27/2020 18:44:08'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 9/27/2020 18:44:09'!
Object subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test02WhenAProductionMethodIsAddedIsStillNotDoingTDD stamp: 'HAW 9/27/2020 18:44:09'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 9/27/2020 18:44:10'!
Object subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test03WhenATestIsAddedIsStillNotDoingTDD stamp: 'HAW 9/27/2020 18:44:10'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 9/27/2020 18:44:10'!
TestCase subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test04WhenATestClassIsAddedIsStillNotDoingTDD stamp: 'HAW 9/27/2020 18:44:10'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:11'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test05WhenATestIsChangedIsStillNotDoingTDD stamp: 'HAW 9/27/2020 18:44:11'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:12'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test06WhenAProductionMethodIsChangedIsStillNotDoingTDD stamp: 'HAW 9/27/2020 18:44:12'!
PASSED!

!classRemoval: #ProductionClassA stamp: 'HAW 9/27/2020 18:44:12'!
Object subclass: #ProductionClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test07WhenAClassIsRemovedIsStillNotDoingTDD stamp: 'HAW 9/27/2020 18:44:13'!
PASSED!

!testRun: #NotDoingTDDTest #test08WhenThereIsOneTestAndPassesThenIsInGreen stamp: 'HAW 9/27/2020 18:44:13'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:14'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test09WhenOneOfTheTestFailsThenIsStillNotDoingTDD stamp: 'HAW 9/27/2020 18:44:14'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:15'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test10WhenOneOfTheTestIsNotRunThenIsStillNotDoingTDD stamp: 'HAW 9/27/2020 18:44:15'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:15'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test11WhenATestIsRenamedIsStillNotDoingTDD stamp: 'HAW 9/27/2020 18:44:15'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:16'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test12WhenThereIsMoreThanOneTestAndAllPassThenIsInGreen stamp: 'HAW 9/27/2020 18:44:16'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:17'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test13WhenATestIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 9/27/2020 18:44:17'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:18'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test14WhenATestClassIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 9/27/2020 18:44:18'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:19'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test15WhenAllTestAreRemovedThenGoesToGreen stamp: 'HAW 9/27/2020 18:44:19'!
PASSED!

!testRun: #NotStartedTest #test01WhenNoChangesAreDoneThenNothingHappens stamp: 'HAW 9/27/2020 18:44:19'!
PASSED!

!testRun: #NotStartedTest #test02WhenAModelClassIsAddedThenWeAsumeIsWritingAFailingTest stamp: 'HAW 9/27/2020 18:44:20'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:20'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test03WhenATestClassIsAddedThenIsWritingAFailingTest stamp: 'HAW 9/27/2020 18:44:21'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 9/27/2020 18:44:21'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test04WhenAProductionMethodIsAddedResultShouldHaveAnError stamp: 'HAW 9/27/2020 18:44:21'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:22'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test05WhenAMethodIsChangedResultShouldHaveAnError stamp: 'HAW 9/27/2020 18:44:22'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:23'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test06WhenATestIsAddedThenIsWritingAFailingTest stamp: 'HAW 9/27/2020 18:44:23'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:23'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test07WhenAClassIsRemovedResultShouldHaveAnError stamp: 'HAW 9/27/2020 18:44:24'!
PASSED!

!testRun: #NotStartedTest #test08WhenAMethodIsRemovedResultShouldHaveAnError stamp: 'HAW 9/27/2020 18:44:24'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:25'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test09WhenAllTestsPassThenIsInGreenState stamp: 'HAW 9/27/2020 18:44:25'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:25'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test10WhenATestFailsThenIsInRedState stamp: 'HAW 9/27/2020 18:44:25'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:26'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test11WhenATestHasAnErrorThenIsInRedState stamp: 'HAW 9/27/2020 18:44:26'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:27'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test12WhenATestIsChangedThenIsWritingAFailingTest stamp: 'HAW 9/27/2020 18:44:27'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:28'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test13WhenATestIsRenamedThenIsNotDoingTDD stamp: 'HAW 9/27/2020 18:44:28'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:28'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test01ShouldIgnoreDoIts stamp: 'HAW 9/27/2020 18:44:28'!
PASSED!

!testRun: #OtherTest #test02ResultKnowsTheChangesThatWereDone stamp: 'HAW 9/27/2020 18:44:29'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 9/27/2020 18:44:29'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test03TDDStateForEachChange stamp: 'HAW 9/27/2020 18:44:30'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 9/27/2020 18:44:30'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test04TestRenamesAreGroupedInASingleChange stamp: 'HAW 9/27/2020 18:44:30'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:31'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test05TestsWithSameNameInDifferentClassesAreDifferent stamp: 'HAW 9/27/2020 18:44:31'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 9/27/2020 18:44:32'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:32'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test06WhenATestHasAnErrorThisTestDoesNotFail stamp: 'HAW 9/27/2020 18:44:32'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:33'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test07RunFromASpecificChange stamp: 'HAW 9/27/2020 18:44:33'!
PASSED!

!classRemoval: #ExampleClass stamp: 'HAW 9/27/2020 18:44:33'!
Object subclass: #ExampleClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:34'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test08ReRunTheWholeAnalysis stamp: 'HAW 9/27/2020 18:44:34'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:34'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test09ReRunFromASpecificChange stamp: 'HAW 9/27/2020 18:44:34'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:44:35'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:35'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test10ChangeWhenAMethodWasAdded stamp: 'HAW 9/27/2020 18:44:35'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:44:36'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test01WhenAProductionClassIsAddedIsStillInRed stamp: 'HAW 9/27/2020 18:44:36'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 9/27/2020 18:44:37'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:37'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test02WhenAProductionMethodIsAddedIsStillInRed stamp: 'HAW 9/27/2020 18:44:37'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:38'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:38'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test03WhenTheTestPassesThenIsInGreen stamp: 'HAW 9/27/2020 18:44:38'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:39'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:39'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test04WhenTheTestFailsIsStillInRed stamp: 'HAW 9/27/2020 18:44:39'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:40'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:40'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test05WhenAProductionMethodIsChangedIsStillInRed stamp: 'HAW 9/27/2020 18:44:40'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:41'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:41'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test06WhenTheNewTestPassesButAnotherTestFailsThenIsStillInRed stamp: 'HAW 9/27/2020 18:44:41'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:42'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:42'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test07WhenAllTestsPassThenIsInGreen stamp: 'HAW 9/27/2020 18:44:43'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:43'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:43'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test08WhenATestIsAddedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:44:43'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:44'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test09WhenATestIsRenamedAndAllTestsPassThenIsInGreen stamp: 'HAW 9/27/2020 18:44:44'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:45'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:45'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test10WhenAModelMethodIsRemovedIsStillInRed stamp: 'HAW 9/27/2020 18:44:45'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:46'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:46'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test11WhenAModelClassIsRemovedIsStillInRed stamp: 'HAW 9/27/2020 18:44:47'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:47'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test11WhenATestClassIsAddedIsStillInRed stamp: 'HAW 9/27/2020 18:44:47'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 9/27/2020 18:44:48'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:48'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test12WhenTheTestIsChangedIsStillInRed stamp: 'HAW 9/27/2020 18:44:48'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:49'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:49'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test13WhenAnotherTestIsChangedIsStillInRed stamp: 'HAW 9/27/2020 18:44:49'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:50'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test14WhenATestIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD stamp: 'HAW 9/27/2020 18:44:50'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:44:51'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test15WhenATestClassIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD stamp: 'HAW 9/27/2020 18:44:51'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:52'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test01WhenAProductionMethodIsChangedIsStillRefactoring stamp: 'HAW 9/27/2020 18:44:52'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:52'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test02WhenAProductionMethodIsAddedIsStillRefactoring stamp: 'HAW 9/27/2020 18:44:52'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:44:53'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test03WhenAProductionClassIsAddedIsStillRefactoring stamp: 'HAW 9/27/2020 18:44:53'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 9/27/2020 18:44:54'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test04WhenATestIsChangedIsStillRefactoring stamp: 'HAW 9/27/2020 18:44:54'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:54'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test05WhenATestIsRenamedIsStillRefactoring stamp: 'HAW 9/27/2020 18:44:54'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:55'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test06WhenATestClassIsAddedIsStillRefactoring stamp: 'HAW 9/27/2020 18:44:55'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:56'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test07WhenATestIsAddedResultHasAnErrorAndIsWritingAFailingTest stamp: 'HAW 9/27/2020 18:44:56'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:56'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test08WhenAllTestPassThenIsInGreen stamp: 'HAW 9/27/2020 18:44:57'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:57'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test09WhenOneOfTheTestFailsThenIsStillRefactoring stamp: 'HAW 9/27/2020 18:44:57'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:44:58'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test10WhenAClassIsRemovedIsStillRefactoring stamp: 'HAW 9/27/2020 18:44:58'!
PASSED!

!testRun: #RefactorTest #test11WhenAProductionMethodIsRemovedStillRefactoring stamp: 'HAW 9/27/2020 18:44:59'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 9/27/2020 18:44:59'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test12WhenATestClassIsRemovedThoseTestsAreNoLongerTakenIntoAccount stamp: 'HAW 9/27/2020 18:45:00'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 9/27/2020 18:45:00'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test13WhenATestIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 9/27/2020 18:45:00'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:01'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test14WhenAllTestAreRemovedThenGoesToGreen stamp: 'HAW 9/27/2020 18:45:01'!
PASSED!

!testRun: #RefactorTest #test15WhenAModelMethodIsAddedButNotUsedThereIsAnError stamp: 'HAW 9/27/2020 18:45:02'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:03'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:03'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test16WhenAModelMethodIsAddedAndThenUsedThereAreNoErrors stamp: 'HAW 9/27/2020 18:45:03'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:04'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:04'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test17WhenAModelMethodIsAddedAndRemovedAndIsNotUsedThereAreNoErrors stamp: 'HAW 9/27/2020 18:45:04'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:05'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:05'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test18WhenAModelMethodIsAddedAndIsOnlyMentionedInACommentThereIsAnError stamp: 'HAW 9/27/2020 18:45:05'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:06'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:06'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test19WhenTwoModelMethodsAreAddedBothHaveToBeUsedInAValidRefactor stamp: 'HAW 9/27/2020 18:45:06'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:07'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:07'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test20WhenTwoModelMethodsAreAddedAndNotUsedIsNotAValidRefactor stamp: 'HAW 9/27/2020 18:45:07'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:08'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:08'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test21WhenAModelMethodIsAddedAndIsUsedAsAVariableNameIsNotAValidRefactor stamp: 'HAW 9/27/2020 18:45:08'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:09'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:09'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test22WhenAModelMethodIsNotUsedWhenAnalysisIsFinishedThereIsAnError stamp: 'HAW 9/27/2020 18:45:09'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:10'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:10'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test23WhenATestClassIsRenamedThoseTestsAreStillTakenIntoAccount stamp: 'HAW 9/27/2020 18:45:10'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:11'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassB stamp: 'HAW 9/27/2020 18:45:11'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test24WhenAMethodIsOverridenItIsConsideredUsedAndRefactorIsValid stamp: 'HAW 9/27/2020 18:45:11'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:12'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:12'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test01WhenTheTestIsChangedThenIsStillWritingAFailingTest stamp: 'HAW 9/27/2020 18:45:12'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:13'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test02WhenAModelClassIsAddedThenIsStillWritingAFailingTest stamp: 'HAW 9/27/2020 18:45:13'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 9/27/2020 18:45:14'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test03WhenATestClassIsAddedThenIsStillWritingAFailingTest stamp: 'HAW 9/27/2020 18:45:14'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:15'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test04WhenATestFailsThenIsInRedState stamp: 'HAW 9/27/2020 18:45:15'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:15'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test05WhenAModelMethodIsAddedAndNoTestIsBeingWrittenThenIsNotDoingTDD stamp: 'HAW 9/27/2020 18:45:15'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:45:16'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:16'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test06WhenTheTestIsRenamedThenIsStillWritingAFailingTest stamp: 'HAW 9/27/2020 18:45:16'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:17'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test07WhenAModelMethodIsChangedThenIsNotDoingTDD stamp: 'HAW 9/27/2020 18:45:17'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:45:18'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:18'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test08WhenSetUpMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest stamp: 'HAW 9/27/2020 18:45:18'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:19'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test09WhenAMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest stamp: 'HAW 9/27/2020 18:45:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:19'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test10WhenASecondTestIsAddedIsInMoreThanOneTestWritten stamp: 'HAW 9/27/2020 18:45:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:20'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test11WhenATestWithTheSameNameIsChangedInOtherClassThenIsNotDoingTDD stamp: 'HAW 9/27/2020 18:45:20'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 9/27/2020 18:45:21'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 9/27/2020 18:45:21'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test12WhenADifferentTestIsChangedThenIsNotDoingTDD stamp: 'HAW 9/27/2020 18:45:21'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 9/27/2020 18:45:22'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test13WhenATestWithTheSameNameIsAddedInOtherClassThenIsInMoreThanOneTestWritten stamp: 'HAW 9/27/2020 18:45:22'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 9/27/2020 18:45:23'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 9/27/2020 18:45:23'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test14WhenAModelMethodIsRemovedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:45:23'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 9/27/2020 18:45:24'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 9/27/2020 18:45:24'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test15WhenTheTestIsRemovedThenIsInGreen stamp: 'HAW 9/27/2020 18:45:24'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 9/27/2020 18:45:25'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test16WhenATestIsRenamedThenIsStillWritingAFailingTest stamp: 'HAW 9/27/2020 18:45:25'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 9/27/2020 18:45:25'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test17WhenAModelClassIsRemovedThenIsNotDoingTDD stamp: 'HAW 9/27/2020 18:45:26'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 9/27/2020 18:45:26'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test18WhenTheTestPassesAnErrorIsReportedAndGoesToGreen stamp: 'HAW 9/27/2020 18:45:26'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:27'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test19AnotherTestIsRemovedAnErrorIsReportedAndIsStillWritingAFailingTest stamp: 'HAW 9/27/2020 18:45:27'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 9/27/2020 18:45:28'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:28'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test20WhenAFirstTestIsAddedIsStillWritingAFailingTest stamp: 'HAW 9/27/2020 18:45:28'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:29'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test21WhenAModelMethodIsAddedBeforeRunningTestsThenIsNotDoingTDD stamp: 'HAW 9/27/2020 18:45:29'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:45:29'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:30'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test22WhenAModelMethodIsChangedBeforeWritingATestThenIsNotDoingTDD stamp: 'HAW 9/27/2020 18:45:30'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 9/27/2020 18:45:30'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 9/27/2020 18:45:31'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test23WhenATestClassIsRemovedIsNotDoingTDD stamp: 'HAW 9/27/2020 18:45:31'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 9/27/2020 18:45:32'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test01RunningAPassingTestShouldBeLogged stamp: 'HAW 9/27/2020 18:45:32'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 9/27/2020 18:45:32'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test02RunningAFailingTestShouldBeLogged stamp: 'HAW 9/27/2020 18:45:32'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 9/27/2020 18:45:33'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test03RunningATestWithAnErrorShouldBeLogged stamp: 'HAW 9/27/2020 18:45:33'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 9/27/2020 18:45:34'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test04OverridingAMethodShouldBeLoggedWithAReferenceToTheOverridenMethod stamp: 'HAW 9/27/2020 18:45:34'!
PASSED!

!classRemoval: #SubclassTestDataClass__ stamp: 'HAW 9/27/2020 18:45:35'!
TestChangesTestClass__ subclass: #SubclassTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 9/27/2020 18:45:35'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test05WhenAMethodIsNotOverridenTheMethodReferenceIsNotIncluded stamp: 'HAW 9/27/2020 18:45:35'!
PASSED!

!classRemoval: #SubclassTestDataClass__ stamp: 'HAW 9/27/2020 18:45:36'!
TestChangesTestClass__ subclass: #SubclassTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 9/27/2020 18:45:36'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test06WhenAMethodIsChangedItIsNotConsideredOverriden stamp: 'HAW 9/27/2020 18:45:36'!
PASSED!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 9/27/2020 18:45:37'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test01ScanPassingTestChange stamp: 'HAW 9/27/2020 18:45:37'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 9/27/2020 18:45:37'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test02ScanFailedTestChange stamp: 'HAW 9/27/2020 18:45:37'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 9/27/2020 18:45:38'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test03ScanNewTestClass stamp: 'HAW 9/27/2020 18:45:38'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 9/27/2020 18:45:39'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test04ScanOverridenMethod stamp: 'HAW 9/27/2020 18:45:39'!
PASSED!

!classRemoval: #AClass__ stamp: 'HAW 9/27/2020 18:45:40'!
TestChangesTestClass__ subclass: #AClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 9/27/2020 18:45:40'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test05ScanAMethodThatIsNotOverriden stamp: 'HAW 9/27/2020 18:45:40'!
PASSED!

!classRemoval: #AClass__ stamp: 'HAW 9/27/2020 18:45:41'!
TestChangesTestClass__ subclass: #AClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 9/27/2020 18:45:41'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #BlockNodeTest #testItDoesNotSendsAGivenMessageToSelfWhenTheBlockIsEmpty stamp: 'HAW 9/27/2020 18:45:41'!
PASSED!

!testRun: #BlockNodeTest #testItSendsAGivenMessageToSelfWhenItContainsAnStatementWithAMessageSendToSelf stamp: 'HAW 9/27/2020 18:45:41'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsNotSelf stamp: 'HAW 9/27/2020 18:45:41'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsSelfButTheSelectorIsDifferent stamp: 'HAW 9/27/2020 18:45:41'!
PASSED!

!testRun: #MessageNodeTest #testItSendsTheMessageToSelfWhenTheReceiverIsSelf stamp: 'HAW 9/27/2020 18:45:41'!
PASSED!

!testRun: #VariableNodeTest #testItDoesNotReferencesSelfWhenTheVariableNameIsNotSelf stamp: 'HAW 9/27/2020 18:45:41'!
PASSED!

!testRun: #VariableNodeTest #testItReferencesSelfWhenTheVariableNameIsSelf stamp: 'HAW 9/27/2020 18:45:41'!
PASSED!

!testRun: #AddInstanceVariableTest #test01NewVariableNameCanNotBeEmpty stamp: 'HAW 9/27/2020 18:45:41'!
PASSED!

!testRun: #AddInstanceVariableTest #test02NewVariableNameCanNotContainBlanks stamp: 'HAW 9/27/2020 18:45:41'!
PASSED!

!testRun: #AddInstanceVariableTest #test03NewVariableNameCanNotContainInvalidCharacters stamp: 'HAW 9/27/2020 18:45:42'!
PASSED!

!testRun: #AddInstanceVariableTest #test04ValidNewVariableNameGetBlanksTrimmed stamp: 'HAW 9/27/2020 18:45:42'!
PASSED!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:42'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test05NewVariableNameCanNotBeDefinedInClass stamp: 'HAW 9/27/2020 18:45:42'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 9/27/2020 18:45:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:43'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:43'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test06NewVariableNameCanNotBeDefinedInSuperclasses stamp: 'HAW 9/27/2020 18:45:43'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 9/27/2020 18:45:44'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithInstVar stamp: 'HAW 9/27/2020 18:45:44'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:44'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:44'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test07NewVariableNameCanNotBeDefinedInAnySubclass stamp: 'HAW 9/27/2020 18:45:44'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 9/27/2020 18:45:45'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 9/27/2020 18:45:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test08AddCreatesNewInstanceVariable stamp: 'HAW 9/27/2020 18:45:45'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 9/27/2020 18:45:46'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:46'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:46'!
m1 | a | a := 10.! !

!testRun: #AddInstanceVariableTest #test09FailsWhenNewVariableEqualsTemporaryVariableOfAMethodInClass stamp: 'HAW 9/27/2020 18:45:46'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 9/27/2020 18:45:46'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:46'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:46'!
m1:a! !

!testRun: #AddInstanceVariableTest #test10FailsWhenNewVariableEqualsArgumentOfAMethodInClass stamp: 'HAW 9/27/2020 18:45:46'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 9/27/2020 18:45:47'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:47'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:47'!
m1 [ :a | ] value: 1! !

!testRun: #AddInstanceVariableTest #test11FailsWhenNewVariableEqualsArgumentOfABlockInAMethodInClass stamp: 'HAW 9/27/2020 18:45:47'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 9/27/2020 18:45:48'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:48'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:48'!
m1 [ | a | ] value! !

!testRun: #AddInstanceVariableTest #test12FailsWhenNewVariableEqualsTemporaryOfABlockInAMethodInClass stamp: 'HAW 9/27/2020 18:45:48'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 9/27/2020 18:45:48'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:48'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:48'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:48'!
m1 | a | ! !

!testRun: #AddInstanceVariableTest #test13FailsWhenNewVariableIsHiddenInAnyMethodOfAnySubclass stamp: 'HAW 9/27/2020 18:45:48'!
PASSED!

!classRemoval: #SubclassOfClassToRefactor stamp: 'HAW 9/27/2020 18:45:49'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 9/27/2020 18:45:49'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:49'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test14NewVariableNameCanNotBeAReservedName stamp: 'HAW 9/27/2020 18:45:49'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 9/27/2020 18:45:50'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:50'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:50'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:50'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:50' prior: 50846376!
sender_m1 self m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:45:50'!
m1!

!testRun: #AddParameterTest #test01AddingParameterToUnaryMessageAddsColonAndParameter stamp: 'HAW 9/27/2020 18:45:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:45:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:50'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:50'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:50'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:50' prior: 50846415!
sender_m1 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 9/27/2020 18:45:50'!
m1: oldParam!

!testRun: #AddParameterTest #test02AddingParameterToKeywordMessageAddsNewKeywordAndParameter stamp: 'HAW 9/27/2020 18:45:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:45:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:51'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:51'!
sender_m1 self m1: 1. self m1: 1.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:51'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:51' prior: 50846455!
sender_m1 self m1: 1 m2: 2. self m1: 1 m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 9/27/2020 18:45:51'!
m1: oldParam!

!testRun: #AddParameterTest #test03AddingParameterToKeywordMessageMultipleSendsInSameMethodSameLiteral stamp: 'HAW 9/27/2020 18:45:51'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:45:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:52'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:52'!
sender_m1 self m1: self size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:52'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:52' prior: 50846496!
sender_m1 self m1: self size m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 9/27/2020 18:45:52'!
m1: oldParam!

!testRun: #AddParameterTest #test04AddingParameterToKeywordMessageWithMessageSendAsLastFormalParameter stamp: 'HAW 9/27/2020 18:45:52'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:45:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:52'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:52'!
sender_m1 self m1: self size + 4.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:52'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:52' prior: 50846537!
sender_m1 self m1: self size + 4 m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 9/27/2020 18:45:52'!
m1: oldParam!

!testRun: #AddParameterTest #test05AddingParameterToKeywordMessageWithBinaryMessageSendAsLastFormalParameter stamp: 'HAW 9/27/2020 18:45:52'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:45:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:53'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:53'!
sender_m1 self m1: (self at: 1 put: 2).! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:53'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:53' prior: 50846578!
sender_m1 self m1: (self at: 1 put: 2) m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 9/27/2020 18:45:53'!
m1: oldParam!

!testRun: #AddParameterTest #test06AddingParameterToKeywordMessageWithKeywordMessageSendAsLastFormalParameter stamp: 'HAW 9/27/2020 18:45:53'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:45:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:54'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:54'!
sender_m1 #m1 size! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:54'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:54' prior: 50846619!
sender_m1 #m1: size! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:45:54'!
m1!

!testRun: #AddParameterTest #test07AddingParameterToUnaryMessageChangesReferencesToSelector stamp: 'HAW 9/27/2020 18:45:54'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:45:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:54'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:54'!
sender_m1 #m1: size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:54'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:54' prior: 50846658!
sender_m1 #m1:m2: size.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 9/27/2020 18:45:54'!
m1: oldParam!

!testRun: #AddParameterTest #test08AddingParameterToKeywordMessageChangesReferencesToSelector stamp: 'HAW 9/27/2020 18:45:54'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:45:55'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test09FailsIfNewParameterValueCanNotBeCompiled stamp: 'HAW 9/27/2020 18:45:55'!
PASSED!

!testRun: #AddParameterTest #test10FailsIfNewParameterValueIsEmpty stamp: 'HAW 9/27/2020 18:45:55'!
PASSED!

!testRun: #AddParameterTest #test11NewParameterNameCanNotBeEmpty stamp: 'HAW 9/27/2020 18:45:56'!
PASSED!

!testRun: #AddParameterTest #test12NewParameterNameCanNotStartWithNumber stamp: 'HAW 9/27/2020 18:45:56'!
PASSED!

!testRun: #AddParameterTest #test13NewParameterNameCanNotContainSpaces stamp: 'HAW 9/27/2020 18:45:57'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:57'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:57'!
m1! !

!testRun: #AddParameterTest #test14NewParameterCanNotBeDefinedAsInstanceVariableInAnyImplementor stamp: 'HAW 9/27/2020 18:45:57'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:45:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:45:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:45:58'!
m1:newParam! !

!testRun: #AddParameterTest #test15NewParameterCanNotBeDefinedAsParameterInAnyImplementor stamp: 'HAW 9/27/2020 18:45:58'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:45:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test16WhenCreatedForUnarySelectorMustBeUnary stamp: 'HAW 9/27/2020 18:45:58'!
PASSED!

!testRun: #AddParameterTest #test17WhenCreatedForBinarySelectorMustBeBinary stamp: 'HAW 9/27/2020 18:45:59'!
PASSED!

!testRun: #AddParameterTest #test18CanNotAddParameterToBinaryKeyword stamp: 'HAW 9/27/2020 18:45:59'!
PASSED!

!testRun: #AddParameterTest #test19AllImplementorsMustImplementOldSelector stamp: 'HAW 9/27/2020 18:46:00'!
PASSED!

!testRun: #AddParameterTest #test20AllSendersShouldSendOldSelector stamp: 'HAW 9/27/2020 18:46:00'!
PASSED!

!testRun: #AddParameterTest #test21NewKeywordToAddToOldSelectorCanNotBeUnary stamp: 'HAW 9/27/2020 18:46:00'!
PASSED!

!testRun: #AddParameterTest #test22NewKeywordToAddToOldSelectorCanNotBeBinary stamp: 'HAW 9/27/2020 18:46:01'!
PASSED!

!testRun: #AddParameterTest #test23NewKeywordToAddToOldSelectorCanNotBeKeywordWithMoreThanOneParameter stamp: 'HAW 9/27/2020 18:46:01'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:01'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:01'!
sender_m1 self m1
	! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:02'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:02' prior: 50846793!
sender_m1 self m1: 1
	! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:46:02'!
m1!

!testRun: #AddParameterTest #test24AddingParameterToSendersTakeCaresOfSeparators stamp: 'HAW 9/27/2020 18:46:02'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:46:02'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:02'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:02'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:02'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:02'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:02' prior: 50846830!
sender_m1 self m1: (self at: 1)! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:46:02'!
m1!

!testRun: #AddParameterTest #test25IfNewParameterValueIsKeywordMessageSendAddParenthesisToItForUnaryMessages stamp: 'HAW 9/27/2020 18:46:02'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:46:03'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:03'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:03'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:03'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:03'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:03' prior: 50846870!
sender_m1 self m1: 1 m2: (self at: 1)! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 9/27/2020 18:46:03'!
m1: oldParam!

!testRun: #AddParameterTest #test26IfNewParameterValueIsKeywordMessageSendAddParenthesisToItForKeywordMessages stamp: 'HAW 9/27/2020 18:46:03'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:46:03'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test27NewParameterValueCanNotHaveMoreThanOneStatement stamp: 'HAW 9/27/2020 18:46:04'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:04'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:04'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:04'!
sender_m1 self m1:[ 1 factorial ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:04'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:04' prior: 50846915!
sender_m1 self m1:[ 1 factorial ] m2: 1! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 9/27/2020 18:46:04'!
m1: oldParam!

!testRun: #AddParameterTest #test28WhenSenderLastParameterIsABlockAddedParameterIsNotAddedInsideTheBlock stamp: 'HAW 9/27/2020 18:46:04'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:46:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:05'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:05'!
sender self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:05'!
m2: newParam m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:05' prior: 50846956!
sender self m2: 2 m1: 1! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 9/27/2020 18:46:05'!
m1: p1!

!testRun: #AddParameterTest #test29AddingParameterAsFirstOneWorksAsExpected stamp: 'HAW 9/27/2020 18:46:05'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:46:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:05'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:05'!
sender self m1: 1 m3: 3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:05'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:05' prior: 50846994!
sender self m1: 1 m2: 2 m3: 3! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 9/27/2020 18:46:05'!
m1: p1 m3: p3!

!testRun: #AddParameterTest #test30AddingParameterInTheMiddleWorksAsExpected stamp: 'HAW 9/27/2020 18:46:05'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:46:06'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:06'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:06'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:06'!
sender
	self m1: 1 m3: 3.
	self
		m1: 4
		m3: 6! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:06'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:06' prior: 50847034!
sender
	self m1: 1 m2: 2 m3: 3.
	self
		m1: 4
		m2: 2 m3: 6! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 9/27/2020 18:46:06'!
m1: p1 m3: p3!

!testRun: #AddParameterTest #test31AddingParameterInTheMiddleWithManySendersWorksAsExpected stamp: 'HAW 9/27/2020 18:46:06'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:46:07'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test32IndexCanNotBeLessThanOne stamp: 'HAW 9/27/2020 18:46:07'!
PASSED!

!testRun: #AddParameterTest #test33IndexCanNotBeBiggerThanNumberOfParametersPlusOne stamp: 'HAW 9/27/2020 18:46:07'!
PASSED!

!testRun: #AddParameterTest #test34IndexMustBeInteger stamp: 'HAW 9/27/2020 18:46:07'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:08'!
m1

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:08'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:08'!
m1: newParam

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:08' prior: 50847086!
sender_m1 self m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:46:08'!
m1

!

!testRun: #AddParameterTest #test35AddingParameterRetractsInsertionPointWhenAtInsertionPointIsANewLine stamp: 'HAW 9/27/2020 18:46:08'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:46:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test36ParentesisAreAddedToSendersOfUnaryMessage stamp: 'HAW 9/27/2020 18:46:08'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:46:09'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangeKeywordsSelectorOrderTest #test01CannotChangeSelectorOrderInUnaryMessages stamp: 'HAW 9/27/2020 18:46:09'!
PASSED!

!testRun: #ChangeKeywordsSelectorOrderTest #test02CannotChangeSelectorOrderInBinaryMessages stamp: 'HAW 9/27/2020 18:46:09'!
PASSED!

!testRun: #ChangeKeywordsSelectorOrderTest #test03CannotChangeSelectorOrderInKeywordMessagesWithOneParameterOnly stamp: 'HAW 9/27/2020 18:46:10'!
PASSED!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:10'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:10'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:10'!
m2: p2 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2: stamp: 'HAW 9/27/2020 18:46:10'!
m1: p1 m2: p2!

!testRun: #ChangeKeywordsSelectorOrderTest #test04ChangesKeywordsOrder stamp: 'HAW 9/27/2020 18:46:10'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 9/27/2020 18:46:11'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:11'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:11'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:11'!
m2: p2 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2: stamp: 'HAW 9/27/2020 18:46:11'!
m1: p1 m2: p2!

!testRun: #ChangeKeywordsSelectorOrderTest #test05ChangesParametersOrder stamp: 'HAW 9/27/2020 18:46:11'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 9/27/2020 18:46:11'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangeKeywordsSelectorOrderTest #test06NewSelectorMustIncludeOldSelectorKeywords stamp: 'HAW 9/27/2020 18:46:11'!
PASSED!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:12'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:12'!
m1: p1 m2: p2 m3: p3! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:12'!
m2: p2 m3: p3 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2:m3: stamp: 'HAW 9/27/2020 18:46:12'!
m1: p1 m2: p2 m3: p3!

!testRun: #ChangeKeywordsSelectorOrderTest #test07ChangesKeywordsAndParametersOrderForMoreThanTwoKeywords stamp: 'HAW 9/27/2020 18:46:12'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 9/27/2020 18:46:12'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:13'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:13'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test01NewSelectorShouldNotBeEmpty stamp: 'HAW 9/27/2020 18:46:13'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:13'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:13'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test02NewSelectorShouldNotContainSeparators stamp: 'HAW 9/27/2020 18:46:13'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:14'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:14'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:14'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:14'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test03ExtractingToSelectorAlreadyDefinedInTheClassRaisesAWarning stamp: 'HAW 9/27/2020 18:46:14'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:14'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:14'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:14'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:14'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test04NewSelectorShouldNotStartWithANumber stamp: 'HAW 9/27/2020 18:46:15'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:15'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:15'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test05NewUnarySelectorShouldNotStartWithASymbol stamp: 'HAW 9/27/2020 18:46:15'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:16'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:16'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:16'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test06IntervalToExtractIsNotBeforeMethodSourceCodeBoundaries stamp: 'HAW 9/27/2020 18:46:16'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:16'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:16'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:16'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test07IntervalToExtractIsNotAfterMethodSourceCodeBoundaries stamp: 'HAW 9/27/2020 18:46:16'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:17'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:17'!
m1 ^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test08IntervalToExtractShouldNotContainAReturnExpression stamp: 'HAW 9/27/2020 18:46:17'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:18'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:18'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:18'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:18'!
m1 ^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:18'!
m2

	^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:18' prior: 50847541!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test09ExtractingALiteralCreatesANewMethodAndChangesExistingCodeToCallThatNewMethod stamp: 'HAW 9/27/2020 18:46:18'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:18'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:19'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:19'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test10IntervalToExtractDoesNotContainsPartOfTheOriginalSelector stamp: 'HAW 9/27/2020 18:46:19'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:19'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:19'!
m1 | localVar | ^ localVar + 3! !

!testRun: #ExtractMethodTest #test11IntervalToExtractDoesNotContainsPartOfLocalVariablesDefinition stamp: 'HAW 9/27/2020 18:46:19'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:20'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:20'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:20'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:20'!
m1 <annoyingPragma>! !

!testRun: #ExtractMethodTest #test12IntervalToExtractDoesNotContainsPartOfPragmasDefinition stamp: 'HAW 9/27/2020 18:46:20'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:20'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:20'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:20'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:20'!
m1 ^ 3 + ((4))! !

!testRun: #ExtractMethodTest #test13IntervalToExtractShouldBeAValidSmalltalkExpression stamp: 'HAW 9/27/2020 18:46:20'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:21'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:21'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:21'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test14ItIsNotPossibleToExtractTheLeftSideOfAnAssignment stamp: 'HAW 9/27/2020 18:46:21'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:22'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:22'!
m1 self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:22'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:22' prior: 50847757!
m1 self m2! !

!testRun: #ExtractMethodTest #test15ExtractingAListOfStatementsCreatesANewMethodWithoutReturn stamp: 'HAW 9/27/2020 18:46:22'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:22'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:22'!
m1 ^ 'hey true'! !

!testRun: #ExtractMethodTest #test16CanNotExtractPartOfALiteral stamp: 'HAW 9/27/2020 18:46:22'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:23'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:23'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:23'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:23'!
m1 ^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:23'!
m2

	^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:23' prior: 50847834!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test17AStringContainingTheReturnCharacterCanBeExtracted stamp: 'HAW 9/27/2020 18:46:23'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:24'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:24'!
m1
	
	self m3.
	self m4: 5.! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:24'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:24' prior: 50847877!
m1
	
	self m2.! !

!testRun: #ExtractMethodTest #test18ExtractingAListOfStatementsIncludingDotsRemovesThemAndContinuesWithMethodExtraction stamp: 'HAW 9/27/2020 18:46:24'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:24'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:24'!
m1 ^ ((42))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:24'!
m2

	^ 42! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:24' prior: 50847921!
m1 ^ ((self m2))! !

!testRun: #ExtractMethodTest #test19ASelectionContainingAdditionalParenthesesAtTheBeginningAndOrEndCanBeExtracted stamp: 'HAW 9/27/2020 18:46:24'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:25'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:25'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:25'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:25'!
m1 | local | ^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:25'!
m2: local

	^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:25' prior: 50847964!
m1 | local | ^ self m2: local! !

!testRun: #ExtractMethodTest #test20ASelectionContainingALocalVariableIsParameterizedOnTheExtractedMessage stamp: 'HAW 9/27/2020 18:46:25'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:26'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:26'!
m1 ^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:26'!
m2

	^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:26' prior: 50848008!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test21ASelectionContainingAdditionalParenthesesOnOneSideCanBeExtractedAndItIsNotTrimmed stamp: 'HAW 9/27/2020 18:46:26'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:26'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:26'!
m1 | localVar | ^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:26'!
m2: localVar

	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:26' prior: 50848051!
m1 | localVar | ^ self m2: localVar! !

!testRun: #ExtractMethodTest #test22ItIsPossibleToExtractTheLastExpressionOfAMethod stamp: 'HAW 9/27/2020 18:46:26'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:27'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:27'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:27'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test23CanNotExtractWithAnInvalidInterval stamp: 'HAW 9/27/2020 18:46:27'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:28'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:28'!
m1 | localVar | localVar _ 8! !

!testRun: #ExtractMethodTest #test24ItIsNotPossibleToExtractAnIntervalIncludingATemporaryAssignmentExpression stamp: 'HAW 9/27/2020 18:46:28'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:28'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:28'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test25NewUnarySelectorShouldNotContainInvalidCharacters stamp: 'HAW 9/27/2020 18:46:28'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:29'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:29'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:29'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:29'!
m1 ^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:29'!
m2

	^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:29' prior: 50848198!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test26ItIsPossibleToExtractAnEntireBlockIncludingALocalAssignment stamp: 'HAW 9/27/2020 18:46:29'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:30'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:30'!
m1 ^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:30'!
m2

	^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:30' prior: 50848242!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test27ItIsPossibleToExtractExpressionsWithOptimizedSelectors stamp: 'HAW 9/27/2020 18:46:30'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:30'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:30'!
m1 | localVar | ^ #foo! !

!testRun: #ExtractMethodTest #test28ItIsNotPossibleToExtractALocalVariableInsideOfItsDeclaration stamp: 'HAW 9/27/2020 18:46:30'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:31'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:31'!
m1: arg ^ 2 + arg * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:31'!
m2: arg

	^ 2 + arg! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:31' prior: 50848322!
m1: arg ^ (self m2: arg) * 3! !

!testRun: #ExtractMethodTest #test29ExtractingABinaryExpressionToAKeywordMessageIntroducesParenthesesToNotBreakOriginalPrecedence stamp: 'HAW 9/27/2020 18:46:31'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:32'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:32'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:32'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:32'!
m1 ^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:32'!
m2

	^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:32' prior: 50848367!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test30ItIsPossibleToExtractAQuotedExpression stamp: 'HAW 9/27/2020 18:46:32'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:32'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:32'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:32'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:32'!
m1 ^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:32'!
m2

	^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:32' prior: 50848409!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test31ItIsPossibleToExtractExpressionsWithOptimizedSelectorsWhereTheReceiverIsNotASimpleLiteral stamp: 'HAW 9/27/2020 18:46:32'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:33'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:33'!
m1 ^ [ | a | a _ 3 factorial ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:33'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:33' prior: 50848454!
m1 ^ [ self m2 ]! !

!testRun: #ExtractMethodTest #test32ItIsPossibleToExtractATemporaryDeclarationOfABlockIfItIsNotUsedOutsideOfSelectionInterval stamp: 'HAW 9/27/2020 18:46:33'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:34'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:34'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:34'!
m1 | a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:34'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:34' prior: 50848498!
m1 self m2! !

!testRun: #ExtractMethodTest #test33ItIsPossibleToExtractATemporaryDeclarationIfItIsNotUsedOutsideOfSelectionInterval stamp: 'HAW 9/27/2020 18:46:34'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:34'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:34'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:34'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:34'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test34TryingToExtractAMethodWithLessArgumentsThanNeededFails stamp: 'HAW 9/27/2020 18:46:34'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:35'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:35'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test35TryingToExtractAMethodWithMoreArgumentsThanNeededFails stamp: 'HAW 9/27/2020 18:46:35'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:36'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:36'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:36'!
m1 ^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:36'!
m2

	^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:36' prior: 50848614!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test36ItIsPossibleToExtractACascadeExpression stamp: 'HAW 9/27/2020 18:46:36'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:36'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:36'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:36'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:36'!
m1 | temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:36'!
m2

	| temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:36' prior: 50848658!
m1 self m2! !

!testRun: #ExtractMethodTest #test37ItIsPossibleATempDeclarationAlongWithABlock stamp: 'HAW 9/27/2020 18:46:36'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:37'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:37'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:37'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:37'!
m1 ^ (  (3 + 4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:37'!
m2

	^ 3 + 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 9/27/2020 18:46:37' prior: 50848700!
m1 ^ (  (self m2))! !

!testRun: #ExtractMethodTest #test38ItIsPossibleToExtractCodeThatContainsMultipleParenthesisWithSpacesBetweenThem stamp: 'HAW 9/27/2020 18:46:37'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:37'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:38'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:38'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:38'!
m1 ^ 42! !

!testRun: #ExtractMethodTest #test39TryingToExtractToAMethodThatExistsInASuperclassRaisesAWarning stamp: 'HAW 9/27/2020 18:46:38'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:38'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:38'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:38'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:38'!
m1 |var| var _ 42. ^ var! !

!testRun: #ExtractMethodTest #test40CanNotExtractTemporaryAssignmentWithDeclarationIfTheVariableIsUsedOutsideOfSelectionInterval stamp: 'HAW 9/27/2020 18:46:38'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:39'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:39'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:39'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:39'!
m1: arg ^ self! !

!testRun: #ExtractMethodTest #test41CannotExtractPartOfMethodSignature stamp: 'HAW 9/27/2020 18:46:39'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 9/27/2020 18:46:39'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:39'!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test01NewVariableCanNotBeEmpty stamp: 'HAW 9/27/2020 18:46:39'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:40'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:40'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:40'!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test02NewVariableHasToBeValid stamp: 'HAW 9/27/2020 18:46:40'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:41'!
m1 | new | ^ 2! !

!testRun: #ExtractToTemporaryTest #test03NewVariableNameCanNotBeDefinedInMethod stamp: 'HAW 9/27/2020 18:46:41'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:41'!
m1 ^ 78! !

!testRun: #ExtractToTemporaryTest #test04FailsIfNewTemporaryIsEqualToInstanceVariableInClass stamp: 'HAW 9/27/2020 18:46:41'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:42'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:42'!
m1 ^ 78! !

!testRun: #ExtractToTemporaryTest #test05FailsIfNewTemporaryIsEqualToInstanceVariableInAnySuperclass stamp: 'HAW 9/27/2020 18:46:42'!
PASSED!

!classRemoval: #ClassToRefactorSuperclass stamp: 'HAW 9/27/2020 18:46:43'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:43'!
AnObsoleteClassToRefactorSuperclass subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:43'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test06SourceCodeToExtractCanNotIncludeReturn stamp: 'HAW 9/27/2020 18:46:43'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:44'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test07SourceCodeToExtractCanNotBeEmpty stamp: 'HAW 9/27/2020 18:46:44'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:44'!
m1 ^ 1 + 3! !

!testRun: #ExtractToTemporaryTest #test08SourceCodeToExtractCanNotHaveSyntaxErrors stamp: 'HAW 9/27/2020 18:46:44'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:45'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:45'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:45'!
m1 1+2. 3+4! !

!testRun: #ExtractToTemporaryTest #test09SourceCodeToExtractHasToBeOneStatement stamp: 'HAW 9/27/2020 18:46:45'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:45'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:45'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:45'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test10FailsIfIntervalToExtractIsBeforeMethodSourceCodeBoundaries stamp: 'HAW 9/27/2020 18:46:45'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:46'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test11FailsIfIntervalToExtractIsAfterMethodSourceCodeBoundaries stamp: 'HAW 9/27/2020 18:46:46'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:47'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:47'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:47'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:47' prior: 50849137!
m1

	| new |
	new _ 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test12ItIsPossibleToExtractASingleLiteralFromAMethodWithoutAnyTempsOrArguments stamp: 'HAW 9/27/2020 18:46:47'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:47'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:47'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:47'!
m1

	| four |
	four _ 4.
	^ four + 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:47' prior: 50849167!
m1

	| four two |
	four _ 4.
	two _ 2.
	^ four + two! !

!testRun: #ExtractToTemporaryTest #test13ItIsPossibleToExtractASingleExpressionFromAMethodThatHasAlreadyOtherTemporary stamp: 'HAW 9/27/2020 18:46:47'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:48'!
m1

	| |
	^ 3 factorial! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:48' prior: 50849199!
m1

	| f |
	f _ 3 factorial.
	^ f! !

!testRun: #ExtractToTemporaryTest #test14ItIsPossibleToExtractASingleExpressionFromAMethodThatHasAnEmptyTemporariesDeclaration stamp: 'HAW 9/27/2020 18:46:48'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:49'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:49'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:49'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:49' prior: 50849231!
m1

	| new |
	new := 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test15ItIsPossibleToExtractCodeAndGenerateAssignmentUsingAnsiAssignmentStyle stamp: 'HAW 9/27/2020 18:46:49'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:49'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:49'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:49'!
m1

	^ [ self m2 ]! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:49' prior: 50849261!
m1

	^ [ | new |
	new _ self m2 ]! !

!testRun: #ExtractToTemporaryTest #test16ItIsPossibleToExtractASingleLiteralFromABlockWithoutAnyTempsOrArguments stamp: 'HAW 9/27/2020 18:46:49'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:50'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test17CannotExtractPartOfMethodName stamp: 'HAW 9/27/2020 18:46:50'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:51'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:51'!
m1 ^ self m2! !

!testRun: #ExtractToTemporaryTest #test18CannotExtractPartOfMessageSend stamp: 'HAW 9/27/2020 18:46:51'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:51'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:51'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:51'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:51' prior: 50849340!
m1

	| new |
	new _ 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test19ItIsPossibleToExtractAnIntervalWithSomeExtraSpaces stamp: 'HAW 9/27/2020 18:46:51'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:52'!
m1

	^ []! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:52' prior: 50849370!
m1

	| new |
	new _ [].
	^ new! !

!testRun: #ExtractToTemporaryTest #test20ItIsPossibleToExtractAnEmptyBlock stamp: 'HAW 9/27/2020 18:46:52'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:52'!
m1 | existing | existing := 2! !

!testRun: #ExtractToTemporaryTest #test21CannotExtractLeftSideOfAssignment stamp: 'HAW 9/27/2020 18:46:52'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:53'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:53'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:53'!
m1

	^ 3 factorial; yourself! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:53' prior: 50849424!
m1

	| new |
	new _ 3 factorial; yourself.
	^ new! !

!testRun: #ExtractToTemporaryTest #test22ItIsPossibleToExtractACascadeExpression stamp: 'HAW 9/27/2020 18:46:53'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:54'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:54'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:54'!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:54' prior: 50849455!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:54' prior: 50849459!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:54' prior: 50849463!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:54' prior: 50849467!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:54' prior: 50849471!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test23CannotUseAReservedNameAsTheNewTemporaryVariable stamp: 'HAW 9/27/2020 18:46:54'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:54'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:54'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:54'!
m1

	self run! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:54' prior: 50849500!
m1

	| action |
	action _ self run! !

!testRun: #ExtractToTemporaryTest #test24WhenExtractingAnEntireStatementItOnlyGeneratesTheVariableAssignment stamp: 'HAW 9/27/2020 18:46:54'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:55'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:55'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:46:55'!
m1: arg ^ self! !

!testRun: #ExtractToTemporaryTest #test25CannotExtractArgumentNamesFromMethodSignature stamp: 'HAW 9/27/2020 18:46:55'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 9/27/2020 18:46:56'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:56'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:56'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:56'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test01ChangesTheSuperclassOfTheClassToRefactor stamp: 'HAW 9/27/2020 18:46:56'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 9/27/2020 18:46:56'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 9/27/2020 18:46:56'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:56'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:57'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:57'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test02ClassToRefactorStructureIsMaintained stamp: 'HAW 9/27/2020 18:46:57'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 9/27/2020 18:46:57'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'private'
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 9/27/2020 18:46:57'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:57'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:57'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:57'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test03NewSuperclassCategoryIsTheSameAsClassToRefactorCategory stamp: 'HAW 9/27/2020 18:46:57'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 9/27/2020 18:46:58'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 9/27/2020 18:46:58'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:58'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:58'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:58'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test04NewSuperclassHasNoVariables stamp: 'HAW 9/27/2020 18:46:58'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 9/27/2020 18:46:59'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 9/27/2020 18:46:59'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:59'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AlreadyExistingClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:46:59'!
RefactoringClassTestData subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test05NewSuperclassShouldNotExist stamp: 'HAW 9/27/2020 18:46:59'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 9/27/2020 18:47:00'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AlreadyExistingClass stamp: 'HAW 9/27/2020 18:47:00'!
RefactoringClassTestData subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test06NewSuperclassNameHasToBeASymbol stamp: 'HAW 9/27/2020 18:47:00'!
PASSED!

!testRun: #InsertSuperclassTest #test07NewSuperclassNameHasToStartWithUppercaseLetter stamp: 'HAW 9/27/2020 18:47:01'!
PASSED!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:01'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:01'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:01'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test08WhenAppliedToMetaclassWorksAsWithClass stamp: 'HAW 9/27/2020 18:47:01'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 9/27/2020 18:47:02'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 9/27/2020 18:47:02'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test09NewSuperclassNameCanNotBeEmpty stamp: 'HAW 9/27/2020 18:47:02'!
PASSED!

!testRun: #InsertSuperclassTest #test10NewSuperclassNameCanNotHaveSpaces stamp: 'HAW 9/27/2020 18:47:02'!
PASSED!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:03'!
newMethod ^a! !

!testRun: #MoveToInstanceOrClassMethodTest #test01CannotMoveWhenReferencingInstanceVariables stamp: 'HAW 9/27/2020 18:47:03'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 9/27/2020 18:47:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: 'ClassToMoveMethod class' category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:03'!
ClassToMoveMethod class
	instanceVariableNames: 'a'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:03'!
newMethod|a|! !

!testRun: #MoveToInstanceOrClassMethodTest #test02CannotMoveToClassWhenLocalVariableIsTheSameAsClassInstanceVariable stamp: 'HAW 9/27/2020 18:47:03'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 9/27/2020 18:47:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:04'!
newMethod|a|! !

!testRun: #MoveToInstanceOrClassMethodTest #test03CannotMoveToInstanceWhenLocalVariableIsTheSameAsClassInstanceVariable stamp: 'HAW 9/27/2020 18:47:04'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 9/27/2020 18:47:05'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:05'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:05'!
newMethod! !
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:05'!
newMethod! !

!methodRemoval: ClassToMoveMethod #newMethod stamp: 'HAW 9/27/2020 18:47:05'!
newMethod!

!testRun: #MoveToInstanceOrClassMethodTest #test04InstanceMethodIsMovedToClassMethod stamp: 'HAW 9/27/2020 18:47:05'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 9/27/2020 18:47:05'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:05'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:05'!
newMethod! !
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:05'!
newMethod! !

!methodRemoval: ClassToMoveMethod class #newMethod stamp: 'HAW 9/27/2020 18:47:05'!
newMethod!

!testRun: #MoveToInstanceOrClassMethodTest #test05ClassMethodIsMovedToInstanceMethod stamp: 'HAW 9/27/2020 18:47:05'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 9/27/2020 18:47:06'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:06'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test01AnInstanceVariableDoesNotExistOnClassToFactorCannotBePushedDownToSubclasses stamp: 'HAW 9/27/2020 18:47:06'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 9/27/2020 18:47:06'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:06'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushInstanceVariableDown methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:06'!
newMethod^ a! !

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test02AnInstanceVariableThatIsAccessedOnClassToRefactorCannotBePushedDownToAllSubclasses stamp: 'HAW 9/27/2020 18:47:06'!
PASSED!

!classRemoval: #SubclassWithoutInstVarTwo stamp: 'HAW 9/27/2020 18:47:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassWithoutInstVarOne stamp: 'HAW 9/27/2020 18:47:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 9/27/2020 18:47:08'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:08'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:08'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test03AnInstanceVariableThatIsNotAccessedOnClassToRefactorShouldBePushedDownToAllSubclasses stamp: 'HAW 9/27/2020 18:47:08'!
PASSED!

!classRemoval: #SubclassWithoutInstVarTwo stamp: 'HAW 9/27/2020 18:47:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassWithoutInstVarOne stamp: 'HAW 9/27/2020 18:47:09'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 9/27/2020 18:47:09'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:09'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:09'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:09'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:09'!
newMethod! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:09' overrides: 50850163!
newMethod! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:09' overrides: 50850163!
newMethod! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 9/27/2020 18:47:09'!
newMethod!

!testRun: #PushDownMethodTest #test01AnEmptyMethodOnClassToRefactorShouldBePushedDownToSubclasses stamp: 'HAW 9/27/2020 18:47:09'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 9/27/2020 18:47:09'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 9/27/2020 18:47:10'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 9/27/2020 18:47:10'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:10'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:10'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:10'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:10'!
newMethod|a|! !

!testRun: #PushDownMethodTest #test02AMethodTemporaryVarDeclaredAsInstVarOnASubclassCanNotBePushedDownToSubclasses stamp: 'HAW 9/27/2020 18:47:10'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 9/27/2020 18:47:11'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 9/27/2020 18:47:11'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 9/27/2020 18:47:11'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:11'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:11'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:11'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:11'!
newMethod:a! !

!testRun: #PushDownMethodTest #test03AMethodArgumentDeclaredAsInstVarOnASubclassCanNotBePushedDownToSubclasses stamp: 'HAW 9/27/2020 18:47:11'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 9/27/2020 18:47:12'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 9/27/2020 18:47:12'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 9/27/2020 18:47:12'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:12'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:12'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:12'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:12'!
newMethod^ 1 + a! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:12' overrides: 50850337!
newMethod^ 1 + a! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:12' overrides: 50850337!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 9/27/2020 18:47:12'!
newMethod^ 1 + a!

!testRun: #PushDownMethodTest #test04AMethodAccessesClassToRefactorInstVarShouldBePushedDownToSubclasses stamp: 'HAW 9/27/2020 18:47:12'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 9/27/2020 18:47:13'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 9/27/2020 18:47:13'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 9/27/2020 18:47:14'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:14'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:14'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:14'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:14'!
newMethod a = 1! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:14' overrides: 50850402!
newMethod a = 1! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:14' overrides: 50850402!
newMethod a = 1! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 9/27/2020 18:47:14'!
newMethod a = 1!

!testRun: #PushDownMethodTest #test05AMethodWritesClassToRefactorInstVarShouldBePushedDownToSubclasses stamp: 'HAW 9/27/2020 18:47:14'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 9/27/2020 18:47:14'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 9/27/2020 18:47:14'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 9/27/2020 18:47:15'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:15'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:15'!
newMethod
	^ 2 + a.! !

!classDefinition: #Subclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:15'!
ClassToPushMethodDown subclass: #Subclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!Subclass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:15' overrides: 50850451!
newMethod^ 1 + a! !

!testRun: #PushDownMethodTest #test06AMethodInClassToRefactorExistsInSubClassesShouldOverrideTheExistingSubClassesMethod stamp: 'HAW 9/27/2020 18:47:15'!
PASSED!

!classRemoval: #Subclass stamp: 'HAW 9/27/2020 18:47:15'!
ClassToPushMethodDown subclass: #Subclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 9/27/2020 18:47:16'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:16'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:16'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test01AnInstanceVariableThatIsNotUsedOnClassToRefactorShouldBePushedUpToSuperclass stamp: 'HAW 9/27/2020 18:47:16'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 9/27/2020 18:47:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithoutInstVar stamp: 'HAW 9/27/2020 18:47:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:17'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnoterSubClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:17'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:17'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnoterSubClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:17'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test02AnInstanceVariableOnMultipleSubclassesShouldBeRemovedFromAllSubclassesAndPushedUpToSuperClass stamp: 'HAW 9/27/2020 18:47:17'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 9/27/2020 18:47:17'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnoterSubClassWithInstVar stamp: 'HAW 9/27/2020 18:47:17'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithoutInstVar stamp: 'HAW 9/27/2020 18:47:18'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:18'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test03AnInstanceVariableDoesNotExistOnClassToRefactorCannotBePushedUp stamp: 'HAW 9/27/2020 18:47:18'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 9/27/2020 18:47:18'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithVariableAsTemporaryVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:18'!
RefactoringClassTestData subclass: #SuperclassWithVariableAsTemporaryVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassWithVariableAsTemporaryVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:18'!
newMethod| a |! !

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:18'!
SuperclassWithVariableAsTemporaryVariable subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test04AnInstanceVariableThatIsUsedOnSuperClassAsTemporaryVariableCannotBePushedUp stamp: 'HAW 9/27/2020 18:47:18'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 9/27/2020 18:47:19'!
SuperclassWithVariableAsTemporaryVariable subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithVariableAsTemporaryVariable stamp: 'HAW 9/27/2020 18:47:19'!
RefactoringClassTestData subclass: #SuperclassWithVariableAsTemporaryVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:19'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:19'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:19'!
newMethod! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:19'!
newMethod! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 9/27/2020 18:47:19'!
newMethod!

!testRun: #PushUpMethodTest #test01AnEmptyMethodOnClassToRefactorShouldBePushedUpToSuperclass stamp: 'HAW 9/27/2020 18:47:19'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 9/27/2020 18:47:20'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 9/27/2020 18:47:20'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:20'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:20'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:20'!
newMethod^ 1 + a! !

!testRun: #PushUpMethodTest #test02AMethodAccessesClassToRefactorInstVarCanNotBePushedUpToSuperclass stamp: 'HAW 9/27/2020 18:47:20'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 9/27/2020 18:47:21'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 9/27/2020 18:47:21'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:21'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:21'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:21'!
newMethod a = 1! !

!testRun: #PushUpMethodTest #test03AMethodWritesClassToRefactorInstVarCanNotBePushedUpToSuperclass stamp: 'HAW 9/27/2020 18:47:21'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 9/27/2020 18:47:22'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 9/27/2020 18:47:22'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:22'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:22'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:22'!
newMethod a = 1! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:22'!
newMethod a = 1! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 9/27/2020 18:47:22'!
newMethod a = 1!

!testRun: #PushUpMethodTest #test04AMethodWritesSuperClassInstVarShouldBePushedUpToSuperclass stamp: 'HAW 9/27/2020 18:47:22'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 9/27/2020 18:47:23'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 9/27/2020 18:47:23'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:23'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:23'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:23'!
newMethod^ 1 + a! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:23'!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 9/27/2020 18:47:23'!
newMethod^ 1 + a!

!testRun: #PushUpMethodTest #test05AMethodAccessesSuperClassClassToRefactorInstVarShouldBePushedUpToSuperclass stamp: 'HAW 9/27/2020 18:47:23'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 9/27/2020 18:47:23'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 9/27/2020 18:47:24'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:24'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:24'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:24'!
newMethod^ 1 + a! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:24'!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 9/27/2020 18:47:24'!
newMethod^ 1 + a!

!testRun: #PushUpMethodTest #test06AMethodAccessesSuperClassClassToRefactorInstVarShouldBePushedUpToSuperclass stamp: 'HAW 9/27/2020 18:47:24'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 9/27/2020 18:47:24'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 9/27/2020 18:47:25'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:25'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:25'!
newMethod^ 1 + a! !

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:25'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:25' overrides: 50850965!
newMethod
	^ 2 + a.! !

!testRun: #PushUpMethodTest #test07AMethodInClassToRefactorExistsInSuperClassShouldOverrideTheExistingSuperClassMethod stamp: 'HAW 9/27/2020 18:47:25'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 9/27/2020 18:47:25'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 9/27/2020 18:47:25'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:26'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test01NoVariableIsRemovedWhenClassHasNoInstanceVariable stamp: 'HAW 9/27/2020 18:47:26'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 9/27/2020 18:47:26'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:26'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:26'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test02UnreferencedVariablesAreRemoved stamp: 'HAW 9/27/2020 18:47:26'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 9/27/2020 18:47:27'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:27'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:27'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:27'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test03VariablesWithReferencesAreNotRemoved stamp: 'HAW 9/27/2020 18:47:27'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 9/27/2020 18:47:27'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithReferenceInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:28'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithReferenceInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:28'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test04VariablesWithReferencesInSubclassesAreNotRemoved stamp: 'HAW 9/27/2020 18:47:28'!
PASSED!

!classRemoval: #ClassWithReferenceInstVar stamp: 'HAW 9/27/2020 18:47:28'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassWithInstVar stamp: 'HAW 9/27/2020 18:47:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:28'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveInstanceVariableTest #test01CanNotRemoveAnInstanceVariableNotDefinedInClass stamp: 'HAW 9/27/2020 18:47:28'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 9/27/2020 18:47:29'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:29'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:29'!
m1 ^a! !

!testRun: #RemoveInstanceVariableTest #test02CanNotRemoveInstanceVariableWithReferences stamp: 'HAW 9/27/2020 18:47:29'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 9/27/2020 18:47:30'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:30'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:30'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveInstanceVariableTest #test03WhenAppliedRemovesInstanceVariable stamp: 'HAW 9/27/2020 18:47:30'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 9/27/2020 18:47:30'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterTest #test01CanNotRemoveParameterFromUnaryMessages stamp: 'HAW 9/27/2020 18:47:30'!
PASSED!

!testRun: #RemoveParameterTest #test02CanNotRemoveParameterFromBinaryMessages stamp: 'HAW 9/27/2020 18:47:31'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:31'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:31'!
m1: parameter! !

!testRun: #RemoveParameterTest #test03CanNotRemoveParameterNotInMessage stamp: 'HAW 9/27/2020 18:47:31'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:32'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:32'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:32'!
m1: parameter! !

!testRun: #RemoveParameterTest #test04AllImplementorsMustImplementSelector stamp: 'HAW 9/27/2020 18:47:32'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:32'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:32'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:32'!
m1: parameter! !

!testRun: #RemoveParameterTest #test05AllSendersShouldSendSelector stamp: 'HAW 9/27/2020 18:47:32'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:33'!
m1: parameter ^parameter! !

!testRun: #RemoveParameterTest #test06NoImplementorReferencesParameterToRemove stamp: 'HAW 9/27/2020 18:47:33'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:34'!
m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:34'!
m2:parameter2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 9/27/2020 18:47:34'!
m1:parameter1 
	m2:parameter2!

!testRun: #RemoveParameterTest #test07FirstParameterIsRemovedCorrectly stamp: 'HAW 9/27/2020 18:47:34'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:34'!
m1:parameter1 m2:parameter2
	| t1 |! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:34'!
m1:parameter1 
	| t1 |! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 9/27/2020 18:47:34'!
m1:parameter1 m2:parameter2
	| t1 |!

!testRun: #RemoveParameterTest #test08LastParameterIsRemovedCorrectly stamp: 'HAW 9/27/2020 18:47:34'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:35'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:35'!
m0: parameter0 
	m2:parameter2! !

!methodRemoval: ClassToRemoveParameter #m0:m1:m2: stamp: 'HAW 9/27/2020 18:47:35'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2!

!testRun: #RemoveParameterTest #test09MiddleParameterIsRemovedCorrectly stamp: 'HAW 9/27/2020 18:47:35'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:36'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:36'!
m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 9/27/2020 18:47:36'!
m1:parameter1!

!testRun: #RemoveParameterTest #test10ParameterFromOneKeywordSelectorIsRemovedCorrectly stamp: 'HAW 9/27/2020 18:47:36'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:36'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:36'!
sender
		self 
			m1: 1 
			m2: 2 ! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:36'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:36' prior: 50851448!
sender
		self 
			m2: 2 ! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 9/27/2020 18:47:36'!
m1:parameter1 m2:parameter2!

!testRun: #RemoveParameterTest #test11ParameterOfSendersOfMoreThanOneKeywordSelectorsIsRemovedCorrectly stamp: 'HAW 9/27/2020 18:47:36'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:37'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:37'!
sender
		self 
			m1:
			 (1+2).! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:37'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:37' prior: 50851490!
sender
		self 
			m1.! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 9/27/2020 18:47:37'!
m1:parameter1!

!testRun: #RemoveParameterTest #test12ParameterOfSendersOfOneKeywordSelectorsIsRemovedCorrectly stamp: 'HAW 9/27/2020 18:47:37'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:38'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:38'!
sender
		self m1: (1+1) m2: 2.
		self m1: 3 m2: 4.! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:38'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:38' prior: 50851530!
sender
		self m2: 2.
		self m2: 4.! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 9/27/2020 18:47:38'!
m1:parameter1 m2:parameter2!

!testRun: #RemoveParameterTest #test13ParameterIsRemovedCorrecltyFromSendersWithMoreThanOneSend stamp: 'HAW 9/27/2020 18:47:38'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:47:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterTest #test14CanNotRemoveParameterIndexLessThanOne stamp: 'HAW 9/27/2020 18:47:38'!
PASSED!

!testRun: #RemoveParameterTest #test15CanNotRemoveParameterIndexBiggerThanOldSelectorNumberOfKeywords stamp: 'HAW 9/27/2020 18:47:39'!
PASSED!

!testRun: #RemoveParameterTest #test16ParameterIndexMustBeInteger stamp: 'HAW 9/27/2020 18:47:39'!
PASSED!

!testRun: #RenameClassTest #test01NewClassNameHasToBeDifferentToOldOne stamp: 'HAW 9/27/2020 18:47:40'!
PASSED!

!testRun: #RenameClassTest #test02NewClassNameHasToBeASymbol stamp: 'HAW 9/27/2020 18:47:40'!
PASSED!

!testRun: #RenameClassTest #test03NewClassNameHasToStartWithUppercaseLetter stamp: 'HAW 9/27/2020 18:47:40'!
PASSED!

!testRun: #RenameClassTest #test04NewClassShouldNotExist stamp: 'HAW 9/27/2020 18:47:41'!
PASSED!

!testRun: #RenameClassTest #test04_01NewClassNameShouldNotBeAGlobalVariable stamp: 'HAW 9/27/2020 18:47:41'!
PASSED!

!testRun: #RenameClassTest #test05NewClassShouldNotBeUndeclare stamp: 'HAW 9/27/2020 18:47:42'!
PASSED!

!classDefinition: #OldClassTest07 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:42'!
RefactoringClassTestData subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest07 as: #NewClassTest07 stamp: 'HAW 9/27/2020 18:47:42'!
Smalltalk renameClassNamed: #OldClassTest07 as: #NewClassTest07!

!testRun: #RenameClassTest #test06OldClassIsRenamedToNewClass stamp: 'HAW 9/27/2020 18:47:42'!
PASSED!

!classRemoval: #NewClassTest07 stamp: 'HAW 9/27/2020 18:47:43'!
RefactoringClassTestData subclass: #NewClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest07 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:43'!
RefactoringClassTestData subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:43'!
m1 OldClassTest07 new! !

!classRenamed: #OldClassTest07 as: #NewClassTest07 stamp: 'HAW 9/27/2020 18:47:43'!
Smalltalk renameClassNamed: #OldClassTest07 as: #NewClassTest07!
!NewClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:43' prior: 50851623!
m1 NewClassTest07 new! !

!testRun: #RenameClassTest #test07OldClassDirectReferencesAreRenamed stamp: 'HAW 9/27/2020 18:47:43'!
PASSED!

!classRemoval: #NewClassTest07 stamp: 'HAW 9/27/2020 18:47:44'!
RefactoringClassTestData subclass: #NewClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest08 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:44'!
RefactoringClassTestData subclass: #OldClassTest08
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest08 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:44'!
m1 #OldClassTest08 size! !

!classRenamed: #OldClassTest08 as: #NewClassTest8 stamp: 'HAW 9/27/2020 18:47:44'!
Smalltalk renameClassNamed: #OldClassTest08 as: #NewClassTest8!
!NewClassTest8 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:44' prior: 50851655!
m1 #NewClassTest8 size! !

!testRun: #RenameClassTest #test08OldClassLiteralReferencesAreRenamed stamp: 'HAW 9/27/2020 18:47:44'!
PASSED!

!classRemoval: #NewClassTest8 stamp: 'HAW 9/27/2020 18:47:44'!
RefactoringClassTestData subclass: #NewClassTest8
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest09 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:44'!
RefactoringClassTestData subclass: #OldClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:44'!
m1 OldClassTest09 new. Object new! !

!classRenamed: #OldClassTest09 as: #NewClassTest09 stamp: 'HAW 9/27/2020 18:47:44'!
Smalltalk renameClassNamed: #OldClassTest09 as: #NewClassTest09!
!NewClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:45' prior: 50851687!
m1 NewClassTest09 new. Object new! !

!testRun: #RenameClassTest #test09OtherClassDirectReferencesAreNotRenamed stamp: 'HAW 9/27/2020 18:47:45'!
PASSED!

!classRemoval: #NewClassTest09 stamp: 'HAW 9/27/2020 18:47:45'!
RefactoringClassTestData subclass: #NewClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest10 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:45'!
RefactoringClassTestData subclass: #OldClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:45'!
m1 #OldClassTest10 size. #Object size! !

!classRenamed: #OldClassTest10 as: #NewClassTest10 stamp: 'HAW 9/27/2020 18:47:45'!
Smalltalk renameClassNamed: #OldClassTest10 as: #NewClassTest10!
!NewClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:45' prior: 50851719!
m1 #NewClassTest10 size. #Object size! !

!testRun: #RenameClassTest #test10OtherLiteralReferencesAreNotRenamed stamp: 'HAW 9/27/2020 18:47:45'!
PASSED!

!classRemoval: #NewClassTest10 stamp: 'HAW 9/27/2020 18:47:46'!
RefactoringClassTestData subclass: #NewClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest11 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:46'!
RefactoringClassTestData subclass: #OldClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:46'!
m1 OldClassTest11 new. #OldClassTest11 size! !

!classRenamed: #OldClassTest11 as: #NewClassTest11 stamp: 'HAW 9/27/2020 18:47:46'!
Smalltalk renameClassNamed: #OldClassTest11 as: #NewClassTest11!
!NewClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:46' prior: 50851752!
m1 NewClassTest11 new. #NewClassTest11 size! !

!testRun: #RenameClassTest #test11OldClassDirectAndLiteralReferencesAreRenameAtOnce stamp: 'HAW 9/27/2020 18:47:46'!
PASSED!

!classRemoval: #NewClassTest11 stamp: 'HAW 9/27/2020 18:47:47'!
RefactoringClassTestData subclass: #NewClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test12CanNotRenameAMetaclass stamp: 'HAW 9/27/2020 18:47:47'!
PASSED!

!testRun: #RenameClassTest #test13NewClassNameHasToBeASymbol stamp: 'HAW 9/27/2020 18:47:47'!
PASSED!

!classDefinition: #OldClassTest14 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:48'!
RefactoringClassTestData subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test14NewClassNameCanNotHaveSpaces stamp: 'HAW 9/27/2020 18:47:48'!
PASSED!

!classRemoval: #OldClassTest14 stamp: 'HAW 9/27/2020 18:47:48'!
RefactoringClassTestData subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:48'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:48'!
m1 ^OldClassTest15! !

!classDefinition: #OldClassTest15 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:48'!
RefactoringClassTestData subclass: #OldClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest15 as: #NewClassTest15 stamp: 'HAW 9/27/2020 18:47:48'!
Smalltalk renameClassNamed: #OldClassTest15 as: #NewClassTest15!

!testRun: #RenameClassTest #test15ItDoesNotRenameReferencesToClassVariableWithSameName stamp: 'HAW 9/27/2020 18:47:48'!
PASSED!

!classRemoval: #NewClassTest15 stamp: 'HAW 9/27/2020 18:47:49'!
RefactoringClassTestData subclass: #NewClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 9/27/2020 18:47:49'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldClassTest15'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:49'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:49'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:49'!
m1 ^OldClassTest16! !

!classDefinition: #OldClassTest16 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:49'!
RefactoringClassTestData subclass: #OldClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest16 as: #NewClassTest16 stamp: 'HAW 9/27/2020 18:47:49'!
Smalltalk renameClassNamed: #OldClassTest16 as: #NewClassTest16!

!testRun: #RenameClassTest #test16ItDoesNotRenameReferencesToClassVariableWithSameNameDefinedInAnySuperclass stamp: 'HAW 9/27/2020 18:47:49'!
PASSED!

!classRemoval: #NewClassTest16 stamp: 'HAW 9/27/2020 18:47:50'!
RefactoringClassTestData subclass: #NewClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 9/27/2020 18:47:50'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 9/27/2020 18:47:51'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'OldClassTest16'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:51'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:51'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:51'!
m1 ^NewClassTest17! !

!classDefinition: #OldClassTest17 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:51'!
RefactoringClassTestData subclass: #OldClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest17 as: #NewClassTest17 stamp: 'HAW 9/27/2020 18:47:51'!
Smalltalk renameClassNamed: #OldClassTest17 as: #NewClassTest17!

!testRun: #RenameClassTest #test17ItDoesNotRenameReferencesToClassVariableWithSameNameAsNewClassDefinedInAnySuperclass stamp: 'HAW 9/27/2020 18:47:51'!
PASSED!

!classRemoval: #NewClassTest17 stamp: 'HAW 9/27/2020 18:47:51'!
RefactoringClassTestData subclass: #NewClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 9/27/2020 18:47:52'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 9/27/2020 18:47:52'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'NewClassTest17'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest18 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:52'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:52'!
m1 ^OldClassTest18! !

!classRenamed: #OldClassTest18 as: #NewClassTest18 stamp: 'HAW 9/27/2020 18:47:52'!
Smalltalk renameClassNamed: #OldClassTest18 as: #NewClassTest18!
!NewClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:52' prior: 50851986!
m1 ^NewClassTest18! !

!testRun: #RenameClassTest #test18WorksCorrectlyWhenSourceCodeEndsWithClassToRename stamp: 'HAW 9/27/2020 18:47:52'!
PASSED!

!classRemoval: #NewClassTest18 stamp: 'HAW 9/27/2020 18:47:53'!
RefactoringClassTestData subclass: #NewClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest18 category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:53'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test19RenamesClassWhenMethodReferencesClassAndDoesNothing stamp: 'HAW 9/27/2020 18:47:53'!
PASSED!

!classRemoval: #OldClassTest18 stamp: 'HAW 9/27/2020 18:47:53'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test00GlobalCanNotBeClass stamp: 'HAW 9/27/2020 18:47:53'!
PASSED!

!testRun: #RenameGlobalTest #test01NewNameHasToBeDifferentToOldOne stamp: 'HAW 9/27/2020 18:47:54'!
PASSED!

!testRun: #RenameGlobalTest #test02NewNameHasToBeASymbol stamp: 'HAW 9/27/2020 18:47:54'!
PASSED!

!testRun: #RenameGlobalTest #test03NewNameShouldNotBeAClass stamp: 'HAW 9/27/2020 18:47:54'!
PASSED!

!testRun: #RenameGlobalTest #test04NewNameShouldNotBeAGlobalVariable stamp: 'HAW 9/27/2020 18:47:55'!
PASSED!

!testRun: #RenameGlobalTest #test06OldNameIsRenamedToNewName stamp: 'HAW 9/27/2020 18:47:55'!
PASSED!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:56'!
m1 ^OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:56' prior: 50852061!
m1 ^NewNameToRename__! !

!testRun: #RenameGlobalTest #test07OldDirectReferencesAreRenamed stamp: 'HAW 9/27/2020 18:47:56'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:47:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:56'!
m1 ^#OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:56' prior: 50852088!
m1 ^#NewNameToRename__! !

!testRun: #RenameGlobalTest #test08OldNameLiteralReferencesAreRenamed stamp: 'HAW 9/27/2020 18:47:56'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:47:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test09NewNameHasToBeASymbol stamp: 'HAW 9/27/2020 18:47:57'!
PASSED!

!testRun: #RenameGlobalTest #test10NewNameCanNotHaveSpaces stamp: 'HAW 9/27/2020 18:47:57'!
PASSED!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:58'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:58'!
m1 ^OldNameToRename__! !

!testRun: #RenameGlobalTest #test11ItDoesNotRenameReferencesToClassVariableWithSameName stamp: 'HAW 9/27/2020 18:47:58'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 9/27/2020 18:47:58'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldNameToRename__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:58'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:47:58'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:47:58'!
m1 ^OldNameRenamed__! !

!testRun: #RenameGlobalTest #test12ItDoesNotRenameReferencesToClassVariableWithSameNameDefinedInAnySuperclass stamp: 'HAW 9/27/2020 18:47:58'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 9/27/2020 18:47:59'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 9/27/2020 18:47:59'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'OldNameRenamed__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test13OldNameMustBeDefined stamp: 'HAW 9/27/2020 18:47:59'!
PASSED!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:00'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:00'!
m1 ^OldNameToRename__! !

!testRun: #RenameGlobalTest #test14ItDoesNotRenameReferencesToClassVariableFromClassSideWithSameName stamp: 'HAW 9/27/2020 18:48:00'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 9/27/2020 18:48:00'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldNameToRename__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test15OldNameCanNotBeEmpty stamp: 'HAW 9/27/2020 18:48:00'!
PASSED!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:01'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test01CanNotRenameAnInstanceVariableNotDefinedInClass stamp: 'HAW 9/27/2020 18:48:01'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 9/27/2020 18:48:01'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:01'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test02NewVariableNameCanNotBeEmpty stamp: 'HAW 9/27/2020 18:48:01'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:02'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:02'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test03NewVariableNameCanNotContainBlanks stamp: 'HAW 9/27/2020 18:48:02'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:03'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:03'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test04NewVariableNameCanNotContainInvalidCharacters stamp: 'HAW 9/27/2020 18:48:03'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:03'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:03'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test05ValidNewVariableNameGetBlanksTrimmed stamp: 'HAW 9/27/2020 18:48:03'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:04'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:04'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test06NewVariableNameCanNotBeDefinedInClass stamp: 'HAW 9/27/2020 18:48:04'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:05'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:05'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:05'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test07NewVariableNameCanNotBeDefinedInSuperclasses stamp: 'HAW 9/27/2020 18:48:05'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:05'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithInstVar stamp: 'HAW 9/27/2020 18:48:06'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:06'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test08NewVariableNameCanNotBeDefinedInAnySubclass stamp: 'HAW 9/27/2020 18:48:06'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 9/27/2020 18:48:06'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test09RenameCreatesNewInstanceVariableAndDeletesOldOne stamp: 'HAW 9/27/2020 18:48:07'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:07'!
m1 ^old! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:07' prior: 50852449!
m1 ^new! !

!testRun: #RenameInstanceVariableTest #test10ReadReferencesToOldVariableAreRenamed stamp: 'HAW 9/27/2020 18:48:07'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:08'!
m1 old := 10! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:08' prior: 50852486!
m1 new := 10! !

!testRun: #RenameInstanceVariableTest #test11WriteReferencesToOldVariableAreRenamed stamp: 'HAW 9/27/2020 18:48:08'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:09'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:09'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:09'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:09'!
m1 old := 10. ^old! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:09'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:09' prior: 50852532!
m1 new := 10. ^new! !

!testRun: #RenameInstanceVariableTest #test12ReferencesInSubclassesAreRenamed stamp: 'HAW 9/27/2020 18:48:09'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 9/27/2020 18:48:09'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:10'!
m1 keep := old. ^keep! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:10' prior: 50852577!
m1 keep := new. ^keep! !

!testRun: #RenameInstanceVariableTest #test13ReferencesToOtherVariablesAreNotRenamed stamp: 'HAW 9/27/2020 18:48:10'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test14NewVariableOfExistingInstancesReferToOldVariableValue stamp: 'HAW 9/27/2020 18:48:10'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:11'!
m1 | new | new := 10.! !

!testRun: #RenameInstanceVariableTest #test15FailsWhenNewVariableEqualsTemporaryVariableOfAMethodInClass stamp: 'HAW 9/27/2020 18:48:11'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:12'!
m1:new! !

!testRun: #RenameInstanceVariableTest #test16FailsWhenNewVariableEqualsArgumentOfAMethodInClass stamp: 'HAW 9/27/2020 18:48:12'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:12'!
m1 [ :new | ] value: 1! !

!testRun: #RenameInstanceVariableTest #test17FailsWhenNewVariableEqualsArgumentOfABlockInAMethodInClass stamp: 'HAW 9/27/2020 18:48:12'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:13'!
m1 [ | new | ] value! !

!testRun: #RenameInstanceVariableTest #test18FailsWhenNewVariableEqualsTemporaryOfABlockInAMethodInClass stamp: 'HAW 9/27/2020 18:48:13'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:13'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:13'!
m1 | new | ! !

!testRun: #RenameInstanceVariableTest #test19FailsWhenNewVariableIsHiddenInAnyMethodOfAnySubclass stamp: 'HAW 9/27/2020 18:48:13'!
PASSED!

!classRemoval: #SubclassOfClassToRefactor stamp: 'HAW 9/27/2020 18:48:14'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:14'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:14'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:14'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:14' overrides: 16806529!
wantsChangeSetLogging ^false! !

!testRun: #RenameInstanceVariableTest #test20ClassChangeIsAddedWhenRenamingAnInstanceVariable stamp: 'HAW 9/27/2020 18:48:14'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 9/27/2020 18:48:15'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:15'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:15'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:15'!
newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:15'!
oldXyz__!

!testRun: #RenameSelectorTest #test01MessageWithNoSendersCreatesNewMethodAndRemovesOldOne stamp: 'HAW 9/27/2020 18:48:15'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:16'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:16'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:16'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:16'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:16'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:16' prior: 50852853!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:16'!
oldXyz__!

!testRun: #RenameSelectorTest #test02SendersOfMessageAreRenamed stamp: 'HAW 9/27/2020 18:48:16'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:16'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:16'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:16'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:16'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:16' prior: 50852892!
m1__ self oldXyz__. self toKeep! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:16'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:16' prior: 50852896!
m1__ self newXyz__. self toKeep! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:16'!
oldXyz__!

!testRun: #RenameSelectorTest #test03OtherMessagesSendsAreNotRenamed stamp: 'HAW 9/27/2020 18:48:16'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:17'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorTest #test04OldSelectorCanNotBeEmpty stamp: 'HAW 9/27/2020 18:48:17'!
PASSED!

!testRun: #RenameSelectorTest #test05NewSelectorCanNotBeEmpty stamp: 'HAW 9/27/2020 18:48:17'!
PASSED!

!testRun: #RenameSelectorTest #test06CanRenameWithoutImplementors stamp: 'HAW 9/27/2020 18:48:18'!
PASSED!

!testRun: #RenameSelectorTest #test07AllImplementorsMustImplementOldSelector stamp: 'HAW 9/27/2020 18:48:18'!
PASSED!

!testRun: #RenameSelectorTest #test08AllSendersShouldSendOldSelector stamp: 'HAW 9/27/2020 18:48:18'!
PASSED!

!testRun: #RenameSelectorTest #test09NewSelectorMustBeOfSameTypeAsOldSelector stamp: 'HAW 9/27/2020 18:48:19'!
PASSED!

!testRun: #RenameSelectorTest #test10NewSelectorMustHaveSameNumberOfArgumentsAsOldSelector stamp: 'HAW 9/27/2020 18:48:19'!
PASSED!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:20'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:20'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'oldSelectorCategory' stamp: 'HAW 9/27/2020 18:48:20'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:20' prior: 50852960!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:20'!
oldXyz__!

!testRun: #RenameSelectorTest #test11NewImplementorsKeepMethodCategory stamp: 'HAW 9/27/2020 18:48:20'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:20'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:20'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:20' prior: 50852995!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:20'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:20' prior: 50853007!
newXyz__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:20'!
oldXyz__ self oldXyz__!

!testRun: #RenameSelectorTest #test12RenamesRecursiveMethodsWhenNotInSenders stamp: 'HAW 9/27/2020 18:48:20'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:21'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:21'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:21'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:21'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:21' prior: 50853040!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:21'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:21' prior: 50853048!
oldXyz__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:21' prior: 50853052!
newXyz__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:21'!
oldXyz__ self newXyz__!

!testRun: #RenameSelectorTest #test13RenamesRecursiveMethodsWhenInSenders stamp: 'HAW 9/27/2020 18:48:21'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:22'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:22'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22' prior: 50853089!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
m1 #oldXyz__ size! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22' prior: 50853101!
m1 #newXyz__ size! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:22'!
oldXyz__!

!testRun: #RenameSelectorTest #test14RenamesSymbolsEqualToOldSelector stamp: 'HAW 9/27/2020 18:48:22'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:22'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:22'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:22'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22' prior: 50853140!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:22' prior: 50853148!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:22'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:22'!
oldXyz__!

!testRun: #RenameSelectorTest #test15ScopeToRenameCanBeClassOnly stamp: 'HAW 9/27/2020 18:48:22'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:23'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 9/27/2020 18:48:23'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:23'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:23'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853216!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853220!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853224!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853228!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:23'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853241!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853245!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853250!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853254!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:23'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853299!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853303!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853307!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' overrides: 50853311!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' prior: 50853220!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' prior: 50853228!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' prior: 50853245 overrides: 50853324!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' prior: 50853254 overrides: 50853329!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' prior: 50853272 overrides: 50853334!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:23' prior: 50853282 overrides: 50853339!
m1__ self newXyz__! !

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:23'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:23'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:23'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:23'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:23'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:23'!
oldXyz__!

!testRun: #RenameSelectorTest #test16ScopeToRenameCanBeHierarchyOnly stamp: 'HAW 9/27/2020 18:48:23'!
PASSED!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 9/27/2020 18:48:24'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:24'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 9/27/2020 18:48:25'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 9/27/2020 18:48:25'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:25'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__-toAvoid' stamp: 'HAW 9/27/2020 18:48:25'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25' prior: 50853444!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25' prior: 50853452!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25' prior: 50853419!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:25' prior: 50853427!
m1__ self newXyz__! !

!methodRemoval: AnotherclassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:25'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:25'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:25'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:25'!
oldXyz__!

!testRun: #RenameSelectorTest #test17ScopeToRenameCanBeCategoryOnly stamp: 'HAW 9/27/2020 18:48:25'!
PASSED!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 9/27/2020 18:48:26'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnotherclassToRenameSelector stamp: 'HAW 9/27/2020 18:48:26'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__-Another' stamp: 'HAW 9/27/2020 18:48:26'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:26'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' overrides: 50853553!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' overrides: 50853557!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' overrides: 50853561!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' overrides: 50853565!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:26'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' overrides: 50853578!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' overrides: 50853582!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' overrides: 50853587!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' overrides: 50853591!
m1__ self oldXyz__! !

!classDefinition: #AnotheclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:26'!
RefactoringClassTestData subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
m1__ self oldXyz__! !

!classDefinition: #OtherCatClassToRenameSelector category: '__Refactoring-TestData__-Another' stamp: 'HAW 9/27/2020 18:48:26'!
RefactoringClassTestData subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
m1__ self oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__-toAvoid' stamp: 'HAW 9/27/2020 18:48:26'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' overrides: 50853688!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' overrides: 50853692!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
newXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26'!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' prior: 50853636!
m1__ self newXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' prior: 50853644!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' prior: 50853582 overrides: 50853557!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' prior: 50853591 overrides: 50853565!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' prior: 50853609 overrides: 50853739!
m1__ self newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' prior: 50853557!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' prior: 50853565!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' prior: 50853619 overrides: 50853744!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' prior: 50853670!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:26' prior: 50853662!
m1__ self newXyz__! !

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__!

!methodRemoval: AnotheclassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__!

!methodRemoval: OtherCatClassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__!

!methodRemoval: AnotheclassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__!

!methodRemoval: OtherCatClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:26'!
oldXyz__!

!testRun: #RenameSelectorTest #test18ScopeToRenameCanBeCategoriesAndHierarchyOnly stamp: 'HAW 9/27/2020 18:48:26'!
PASSED!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 9/27/2020 18:48:27'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!

!classRemoval: #AnotheclassToRenameSelector stamp: 'HAW 9/27/2020 18:48:27'!
RefactoringClassTestData subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 9/27/2020 18:48:28'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:28'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 9/27/2020 18:48:28'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!

!classRemoval: #OtherCatClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:28'!
RefactoringClassTestData subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:28'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:28'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:28'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:28'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:28'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:28'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:28'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:28'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:28'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:28'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:29'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:29'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:29'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:29'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:29' prior: 50853874!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:29' prior: 50853882!
m1__ self newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:29' prior: 50853899!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:29' prior: 50853907!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:29'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:29'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:29'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:29'!
oldXyz__!

!testRun: #RenameSelectorTest #test19ScopeToRenameCanBeTheCompleteSystem stamp: 'HAW 9/27/2020 18:48:29'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:29'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnotherclassToRenameSelector stamp: 'HAW 9/27/2020 18:48:29'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorTest #test20CanNotRenameToItSelf stamp: 'HAW 9/27/2020 18:48:29'!
PASSED!

!testRun: #RenameSelectorTest #test21NewSelectorCanNotBeImplementedOnAnyClassImplementingOldSelector stamp: 'HAW 9/27/2020 18:48:30'!
PASSED!

!testRun: #RenameSelectorTest #test22WarnsWhenOverridesSuperclassImplementation stamp: 'HAW 9/27/2020 18:48:30'!
PASSED!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:31'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31' prior: 50853998!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31'!
m1 ^#(#oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31' prior: 50854010!
m1 ^#(#newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:31'!
oldXyz__!

!testRun: #RenameSelectorTest #test23OldSelectorIsRenamedWhenDefinedInLiteralArray stamp: 'HAW 9/27/2020 18:48:31'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:31'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:31'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31' prior: 50854045!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31'!
m1 ^#(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:31' prior: 50854057!
m1 ^#(#newXyz__ #newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:31'!
oldXyz__!

!testRun: #RenameSelectorTest #test24OldSelectorIsRenamedWhenDefinedInLiteralArrayMoreThanOnce stamp: 'HAW 9/27/2020 18:48:31'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:32'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:32'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:32'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:32'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:32' prior: 50854093!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:32'!
m1 ^#(#oldXyz__ #oldXyz__), #(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:32'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:32' prior: 50854105!
m1 ^#(#newXyz__ #newXyz__), #(#newXyz__ #newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:32'!
oldXyz__!

!testRun: #RenameSelectorTest #test25OldSelectorIsRenamedWhenDefinedInMoreThanOneLiteralArrayMoreThanOnce stamp: 'HAW 9/27/2020 18:48:32'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:33'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:33'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33' prior: 50854143!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33'!
m1 ^#(#oldXyz__ #oldXyz__1)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33' prior: 50854155!
m1 ^#(#newXyz__ #oldXyz__1)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:33'!
oldXyz__!

!testRun: #RenameSelectorTest #test26DoesNotRenameLiteralsThatBeginsWithOldSelectorInsideLiteralArray stamp: 'HAW 9/27/2020 18:48:33'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:33'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:33'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33' prior: 50854191!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33'!
m1 ^#(#oldXyz__ #oldXyz__:)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:33' prior: 50854203!
m1 ^#(#newXyz__ #oldXyz__:)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:33'!
oldXyz__!

!testRun: #RenameSelectorTest #test27DoesNotRenameLiteralsThatBeginsWithOldSelectorAndEndWithColonInsideLiteralArray stamp: 'HAW 9/27/2020 18:48:33'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:34'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:34'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:34'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:34'!
m1 ^self && 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:34'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:34' prior: 50854243!
m1 ^self abc: 1! !

!methodRemoval: ClassToRenameSelector #&& stamp: 'HAW 9/27/2020 18:48:34'!
&& aParameter!

!testRun: #RenameSelectorTest #test28CanRenameFromBinaryToKeywordOfOneParameter stamp: 'HAW 9/27/2020 18:48:34'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:35'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:35'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:35'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:35'!
m1 ^self abc: 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:35'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:35' prior: 50854282!
m1 ^self && 1! !

!methodRemoval: ClassToRenameSelector #abc: stamp: 'HAW 9/27/2020 18:48:35'!
abc: aParameter!

!testRun: #RenameSelectorTest #test29CanRenameFromKeywordOfOneParameterToBinary stamp: 'HAW 9/27/2020 18:48:35'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:35'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:35'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:35'!
&& aParameter! !

!testRun: #RenameSelectorTest #test30CanNotRenameFromBinaryToKeywordOfMoreThanOneParameter stamp: 'HAW 9/27/2020 18:48:35'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:36'!
abc: p1 def: p2! !

!testRun: #RenameSelectorTest #test31CanNotRenameFromKeywordOfOneParameterToBinary stamp: 'HAW 9/27/2020 18:48:36'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:37'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:37'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854366!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854370!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854374!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854378!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:37'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854366!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854370!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854374!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854378!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854436!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854440!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854436!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' overrides: 50854440!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' prior: 50854370!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' prior: 50854378!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' prior: 50854395 overrides: 50854461!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' prior: 50854404 overrides: 50854466!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' prior: 50854422 overrides: 50854461!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:37' prior: 50854432 overrides: 50854466!
m1__ self newXyz__! !

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:37'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:37'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:37'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:37'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:37'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:37'!
oldXyz__!

!testRun: #RenameSelectorTest #test32HierarchyScopeRenamesSelectorsFromSuperclassDefiningSelector stamp: 'HAW 9/27/2020 18:48:37'!
PASSED!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 9/27/2020 18:48:37'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:38'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 9/27/2020 18:48:38'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:38'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:38'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
oldXyz__! !
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
m1__ self oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
m1__ self oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38' overrides: 16782761!
compilerClass ^nil! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38'!
newXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38' prior: 50854582!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38' prior: 50854549!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:38' prior: 50854557!
m1__ self newXyz__! !

!methodRemoval: ClassToAvoidRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:38'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 9/27/2020 18:48:38'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 9/27/2020 18:48:38'!
oldXyz__!

!testRun: #RenameSelectorTest #test33DoNotRenameSendersAndImplementorsWhoseCompilerClassIsDifferentToCompiler stamp: 'HAW 9/27/2020 18:48:38'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:48:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 9/27/2020 18:48:39'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test01VariableToRenameHasToBeDefined stamp: 'HAW 9/27/2020 18:48:39'!
PASSED!

!testRun: #RenameTemporaryTest #test02NewVariableNameCanNotBeEmpty stamp: 'HAW 9/27/2020 18:48:40'!
PASSED!

!testRun: #RenameTemporaryTest #test03NewVariableHasToBeValid stamp: 'HAW 9/27/2020 18:48:40'!
PASSED!

!testRun: #RenameTemporaryTest #test04NewVariableNameCanNotBeDefinedInMethod stamp: 'HAW 9/27/2020 18:48:40'!
PASSED!

!classDefinition: #ClassToRenameTemp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:41'!
RefactoringClassTestData subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test05FailsIfNewTemporaryIsEqualToInstanceVariableInClass stamp: 'HAW 9/27/2020 18:48:41'!
PASSED!

!classRemoval: #ClassToRenameTemp stamp: 'HAW 9/27/2020 18:48:41'!
RefactoringClassTestData subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:41'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameTemp category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:41'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test06FailsIfNewTemporaryIsEqualToInstanceVariableInAnySuperclass stamp: 'HAW 9/27/2020 18:48:41'!
PASSED!

!classRemoval: #ClassToRenameTemp stamp: 'HAW 9/27/2020 18:48:42'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRefactorSuperclass stamp: 'HAW 9/27/2020 18:48:42'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test07RenameCreatesNewTemporaryVariableAndDeletesOldOne stamp: 'HAW 9/27/2020 18:48:42'!
PASSED!

!testRun: #RenameTemporaryTest #test08RenameChangesReferencesFromOldVariableToNewVariable stamp: 'HAW 9/27/2020 18:48:43'!
PASSED!

!testRun: #RenameTemporaryTest #test09RenamesArguments stamp: 'HAW 9/27/2020 18:48:43'!
PASSED!

!testRun: #RenameTemporaryTest #test10NewVariableNameCanNotBeDefinedAsBlockArgument stamp: 'HAW 9/27/2020 18:48:43'!
PASSED!

!testRun: #RenameTemporaryTest #test11RenamesBlockArguments stamp: 'HAW 9/27/2020 18:48:44'!
PASSED!

!testRun: #RenameTemporaryTest #test12RenamesBlockTemporaries stamp: 'HAW 9/27/2020 18:48:44'!
PASSED!

!testRun: #RenameTemporaryTest #test13OldNodeMustBePartOfMethodNode stamp: 'HAW 9/27/2020 18:48:45'!
PASSED!

!testRun: #RenameTemporaryTest #test14OldVariableNodeMustBeArgOrTempNode stamp: 'HAW 9/27/2020 18:48:45'!
PASSED!

!testRun: #RenameTemporaryTest #test15RenameVariablesWithSameNameInDifferentBlocksCorrectly stamp: 'HAW 9/27/2020 18:48:45'!
PASSED!

!testRun: #RenameTemporaryTest #test16CantRenameVariableToANameAlreadyUsedInAnUpperBlock stamp: 'HAW 9/27/2020 18:48:46'!
PASSED!

!testRun: #RenameTemporaryTest #test17RenamesOneCharVariableAfterAReturnWithoutCharsAfterThatCorrectly stamp: 'HAW 9/27/2020 18:48:46'!
PASSED!

!testRun: #RenameTemporaryTest #test18CantRenameVariableToAReservedName stamp: 'HAW 9/27/2020 18:48:47'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:47'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 9/27/2020 18:48:47'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test02ClassesWithNoReferencesAndNoSubclassesAreSafetelyRemoved stamp: 'HAW 9/27/2020 18:48:47'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:48'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 9/27/2020 18:48:48'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test03RemovingTheMetaclassRemovesTheClass stamp: 'HAW 9/27/2020 18:48:48'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:48'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:48'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:48'!
m1 ^ClassToRemove! !

!testRun: #SafelyRemoveClassTest #test04CanNotRemoveClassWithReferencesOutsideHierarchy stamp: 'HAW 9/27/2020 18:48:48'!
PASSED!

!classRemoval: #ClassToRemove stamp: 'HAW 9/27/2020 18:48:49'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemove stamp: 'HAW 9/27/2020 18:48:49'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:49'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:49'!
m1 ^ClassToRemove! !

!classRemoval: #ClassToRemove stamp: 'HAW 9/27/2020 18:48:50'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test05CanRemoveClassWithReferencesFromItself stamp: 'HAW 9/27/2020 18:48:50'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:50'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:50'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test06WarnIfClassToRemoveHasSubclasses stamp: 'HAW 9/27/2020 18:48:50'!
PASSED!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 9/27/2020 18:48:51'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 9/27/2020 18:48:51'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:51'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:51'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:51'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:51'!
m1 ^ClassToRemoveSubclass! !

!testRun: #SafelyRemoveClassTest #test07CanNotRemoveClassWhenSubclassesHaveReferencesOutsideTheHierarchy stamp: 'HAW 9/27/2020 18:48:51'!
PASSED!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 9/27/2020 18:48:52'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 9/27/2020 18:48:52'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemoveSubclass stamp: 'HAW 9/27/2020 18:48:52'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:52'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:52'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 9/27/2020 18:48:53'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 9/27/2020 18:48:53'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test08HierarchyIsRemovedIfSubclassesWarningIsResumed stamp: 'HAW 9/27/2020 18:48:53'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:54'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:54'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:54'!
m1 ^ClassToRemoveSubclass! !
!ClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:54'!
m2 ^ClassToRemove! !

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 9/27/2020 18:48:54'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 9/27/2020 18:48:54'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test09CanRemoveIfReferencesToSubclassesAreInTheHierarchy stamp: 'HAW 9/27/2020 18:48:54'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:55'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:55'!
m1 ^#ClassToRemove! !

!testRun: #SafelyRemoveClassTest #test10WarnWhenHasReferencesToName stamp: 'HAW 9/27/2020 18:48:55'!
PASSED!

!classRemoval: #ClassToRemove stamp: 'HAW 9/27/2020 18:48:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemove stamp: 'HAW 9/27/2020 18:48:56'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:56'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:56'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:56' prior: 50855085!
m1 ! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:56'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test01ApplyChangesTemporaryVariableToInstanceVariable stamp: 'HAW 9/27/2020 18:48:56'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:48:56'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:56'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:56'!
m1| a |a := 2.
	^a! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:56' prior: 50855122!
m1 a := 2.
	^a! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:56'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test02ApplyDoesntChangeRestOfSourceCode stamp: 'HAW 9/27/2020 18:48:56'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:48:57'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:57'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:57'!
m1! !

!testRun: #TemporaryToInstanceVariableTest #test03TemporaryToChangeShouldExist stamp: 'HAW 9/27/2020 18:48:57'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:48:58'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:58'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:58'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:58'!
m2| a |! !

!testRun: #TemporaryToInstanceVariableTest #test04TemporaryShouldNotExistInOtherClassMethod stamp: 'HAW 9/27/2020 18:48:58'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:48:58'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:58'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:58'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:58'!
m1| a |! !

!testRun: #TemporaryToInstanceVariableTest #test05InstanceVariableShouldNotExistInSubclass stamp: 'HAW 9/27/2020 18:48:58'!
PASSED!

!classRemoval: #SubclassToRefactor stamp: 'HAW 9/27/2020 18:48:59'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:48:59'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:59'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:48:59'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:59'!
m1| a |! !
!SubclassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:48:59'!
m2| a |! !

!testRun: #TemporaryToInstanceVariableTest #test06TemporaryShouldNotExistInSubclassMethod stamp: 'HAW 9/27/2020 18:48:59'!
PASSED!

!classRemoval: #SubclassToRefactor stamp: 'HAW 9/27/2020 18:49:00'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:49:00'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:00'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:00'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:00' prior: 50855295!
m1 ! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:00'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test07RemovesPipesWhenRemovingLastTemporaryInMethod stamp: 'HAW 9/27/2020 18:49:00'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:49:01'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:01'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:01'!
m1| a b |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:01' prior: 50855332!
m1|  b |! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:01'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test08DoesntRemoveOtherVariables stamp: 'HAW 9/27/2020 18:49:01'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:49:01'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:02'!
m1
	[ | a | ].
	[ | a | ].! !

!testRun: #TemporaryToInstanceVariableTest #test09TemporaryShouldNotExistInOtherBlockInSameMethod stamp: 'HAW 9/27/2020 18:49:02'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:49:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:02'!
m1
	[ | a | ].! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:02' prior: 50855394!
m1
	[   ].! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test10RemovesPipesWhenRemovingLastTemporaryInBlock stamp: 'HAW 9/27/2020 18:49:02'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:49:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:03'!
m1 [ | a | ]. [ :a | ].! !

!testRun: #TemporaryToInstanceVariableTest #test11TemporaryShouldNotExistAsArgumentInOtherBlocksInSameMethod stamp: 'HAW 9/27/2020 18:49:03'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:49:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:04'!
m1: a! !

!testRun: #TemporaryToInstanceVariableTest #test12CantExtractArgument stamp: 'HAW 9/27/2020 18:49:04'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 9/27/2020 18:49:04'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:04'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:04'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:04'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test01MethodObjectClassNameMustNotBeEmpty stamp: 'HAW 9/27/2020 18:49:04'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:05'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:05'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:05'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:05'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:05'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test02MethodObjectClassNameMustBeASymbol stamp: 'HAW 9/27/2020 18:49:05'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:06'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:06'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:06'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:06'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:06'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test03MethodObjectClassNameMustStartWithUppercaseLetter stamp: 'HAW 9/27/2020 18:49:06'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:07'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:07'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:07'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test04MethodObjectClassNameMustNotHaveSeparators stamp: 'HAW 9/27/2020 18:49:07'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:08'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:08'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:08'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test05MethodObjectClassNameMustNotExist stamp: 'HAW 9/27/2020 18:49:08'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:09'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:09'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:09'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:09'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test06AllVariablesToParametrizeMustHaveACorrespondingMethodObjectInstanceVariableName stamp: 'HAW 9/27/2020 18:49:09'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:09'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:10'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:10'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:10'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:10'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test07AllInstanceVariableNamesMustCorrespondToVariableToParametrize stamp: 'HAW 9/27/2020 18:49:10'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:10'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:11'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test08MethodObjectInstanceVariableNamesMustNotBeEmpty stamp: 'HAW 9/27/2020 18:49:11'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:11'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test09MethodObjectInstanceVariableNamesCanNotContainBlanks stamp: 'HAW 9/27/2020 18:49:12'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:12'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test10MethodObjectInstanceVariableNamesCanNotContainInvalidCharacters stamp: 'HAW 9/27/2020 18:49:12'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: 'anInstVarName'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:13'!
m1
		self isNil.! !

!testRun: #ExtractToMethodObjectTest #test11MethodObjectInstanceVariableNamesCanNotBeDefinedInSuperclasses stamp: 'HAW 9/27/2020 18:49:13'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: 'anInstVarName'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:14'!
m1
		self isNil.
		anInstVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test12MethodObjectInstanceVariableNamesCanNotBeDuplicated stamp: 'HAW 9/27/2020 18:49:14'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:49:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:15'!
m1
		| aTemporal |

		aTemporal := 1.
		self isNil.

		^aTemporal + 2! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test13MethodObjectInstanceVariableNamesCanNotBeNamedAsMethodTemporal stamp: 'HAW 9/27/2020 18:49:15'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:49:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:16'!
m1
		^[
			| aBlockTemporal |

			self isNil.
			aBlockTemporal.]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test14MethodObjectInstanceVariableNamesCanNotBeNamedAsBlockTemporal stamp: 'HAW 9/27/2020 18:49:16'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:49:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:17'!
m1
		^[:aBlockArgument |
			self isNil.
			aBlockArgument.]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test15MethodObjectInstanceVariableNamesCanNotBeNamedAsBlockArgument stamp: 'HAW 9/27/2020 18:49:17'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:49:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:18'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test16MethodObjectInstanceCreationMessageMustHaveAKeywordForEveryVariableToParametrize stamp: 'HAW 9/27/2020 18:49:18'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:19'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:19'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:19'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test17MethodObjectInstanceCreationMessageMustHaveOnlyOneKeywordForEveryVariableToParametrize stamp: 'HAW 9/27/2020 18:49:19'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:20'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test18MethodObjectInstanceCreationMessageMustNotHaveKeywordForAnUnknownVariableToParametrize stamp: 'HAW 9/27/2020 18:49:20'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:21'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test19MethodObjectInstanceCreationMessageKeywordsCanNotHaveInvalidCharacters stamp: 'HAW 9/27/2020 18:49:21'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:22'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:22'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:22'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test20MethodObjectInstanceCreationMessageSelectorStartsWithAnInvalidStartOfSelector stamp: 'HAW 9/27/2020 18:49:22'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:23'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test21MethodObjectInstanceCreationMessageKeywordsCannotBeEmpty stamp: 'HAW 9/27/2020 18:49:23'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:24'!
m1! !

!testRun: #ExtractToMethodObjectTest #test22MethodObjectSuperclassCannotBeMeta stamp: 'HAW 9/27/2020 18:49:24'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:25'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:25'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:25'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:25'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:25' prior: 50856347!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test23CreatesMethodObjectClass stamp: 'HAW 9/27/2020 18:49:25'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:25'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:26'!
m1! !

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:26'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:26'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:26' prior: 50856417!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test24CreatesMethodObjectClassAsSubclassOfTheChosenSuperclass stamp: 'HAW 9/27/2020 18:49:26'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:27'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:27'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:27'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:27'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:27'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:27'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:27' prior: 50856470!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test25CreatesMethodObjectClassInTheChosenCategory stamp: 'HAW 9/27/2020 18:49:27'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:28'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:28'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:28'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:28'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:28'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:28'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:28'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:28'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:28' prior: 50856532!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test26MethodObjectClassInstanceCreationMessageReceivesTheSameNumberOfArgumentsAsVariablesToParametrizeInMethodToExtract stamp: 'HAW 9/27/2020 18:49:28'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:29'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:29'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:30'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:30'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:30'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:30'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:30'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:30'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:30' prior: 50856608!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test27MethodObjectClassInstanceCreationMessageSelectorConsistsOfTheChosenKeywords stamp: 'HAW 9/27/2020 18:49:30'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:30'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:31'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:31'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:31'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:31'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:31'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:31'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:31'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:31' prior: 50856683!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test28MethodObjectClassInstanceCreationMessageCreatesARefactoringInstance stamp: 'HAW 9/27/2020 18:49:31'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:32'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:32'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:32'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:32'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:32'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:32'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:32'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:32'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:32' prior: 50856758!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test29MethodObjectInitializationMessageReceivesTheSameNumberOfArgumentsAsVariablesToParametrizeInMethodToExtract stamp: 'HAW 9/27/2020 18:49:32'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:33'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:33'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:33'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:33'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:33'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:33'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:33'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:33'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:33' prior: 50856834!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test30MethodObjectInitializationMessageSelectorConsistsOfTheChosenKeywordsPrefixedWithInitializationPrefix stamp: 'HAW 9/27/2020 18:49:33'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:34'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:34'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:35'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:35'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:35'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:35'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:35'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:35'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:35' prior: 50856910!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test31MethodObjectInitializationMessageAssignsTheInstanceVariables stamp: 'HAW 9/27/2020 18:49:35'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:35'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:35'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:36'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:36'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:36'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:36'!
aCustomEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:36' prior: 50856985!
m1
	(MethodObject new) aCustomEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test32MethodObjectEvaluationMessageHasTheChosenSelector stamp: 'HAW 9/27/2020 18:49:36'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:36'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:37'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:37'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:37'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:37'!
m1
	self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:37'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:37'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:37'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:37'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:37'!
defaultEvaluationSelector
	thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:37' prior: 50857047!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test33MethodObjectEvaluationMethodSourceCodeHasTheSameFormatAsTheExtractedMethod stamp: 'HAW 9/27/2020 18:49:37'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:38'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:38'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:38'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:38'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:38'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:38'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:38'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:38'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:38'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:38'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:38' prior: 50857122!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test34MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfSelf stamp: 'HAW 9/27/2020 18:49:38'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:39'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:39'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:39'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:39'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:39'!
m1
		anInstVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:39'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:39'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:39'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:39'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:39'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:39' prior: 50857198!
m1
	(MethodObject with: anInstVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test35MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorInstanceVariable stamp: 'HAW 9/27/2020 18:49:39'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:40'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:40'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:41'!
m1: anArg
		anArg isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:41'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:41'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgReplacement'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:41'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:41'!
initializeWith: aParamName
	anArgReplacement := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:41'!
defaultEvaluationSelector
		anArgReplacement isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:41' prior: 50857276!
m1: anArg
	(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test36MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfExtractedMethodArgument stamp: 'HAW 9/27/2020 18:49:41'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:41'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgReplacement'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:42'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:42'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #APool category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:42'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:42'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:42'!
m1
		APoolVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:42'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:42'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:42'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:42'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:42'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:42' prior: 50857361!
m1
	(MethodObject with: APoolVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test37MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorPoolVariable stamp: 'HAW 9/27/2020 18:49:42'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:43'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:43'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:43'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #APool stamp: 'HAW 9/27/2020 18:49:43'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:43'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:43'!
m1
		"A comment talking about self"
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:43'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:43'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:43'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:43'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:43'!
defaultEvaluationSelector
		"A comment talking about self"
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:43' prior: 50857445!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test38MethodObjectEvaluationMethodSourceCodeCommentsReferencingParametrizedVariableAreNotReplaced stamp: 'HAW 9/27/2020 18:49:43'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:44'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:44'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:45'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:45'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test39MethodObjectEvaluationMethodSourceCodePreservesBlockArgumentsShadowing stamp: 'HAW 9/27/2020 18:49:45'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:45'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:45'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test40MethodObjectEvaluationMethodSourceCodePreservesBlockTemporalsShadowing stamp: 'HAW 9/27/2020 18:49:45'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:46'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:46'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:46'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:46'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:46'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:46'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:46' prior: 50857563!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test41RefactoredMethodUnarySelectorIsPreserved stamp: 'HAW 9/27/2020 18:49:46'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:47'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:47'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:47'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:47'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:47'!
!!@ anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:47'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:47'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:47'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:47'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:47'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:47' prior: 50857624!
!!@ anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test42RefactoredMethodBinarySelectorIsPreserved stamp: 'HAW 9/27/2020 18:49:47'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:48'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:48'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:48'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:48'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:48'!
m1: anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:48'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:48'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:48'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:48'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:48'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:48' prior: 50857700!
m1: anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test43RefactoredMethodKeywordSelectorIsPreserved stamp: 'HAW 9/27/2020 18:49:48'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:49'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:49'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:50'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:50'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:50'!
!!@ anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:50'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:50'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:50'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:50'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:50'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:50' prior: 50857776!
!!@ anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test44WhenBinaryMethodIsRefactoredArgumentNameIsPreserved stamp: 'HAW 9/27/2020 18:49:50'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:50'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:51'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:51'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:51'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:51'!
m1: anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:51'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:51'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:51'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:51'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:51'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:51' prior: 50857852!
m1: anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test45WhenKeywordsMethodIsRefactoredArgumentNamesArePreserved stamp: 'HAW 9/27/2020 18:49:51'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:52'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:52'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:52'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:52'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:52'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:52'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:52' prior: 50857928!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test46WhenThereAreNoVariablesToParametrizeTheRefactoredMethodUsesTheNewMessageToCreateTheMethodObjectInstance stamp: 'HAW 9/27/2020 18:49:52'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:53'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:53'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:53'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:53'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:53'!
m1 ^self isNil! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:53'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:53'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:53'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:53'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:53'!
defaultEvaluationSelector ^correspondingInstVar isNil! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:53' prior: 50857991!
m1
	^(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test47WhenThereAreVariablesToParametrizeTheRefactoredMethodUsesTheChosenMessageToCreateTheMethodObjectInstance stamp: 'HAW 9/27/2020 18:49:53'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:54'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:54'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:55'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:55'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:55'!
m1: anArg ^(self isNil) or: (anArg isNil)! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:55'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:55'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgCorrespondingInstVar selfCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:55'!
with: anArgParamName andWith: aSelfParamName
	^self new initializeWith: anArgParamName andWith: aSelfParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:55'!
initializeWith: anArgParamName andWith: aSelfParamName
	anArgCorrespondingInstVar := anArgParamName.
	selfCorrespondingInstVar := aSelfParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:55'!
defaultEvaluationSelector ^(selfCorrespondingInstVar isNil) or: (anArgCorrespondingInstVar isNil)! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:55' prior: 50858067!
m1: anArg
	^(MethodObject with: anArg andWith: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test48WhenThereAreMultipleVariablesToParametrizeTheRefactoredMethodPassesTheVariablesInTheChosenOrderToTheMessageToCreateTheMethodObjectInstance stamp: 'HAW 9/27/2020 18:49:55'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:55'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgCorrespondingInstVar selfCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:56'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:56'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:56'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:56'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:56'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:56'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:56'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:56' prior: 50858154!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test49TheRefactoredMethodUsesTheChosenEvaluationSelectorToEvaluateTheMethodObjectInstance stamp: 'HAW 9/27/2020 18:49:56'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:57'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:57'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:57'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:57'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:57'!
m1
		| a |

		a := 1 + 1.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:57'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:57'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:57'!
defaultEvaluationSelector
		| a |

		a := 1 + 1.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:57' prior: 50858217!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test50TheRefactoredMethodPreservesTheImplicitReturn stamp: 'HAW 9/27/2020 18:49:57'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:49:58'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:58'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:58'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:58'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:58'!
m1 ^super isNil! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:58'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test51TheMethodToExtractMustNotReferenceSuper stamp: 'HAW 9/27/2020 18:49:58'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:49:59'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:49:59'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:59'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:49:59'!
m1
		anInstVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:49:59'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test52TheMethodToExtractMustNotContainInstVarAssignments stamp: 'HAW 9/27/2020 18:49:59'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:00'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:00'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:00'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:00'!
m1
		AClassVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:00'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test53TheMethodToExtractMustNotContainClassVarAssignments stamp: 'HAW 9/27/2020 18:50:00'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:01'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:01'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #APool category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:01'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:01'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:01'!
m1
		APoolVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:01'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test54TheMethodToExtractMustNotContainPoolVarAssignments stamp: 'HAW 9/27/2020 18:50:01'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:02'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:02'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #APool stamp: 'HAW 9/27/2020 18:50:02'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:02'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:02'!
m1
		AClassVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:03'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:03'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:03'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:03'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:03'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:03' prior: 50858450!
m1
	(MethodObject with: AClassVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test55MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorClassVariable stamp: 'HAW 9/27/2020 18:50:03'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:03'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:50:03'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:04'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:04'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:04'!
m1 self = anInstVar ifTrue: [^1] ifFalse: [^2]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:04'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test56MethodObjectInstanceCreationMessageParameterNamesMustNotRepeat stamp: 'HAW 9/27/2020 18:50:04'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:04'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:05'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:05'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:05'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:05'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test57MethodObjectInstanceCreationMessageParameterNamesMustNotBeEmpty stamp: 'HAW 9/27/2020 18:50:05'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:05'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:06'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:06'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:06'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:06'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test58MethodObjectInstanceCreationMessageParameterNamesMustNotContainSeparators stamp: 'HAW 9/27/2020 18:50:06'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:06'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:07'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:07'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:07'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test59MethodObjectInstanceCreationMessageParameterNamesMustNotContainInvalidCharacters stamp: 'HAW 9/27/2020 18:50:07'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:07'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:07'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:07'!
m1 self = anInstVar ifTrue: [^1] ifFalse: [^2]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test60MethodObjectInstanceCreationMessageParameterNamesMustNotBeEqualToAMethodObjectInstanceVariable stamp: 'HAW 9/27/2020 18:50:08'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:08'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:08'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:08'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:08'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:08'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:08'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:08'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:08' prior: 50858727!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test61MethodObjectClassInstanceCreationMessageParameterNamesAreTheChosenOnes stamp: 'HAW 9/27/2020 18:50:08'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:50:09'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:09'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:10'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:10'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:10'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:10'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:10'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:10'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:10'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:10'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:10' prior: 50858802!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test62MethodObjectInstanceCreationMessageParameterNamesAreTheChosenOnes stamp: 'HAW 9/27/2020 18:50:10'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:50:10'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:11'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:11'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:11'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:11'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:11'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:11' prior: 50858877!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test63MethodObjectInstanceInitializationMessageIsCategorizedAsInitialization stamp: 'HAW 9/27/2020 18:50:11'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:50:12'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:12'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:12'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:12'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:12'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:12'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:12' prior: 50858952!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test64MethodObjectInstanceCreationMessageIsCategorizedAsInstanceCreation stamp: 'HAW 9/27/2020 18:50:12'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:50:13'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:13'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:13'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:13'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:13'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:13'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:13' prior: 50859027!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test65MethodObjectEvaluationMessageIsCategorizedAsEvaluating stamp: 'HAW 9/27/2020 18:50:13'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 9/27/2020 18:50:14'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:15'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test66MethodObjectEvaluationSelectorMustNotBeEmpty stamp: 'HAW 9/27/2020 18:50:15'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:16'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test67MethodObjectEvaluationSelectorMustNotContainInvalidCharacters stamp: 'HAW 9/27/2020 18:50:16'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:16'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test68MethodObjectEvaluationSelectorMustNotStartWithAnInvalidStartOfSelector stamp: 'HAW 9/27/2020 18:50:16'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 9/27/2020 18:50:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:17'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IfNilChecksFinderTest #test01InstanceVariableMustBelongToTheClass stamp: 'HAW 9/27/2020 18:50:17'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:18'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:18'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IfNilChecksFinderTest #test02WhenThereAreNoIfNilChecksTheResultIsEmpty stamp: 'HAW 9/27/2020 18:50:18'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:19'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:19'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:19'!
m1 randomInstVar ifNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test03ResultIncludesIfNilMessageSending stamp: 'HAW 9/27/2020 18:50:19'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:19'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:19'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:19'!
m1 randomInstVar ifNotNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test04ResultIncludesIfNotNilMessageSending stamp: 'HAW 9/27/2020 18:50:19'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:20'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:20'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:20'!
m1 randomInstVar ifNil: [ 2 + 2 ] ifNotNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test05ResultIncludesIfNilIfNotNilMessageSending stamp: 'HAW 9/27/2020 18:50:20'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:21'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:21'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:21'!
m1 randomInstVar ifNotNil: [ 2 + 2 ] ifNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test06ResultIncludesIfNotNilIfNilMessageSending stamp: 'HAW 9/27/2020 18:50:21'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:21'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:21'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:21'!
m1 randomInstVar isNil ifTrue: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test07ResultIncludesIsNilIfTrueMessageSending stamp: 'HAW 9/27/2020 18:50:21'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:22'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:22'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:22'!
m1 randomInstVar isNil ifFalse: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test08ResultIncludesIsNilIfFalseMessageSending stamp: 'HAW 9/27/2020 18:50:22'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:23'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:23'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:23'!
m1 randomInstVar isNil ifTrue: [1 + 1] ifFalse: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test09ResultIncludesIsNilIfTrueIfFalseMessageSending stamp: 'HAW 9/27/2020 18:50:23'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:23'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:23'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:23'!
m1 randomInstVar isNil ifFalse: [1 + 1] ifTrue: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test10ResultIncludesIsNilIfFalseIfTrueMessageSending stamp: 'HAW 9/27/2020 18:50:23'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:24'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:24'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:24'!
m1 randomInstVar ifNil: [1 + 1].randomInstVar ifNotNil: [1 + 1].! !

!testRun: #IfNilChecksFinderTest #test11WhenThereAreMultipleIfNilChecksInTheSameMethodTheResultIncludesAllOfThem stamp: 'HAW 9/27/2020 18:50:24'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:25'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:25'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:25'!
m1 randomInstVar ifNil: [1 + 1]! !
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:25'!
m2 randomInstVar ifNil: [2 + 2]! !

!testRun: #IfNilChecksFinderTest #test12WhenThereAreIfNilChecksInMultipleMethodsTheResultIncludesAllOfThem stamp: 'HAW 9/27/2020 18:50:25'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:25'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:25'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:25'!
m1 randomInstVar ifNil: [1 + 1].randomInstVar ifNil: [1 + 1].! !

!testRun: #IfNilChecksFinderTest #test13WhenThereAreMultipleIfNilChecksInTheSameMethodWithTheSameCodeTheResultIncludesAllOfThem stamp: 'HAW 9/27/2020 18:50:25'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 9/27/2020 18:50:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:26'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:26'!
m1 anInstVar ifNil: [ super isNil ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:26'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:26'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test01BlocksToExtractMustNotContainReferencesToSuper stamp: 'HAW 9/27/2020 18:50:26'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 9/27/2020 18:50:27'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 9/27/2020 18:50:27'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:27'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:27'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:27'!
m1 anInstVar ifNil: [ anInstVar := 1 ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:27'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:27'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test02BlocksToExtractMustNotContainAssignmentsToVariablesThatAreNotTemporals stamp: 'HAW 9/27/2020 18:50:27'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 9/27/2020 18:50:28'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 9/27/2020 18:50:28'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:29'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:29'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:29'!
m1 anInstVar ifNil: [
			1 = 2 ifFalse: [ |aTemp| aTemp := 3]]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:29'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:29'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test03BlocksToExtractCanAssignToTemporalsOfNestedBlocks stamp: 'HAW 9/27/2020 18:50:29'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 9/27/2020 18:50:29'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 9/27/2020 18:50:30'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:30'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:30'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:30'!
m1 anInstVar ifNil: [ |aTemp| aTemp := 2]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:30'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:30'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test04BlocksToExtractCanAssignToTemporalsOfBlocks stamp: 'HAW 9/27/2020 18:50:30'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 9/27/2020 18:50:31'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 9/27/2020 18:50:31'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:31'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:31'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:31'!
m1 anInstVar ifNil: [^anInstVar is Nil]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:31'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:31'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test07BlocksToExtractMustNotContainReturnStatements stamp: 'HAW 9/27/2020 18:50:31'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 9/27/2020 18:50:32'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 9/27/2020 18:50:32'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:32'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:32'!
RefactoringClassTestData subclass: #AClassToRefactorSuperclass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:32'!
AClassToRefactorSuperclass subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:32'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:32'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:32'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test08InstanceVariableMustBelongToTheClassToRefactor stamp: 'HAW 9/27/2020 18:50:32'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 9/27/2020 18:50:33'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 9/27/2020 18:50:33'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:34'!
AClassToRefactorSuperclass subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactorSuperclass stamp: 'HAW 9/27/2020 18:50:34'!
RefactoringClassTestData subclass: #AClassToRefactorSuperclass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:34'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:34'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test09ConcreteClassMustBeDifferentToNullClass stamp: 'HAW 9/27/2020 18:50:34'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:35'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:50:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:35'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClasOutsideTheHierarchy category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:35'!
RefactoringClassTestData subclass: #AClasOutsideTheHierarchy
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClasOutsideTheHierarchy methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:35'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:35'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:35'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test10MethodsMustBelongToTheHierarchyToRefactor stamp: 'HAW 9/27/2020 18:50:35'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:36'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:36'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:36'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClasOutsideTheHierarchy stamp: 'HAW 9/27/2020 18:50:36'!
RefactoringClassTestData subclass: #AClasOutsideTheHierarchy
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:36'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:36'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:36'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:36'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test13MessageNodesMustNotBeDuplicated stamp: 'HAW 9/27/2020 18:50:36'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:37'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:37'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:38'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:38'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:38'!
m1 self ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:38'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test14MessageNodesReceiverMustBeTheInstVar stamp: 'HAW 9/27/2020 18:50:38'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:38'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:39'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:39'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:39'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:39'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:39'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:39'!
unaryPolymorphicSelector! !

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:39'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test15ConcreteClassMustNotContainAnyPolymorphicSelector stamp: 'HAW 9/27/2020 18:50:39'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 9/27/2020 18:50:40'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 9/27/2020 18:50:40'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:40'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:40'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:40'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:40'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!NullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:40'!
unaryPolymorphicSelector! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:40'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test16NullClassMustNotContainAnyPolymorphicSelector stamp: 'HAW 9/27/2020 18:50:40'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 9/27/2020 18:50:41'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 9/27/2020 18:50:41'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:41'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:41'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:41'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:41'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:41'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:41'!
replaceIfNilSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:41'!
replaceIfNilSelector
	1 + 1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:41' prior: 50860224!
m1 anInstVar replaceIfNilSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:41' prior: 50860254!
m1 anInstVar replaceIfNilSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:41'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:41' prior: 50860259!
m1 anInstVar replaceIfNilSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:41'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:41'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test17WhenThereAreNoVariablesToParametrizeReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:41'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:42'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:43'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:43'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:43'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:43'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:43'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:43'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:43' prior: 50860316!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:43' prior: 50860344!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:43'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:43' prior: 50860348!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:43'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:43'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test18WhenThereAreVariablesToParametrizeReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:43'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:43'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:44'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:44'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:44'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:44'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:44'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:44'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:44' prior: 50860405!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:44' prior: 50860433!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:44'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:44' prior: 50860437!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:44'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:44'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test19WhenIfNilCheckHasOneKeywordReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:44'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:45'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:45'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:45'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:45'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:45'!
m1 anInstVar ifNil: [ self isNil ] ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:45'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:45'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:45'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:45'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:45' prior: 50860494!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:45' prior: 50860524!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:45'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:45' prior: 50860528!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:45'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:45'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test20WhenIfNilCheckHasTwoKeywordsReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:45'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:46'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:46'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:47'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:47'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:47'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:47'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:47'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:47'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:47'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:47' prior: 50860585!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:47' prior: 50860615!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:47'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:47' prior: 50860619!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:47'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:47'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test21WhenIfNilCheckHasIsNilReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:47'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:47'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:48'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:48'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:48'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:48'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:48'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:48'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:48'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:48'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:48' prior: 50860676!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:48' prior: 50860706!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:48'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:48' prior: 50860710!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:48'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:48'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test22PolymorphicMessageIsAddedToTheConcreteClass stamp: 'HAW 9/27/2020 18:50:48'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:49'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:49'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:49'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:49'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:49'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:49'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:49'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:49'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:49'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:49' prior: 50860766!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:49' prior: 50860796!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:49'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:49' prior: 50860800!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:49'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:49'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test23PolymorphicMessageIsAddedToTheConcreteClassWithChosenParameterNames stamp: 'HAW 9/27/2020 18:50:49'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:50'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:50'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:50'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:50'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:50'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:50'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:50'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:50'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:50'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:50' prior: 50860857!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:50' prior: 50860887!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:50'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:50' prior: 50860891!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:50'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:50'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test24PolymorphicMessageIsAddedToTheConcreteClassReplacingParametrizedVariables stamp: 'HAW 9/27/2020 18:50:50'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:51'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:52'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:52'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:52'!
m1 anInstVar ifNil: [ self isNil ] ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:52'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:52'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:52'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:52' prior: 50860948!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:52' prior: 50860978!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:52'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:52' prior: 50860982!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:52'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:52'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test25ReplacesIfNilIfNotNilWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:52'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:52'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:53'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:53'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:53'!
m1 anInstVar ifNotNil: [ self isNil ] ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:53'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:53'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:53'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:53' prior: 50861038!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:53' prior: 50861068!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:53'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:53' prior: 50861072!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:53'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:53'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test26ReplacesIfNotNilIfNilWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:53'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:54'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:54'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:54'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:54'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:54'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:54'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:54'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:54'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:54'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:54' prior: 50861128!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:54' prior: 50861156!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:54'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:54' prior: 50861160!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:54'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:54'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test27ReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:54'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:55'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:55'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:56'!
m1 anInstVar ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:56'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:56'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:56'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:56'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:56' prior: 50861216!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:56' prior: 50861245!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:56'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:56' prior: 50861249!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:56'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:56'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test28ReplacesIfNotNilWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:56'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:56'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:57'!
m1 anInstVar isNil ifTrue: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:57'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:57'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:57'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:57' prior: 50861305!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:57' prior: 50861333!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:57'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:57' prior: 50861337!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:57'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:57'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test29ReplacesIsNilIfTrueWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:57'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:58'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:58'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:58'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:58'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:58'!
m1 anInstVar isNil ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:58'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:58'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:58'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:58'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:58' prior: 50861393!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:58' prior: 50861422!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:58'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:58' prior: 50861426!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:58'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:58'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test30ReplacesIsNilIfFalseWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:58'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:50:59'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:50:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:50:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:59'!
m1 anInstVar isNil ifTrue: [self isNil] ifFalse: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:50:59'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:59'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:59'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:59' prior: 50861482!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:59' prior: 50861512!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:59'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:59' prior: 50861516!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:59'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:50:59'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test31ReplacesIsNilIfTrueIfFalseWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:50:59'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:00'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:00'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:01'!
m1 anInstVar isNil ifFalse: [self isNil] ifTrue: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:01'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:01'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:01'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:01'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:01' prior: 50861573!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:01' prior: 50861603!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:01'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:01' prior: 50861607!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:01'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:01'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test32ReplacesIsNilIfFalseIfTrueWithPolymorphicMessageSend stamp: 'HAW 9/27/2020 18:51:01'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:01'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:02'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:02'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:02'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:02'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:02'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:02'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:02' prior: 50861664!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:02' prior: 50861694!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:02'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:02' prior: 50861698!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:02'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:02'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test33PolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 9/27/2020 18:51:02'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:03'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:03'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:03'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:03'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:03'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:03'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:03'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:03' prior: 50861754!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:03' prior: 50861784!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:03'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:03' prior: 50861788!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:03'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:03'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test34PolymorphicMessageIsAddedToTheNullClassWithChosenParameterNames stamp: 'HAW 9/27/2020 18:51:03'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:04'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:04'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:05'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:05'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:05'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:05'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:05'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:05' prior: 50861845!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:05' prior: 50861875!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:05'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:05' prior: 50861879!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:05'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:05'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test35PolymorphicMessageIsAddedToTheNullClassReplacingParametrizedVariables stamp: 'HAW 9/27/2020 18:51:05'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:05'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:06'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:06'!
m1 anInstVar isNil ifFalse: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:06'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:06'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:06'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:06'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:06' prior: 50861936!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:06' prior: 50861965!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:06'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:06' prior: 50861969!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:06'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:06'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test36WhenNoNullBlockIsPresentEmptyPolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 9/27/2020 18:51:06'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:07'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:07'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:07'!
m1 anInstVar isNil ifTrue: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:07'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:07'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:07'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:07'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:07' prior: 50862026!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:07' prior: 50862054!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:07'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:07' prior: 50862058!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:07'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:07'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test37WhenNoConcreteBlockIsPresentEmptyPolymorphicMessageIsAddedToTheConcreteClass stamp: 'HAW 9/27/2020 18:51:07'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:08'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:08'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:08'!
m1 anInstVar ifNil: [1+1. 2+2]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:08'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:08'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:08'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:08'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:08' prior: 50862115!
m1 anInstVar unaryPolymorphicSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:09' prior: 50862145!
m1 anInstVar unaryPolymorphicSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:09'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:09' prior: 50862150!
m1 anInstVar unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:09'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:09'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test38WhenThereAreMultipleStatementsPolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 9/27/2020 18:51:09'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:09'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:09'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:10'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := nil.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:10'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:10'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:10'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:10'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:10' prior: 50862207!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := nil.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:10' prior: 50862237!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:10'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:10' prior: 50862243!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:10'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:10'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test39ReplacesNilAssignmentsWithNullObject stamp: 'HAW 9/27/2020 18:51:10'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:10'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:11'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:11'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:11'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:11'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := nil.
	anInstVar := nil.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:11'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:11'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:11'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:11'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:11' prior: 50862301!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := nil.
	anInstVar := nil.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:11' prior: 50862332!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.
	anInstVar := ANullClass new.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:11'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:11' prior: 50862338!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.
	anInstVar := ANullClass new.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:11'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:11'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test40ReplacesMultipleNilAssignmentsWithNullObject stamp: 'HAW 9/27/2020 18:51:11'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:12'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:12'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:12'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:12'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:12'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:12'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:12'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:12' prior: 50862398!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:12' prior: 50862429!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:12'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:12' prior: 50862435!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:12'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:12'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test41ReplacesAssignmentWithNullObject stamp: 'HAW 9/27/2020 18:51:12'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:13'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:13'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:14'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:14'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:14'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:14'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:14'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:14' prior: 50862495!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:14' prior: 50862527!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:14'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:14' prior: 50862535!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:14'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:14'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test42ReplacesMultipleAssignmentsInTheSameMethodWithNullObject stamp: 'HAW 9/27/2020 18:51:14'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:14'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:15'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15'!
m11
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15'!
m12
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:15'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:15'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15' prior: 50862600!
m11
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15' prior: 50862630!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15' prior: 50862634!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15' prior: 50862607!
m12
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15' prior: 50862639!
m11
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15' prior: 50862656!
m12
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15' prior: 50862664!
m11
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15' prior: 50862672!
m12
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:15'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test43ReplacesMultipleAssignmentsInMultipleMethodsWithNullObject stamp: 'HAW 9/27/2020 18:51:15'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:16'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:16'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:17'!
m1
	anInstVar ifNil: [1+1. 2+2].
	^anInstVar! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:17'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:17'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:17'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:17'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:17' prior: 50862745!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:17' prior: 50862775!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:17'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:17' prior: 50862780!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar nilIfNullObject! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:17'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:17'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test44ReplacesReturnOfIvarWithNilIfNullObject stamp: 'HAW 9/27/2020 18:51:17'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:17'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:18'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:18'!
m1
	anInstVar ifNil: [1+1. 2+2].
	self do: anInstVar.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:18'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:18'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:18'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:18'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:18' prior: 50862838!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:18' prior: 50862868!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:18'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:18' prior: 50862874!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar nilIfNullObject.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:18'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:18'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test45ReplacesIvarAsParamWithNilIfNullObject stamp: 'HAW 9/27/2020 18:51:18'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:19'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:19'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:19'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil. anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:19'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:19'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:19'!
with: p1
	p1 isNil. self isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:19'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:19' prior: 50862932!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:19' prior: 50862962!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:19'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:19' prior: 50862966!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:19'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:19'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test46WhenIvarAppearsInNotNilBlockAsReceiverReplacesIvarWithSelf stamp: 'HAW 9/27/2020 18:51:19'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:20'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:20'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:21'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self sendIvar: anInstVar ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:21'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:21'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:21'!
with: p1
	p1 sendIvar: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:21'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:21' prior: 50863023!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:21' prior: 50863053!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:21'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:21' prior: 50863057!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:21'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:21'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test47WhenIvarAppearsInNotNilBlockAsArgumentReplacesIvarWithSelf stamp: 'HAW 9/27/2020 18:51:21'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:21'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:22'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:22'!
m1 anInstVar isNil ifFalse: [ self isNil ] ifTrue: [ self sendIvar: anInstVar ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:22'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:22'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:22'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:22'!
with: p1
	p1 sendIvar: self nilIfNullObject! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:22' prior: 50863114!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:22' prior: 50863145!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:22'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:22' prior: 50863149!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:22'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:22'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test48WhenIvarAppearsInNilBlockAsArgumentReplacesIvarWithSelfNilIfNullObject stamp: 'HAW 9/27/2020 18:51:22'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 9/27/2020 18:51:23'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:23'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:23'!
m1 self ifNil: [1 + 1]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test01WhenThereAreNoVariablesToExtractFindsNothing stamp: 'HAW 9/27/2020 18:51:23'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:51:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:24'!
m1 self ifNil: [| a | a := 2. a + 1]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test02WhenThereAreOnlyTemporariesFindsNothing stamp: 'HAW 9/27/2020 18:51:24'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:51:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:24'!
m1 self ifNil: [| a | a := 2. a + self]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test03WhenABlockReferencesNonTemporariesTheyAreFound stamp: 'HAW 9/27/2020 18:51:24'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:51:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:25'!
m1 self ifNil: [| a | a := 2. a ifNil: [ self + 2]]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test04WhenANestedBlockReferencesNonTemporariesTheyAreFound stamp: 'HAW 9/27/2020 18:51:25'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:51:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:26'!
m1 self ifNil: [| a | a := nil]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test05NilIsNotFound stamp: 'HAW 9/27/2020 18:51:26'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:51:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:26'!
m1 self ifNil: [false or: [true]]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test06TrueAndFalseAreNotFound stamp: 'HAW 9/27/2020 18:51:27'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:51:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:27'!
m1 self ifNil: [| a | a := 2. a + anInstVar]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test07WhenABlockReferencesInstanceVariablesTheyAreFound stamp: 'HAW 9/27/2020 18:51:27'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:51:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:28'!
m1: anArg self ifNil: [| a | a := 2. a + anArg]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test08WhenABlockReferencesArgumentsTheyAreFound stamp: 'HAW 9/27/2020 18:51:28'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:51:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:28'!
m1: anArg self ifNil: [| a | a := 2. a + anArg]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test09ExcludingVariablesAreNotIncludedInTheResult stamp: 'HAW 9/27/2020 18:51:29'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:51:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:29'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test01AbstractClassClassNameMustNotBeEmpty stamp: 'HAW 9/27/2020 18:51:29'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:30'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:30'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test02AbstractClassClassNameMustBeASymbol stamp: 'HAW 9/27/2020 18:51:30'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:30'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:30'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test03AbstractClassClassNameMustStartWithUppercaseLetter stamp: 'HAW 9/27/2020 18:51:30'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:31'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:31'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test04AbstractClassClassNameMustNotHaveSeparators stamp: 'HAW 9/27/2020 18:51:31'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:32'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:32'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test05AbstractClassClassNameMustNotExist stamp: 'HAW 9/27/2020 18:51:32'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:32'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:32'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test06NullObjectClassNameMustNotBeEmpty stamp: 'HAW 9/27/2020 18:51:32'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:33'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:33'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test07NullObjectClassNameMustBeASymbol stamp: 'HAW 9/27/2020 18:51:33'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:34'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:34'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test08NullObjectClassNameMustStartWithUppercaseLetter stamp: 'HAW 9/27/2020 18:51:34'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:34'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:34'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test09NullObjectClassNameMustNotHaveSeparators stamp: 'HAW 9/27/2020 18:51:34'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:35'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:35'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test10NullObjectClassNameMustNotExist stamp: 'HAW 9/27/2020 18:51:35'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:36'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:36'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:36'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:36'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test11CreatesAbstractClass stamp: 'HAW 9/27/2020 18:51:36'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:36'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:37'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:37'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:37'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:37'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:37'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test12CreatesAbstractClassInChosenCategory stamp: 'HAW 9/27/2020 18:51:37'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:38'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:38'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:38'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:38'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:38'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test13CreatesAbstractClassAsSubclassOfConcreteClassPreviousSuperclass stamp: 'HAW 9/27/2020 18:51:38'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:39'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:39'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:39'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:39'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:39'!
m1! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:39'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:39'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:39'!
m1
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:39' overrides: 50863789!
m1! !

!testRun: #NullObjectHierarchyCreatorTest #test14AbstractClassDefinesAllTheSelectorsOfConcreteClass stamp: 'HAW 9/27/2020 18:51:39'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:40'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:40'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:41'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:41'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:41'!
m1: anArg! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:41'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:41'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:41'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:41' overrides: 50863853!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test15AbstractClassMethodParametersNamesArePreservedFromConcreteClass stamp: 'HAW 9/27/2020 18:51:41'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:41'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:42'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:42'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:42'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:42'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:42'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:42'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:42' overrides: 50863918!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test16AbstractClassMethodsDelegateResponsibility stamp: 'HAW 9/27/2020 18:51:42'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:43'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:43'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:43'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:43'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:43'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test17CreatesNullObjectClass stamp: 'HAW 9/27/2020 18:51:43'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:44'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:44'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:44'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:44'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:44'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test18CreatesNullObjectClassInChosenCategory stamp: 'HAW 9/27/2020 18:51:44'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:45'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:45'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:46'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:46'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:46'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:46'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test19CreatesNullObjectClassClassAsSubclassOfAbstractClass stamp: 'HAW 9/27/2020 18:51:46'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:46'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:47'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:47'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:47'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:47'!
m1! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:47'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:47'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:47'!
m1
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:47' overrides: 50864137!
m1! !

!testRun: #NullObjectHierarchyCreatorTest #test20NullObjectClassDefinesAllTheSelectorsOfConcreteClass stamp: 'HAW 9/27/2020 18:51:47'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:48'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:48'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:48'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:48'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:48'!
m1: anArg! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:48'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:48'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:48'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:48' overrides: 50864201!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test21NullObjectClassMethodParametersNamesArePreservedFromConcreteClass stamp: 'HAW 9/27/2020 18:51:48'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:49'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:49'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:49'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:49'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:49'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:49'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:49'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:49'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:49' overrides: 50864266!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test22NullObjectClassMethodsAreEmpty stamp: 'HAW 9/27/2020 18:51:49'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:50'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:50'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:51'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:51'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:51'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test23ConcreteClassSubclassesTheAbstractClass stamp: 'HAW 9/27/2020 18:51:51'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:51'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:52'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:52'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:52'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:52'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:52'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:52'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:52' overrides: 50864382!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test24ConcreteClassMethodsArePreserved stamp: 'HAW 9/27/2020 18:51:52'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 9/27/2020 18:51:53'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 9/27/2020 18:51:53'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 9/27/2020 18:51:53'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:53'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:53'!
m1 self ifNil: [1 + 1].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:53'!
m2 1 + 1.! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test01MessageNodeMustBelongToTheMethodNode stamp: 'HAW 9/27/2020 18:51:53'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:54'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:54'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:54'!
m1 anInstVar ifTrue: [1 + 1].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test02MessageNodeMustRepresentASupportedMessageSent stamp: 'HAW 9/27/2020 18:51:54'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:54'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:55'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:55'!
m1 anInstVar ifNil: [self isNil]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test03AllVariablesToParametrizeHaveACorrespondingKeyword stamp: 'HAW 9/27/2020 18:51:55'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:55'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:55'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:55'!
m1 anInstVar ifNil: [self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test04AllKeywordsMustHaveACorrespondingVariableToParametrize stamp: 'HAW 9/27/2020 18:51:55'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:56'!
m1 anInstVar ifNil: [self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test05CreatesReplaceIfNilWithPolymorphismParameters stamp: 'HAW 9/27/2020 18:51:56'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:57'!
m1 anInstVar ifNil: [self or: [true]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test06ReplaceIfNilWithPolymorphismParametersOnBlocksWithBooleanConstants stamp: 'HAW 9/27/2020 18:51:57'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:57'!
m1 anInstVar ifNil: [ | tempVar | tempVar := 1 + 1. self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test07ParameterNamesMustNotBeEqualToABlockTemporal stamp: 'HAW 9/27/2020 18:51:57'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:58'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:58'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:58'!
m1
		anInstVar ifNil: [self ifNil: [ | tempVar | tempVar := 1 + 1]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test08ParameterNamesMustNotBeEqualToANestedBlockTemporal stamp: 'HAW 9/27/2020 18:51:58'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:59'!
m1
		anInstVar ifNil: [self allInstVarNames collect: [:arg | arg asSymbol]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test09ParameterNamesMustNotBeEqualToNestedBlocksArguments stamp: 'HAW 9/27/2020 18:51:59'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:51:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:51:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:51:59'!
m1 anInstVar ifNil: [1 + 1] ifNotNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test10RangeOfMessageSendForIfNilIfNotNil stamp: 'HAW 9/27/2020 18:51:59'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:00'!
m1 anInstVar ifNotNil: [1 + 1] ifNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test11RangeOfMessageSendForIfNotNilIfNil stamp: 'HAW 9/27/2020 18:52:00'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:01'!
m1 anInstVar ifNotNil: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test12RangeOfMessageSendForIfNotNil stamp: 'HAW 9/27/2020 18:52:01'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:02'!
m1 anInstVar ifNil: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test13RangeOfMessageSendForIfNil stamp: 'HAW 9/27/2020 18:52:02'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:02'!
m1 anInstVar isNil ifTrue: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test14RangeOfMessageSendForIsNilIfTrue stamp: 'HAW 9/27/2020 18:52:02'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:03'!
m1 anInstVar isNil ifTrue: [1 + 1] ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test15RangeOfMessageSendForIsNilIfTrueIfFalse stamp: 'HAW 9/27/2020 18:52:03'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:04'!
m1 anInstVar       ifNil: [1 + 1]          ifNotNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test16WhenThereAreExtraSpacesRangeOfMessageSendForIfNilIfNotNil stamp: 'HAW 9/27/2020 18:52:04'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:04'!
m1 anInstVar    isNil       ifTrue: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test17WhenThereAreExtraSpacesRangeOfMessageSendForIsNilIfTrue stamp: 'HAW 9/27/2020 18:52:04'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:05'!
m1 anInstVar ifNil: [1 + 1] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test18ConcreteBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 9/27/2020 18:52:05'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:06'!
m1 anInstVar ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test19ConcreteBlockSourceCodeForIfNotNil stamp: 'HAW 9/27/2020 18:52:06'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:07'!
m1 anInstVar ifNotNil: [2+2] ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test20ConcreteBlockSourceCodeForIfNotNilIfNil stamp: 'HAW 9/27/2020 18:52:07'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:08'!
m1 anInstVar isNil ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test21ConcreteBlockSourceCodeForIsNilIfFalse stamp: 'HAW 9/27/2020 18:52:08'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:08'!
m1 anInstVar isNil ifTrue: [1+1] ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test22ConcreteBlockSourceCodeForIsNilIfTrueIfFalse stamp: 'HAW 9/27/2020 18:52:08'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:09'!
m1 anInstVar ifNil: [1+1] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test23NullBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 9/27/2020 18:52:09'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:10'!
m1 anInstVar ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test24NullBlockSourceCodeForIfNil stamp: 'HAW 9/27/2020 18:52:10'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:10'!
m1 anInstVar ifNotNil: [2+2] ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test25NullBlockSourceCodeForIfNotNilIfNil stamp: 'HAW 9/27/2020 18:52:10'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:11'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:11'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:11'!
m1 anInstVar isNil ifTrue: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test26NullBlockSourceCodeForIsNilIfTrue stamp: 'HAW 9/27/2020 18:52:11'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:12'!
m1 anInstVar isNil ifFalse: [2+2] ifTrue: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test27NullBlockSourceCodeForIsNilIfFalseIfTrue stamp: 'HAW 9/27/2020 18:52:12'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:12'!
m1 anInstVar ifNotNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test28NullBlockSourceCodeForIfNotNil stamp: 'HAW 9/27/2020 18:52:12'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:13'!
m1 anInstVar ifNil: [1] ifNotNil: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test29WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 9/27/2020 18:52:13'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:14'!
m1 anInstVar ifNotNil: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test30WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIfNotNil stamp: 'HAW 9/27/2020 18:52:14'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:15'!
m1 anInstVar isNil ifFalse: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test31WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIsNilIfFalse stamp: 'HAW 9/27/2020 18:52:15'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:15'!
m1 anInstVar ifNil: [1+1. 2+2.] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test32WhenThereAreMultipleStatementsNullBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 9/27/2020 18:52:15'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:16'!
m1 anInstVar ifNil: [1+1. 2+2.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test33WhenThereAreMultipleStatementsNullBlockSourceCodeForIfNil stamp: 'HAW 9/27/2020 18:52:16'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:17'!
m1 anInstVar isNil ifTrue: [1+1. 2+2.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test34WhenThereAreMultipleStatementsNullBlockSourceCodeForIsNilIfTrue stamp: 'HAW 9/27/2020 18:52:17'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 9/27/2020 18:52:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test01ParameterNameMustNotBeEmpty stamp: 'HAW 9/27/2020 18:52:17'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test02ParameterNameMustNotContainInvalidCharacters stamp: 'HAW 9/27/2020 18:52:18'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test03ParameterNameMustNotContainSeparators stamp: 'HAW 9/27/2020 18:52:18'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test04KeywordMustNotBeEmpty stamp: 'HAW 9/27/2020 18:52:19'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test05KeywordMustNotContainInvalidCharacters stamp: 'HAW 9/27/2020 18:52:19'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test06CreatesADefinition stamp: 'HAW 9/27/2020 18:52:19'!
PASSED!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:20'!
m1! !

!testRun: #VariablesToExtractFinderTest #test01WhenTheMethodHasNoVariablesItReturnsAnEmptySet stamp: 'HAW 9/27/2020 18:52:20'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:21'!
m1
		| aTempVar |

		aTempVar := 2.

		^aTempVar.! !

!testRun: #VariablesToExtractFinderTest #test02WhenTheMethodHasOnlyTemporaryVariablesItReturnsAnEmptySet stamp: 'HAW 9/27/2020 18:52:21'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:21'!
m1

		self m2.! !

!testRun: #VariablesToExtractFinderTest #test03WhenTheMethodReferencesSelfPseudoVariableItFindsIt stamp: 'HAW 9/27/2020 18:52:21'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:22'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:22'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:22'!
m1: anArg

		^anArg + 2! !

!testRun: #VariablesToExtractFinderTest #test04WhenTheMethodHasArgumentsTheyAreIncludedAsVariablesToExtract stamp: 'HAW 9/27/2020 18:52:22'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:23'!
m1

		^anInstVar isNil! !

!testRun: #VariablesToExtractFinderTest #test05WhenTheMethodReferencesAnInstanceVariableItFindsIt stamp: 'HAW 9/27/2020 18:52:23'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:23'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:23'!
m1

		^AClassVar isNil! !

!testRun: #VariablesToExtractFinderTest #test06WhenTheMethodReferencesAClassVariableItFindsIt stamp: 'HAW 9/27/2020 18:52:23'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:24'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ASharedPool category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:24'!
SharedPool subclass: #ASharedPool
	instanceVariableNames: ''
	classVariableNames: 'APoolVariable'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:24'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'ASharedPool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:24'!
m1
		^APoolVariable isNil! !

!testRun: #VariablesToExtractFinderTest #test07WhenTheMethodReferencesAPoolVariableItFindsIt stamp: 'HAW 9/27/2020 18:52:24'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:25'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'ASharedPool'
	category: '__Refactoring-TestData__'!

!classRemoval: #ASharedPool stamp: 'HAW 9/27/2020 18:52:25'!
SharedPool subclass: #ASharedPool
	instanceVariableNames: ''
	classVariableNames: 'APoolVariable'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:25'!
m1

		^true not! !

!testRun: #VariablesToExtractFinderTest #test08DoesNotFindPseudoVariablesButSelf stamp: 'HAW 9/27/2020 18:52:25'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:26'!
m1
		^anInstVar! !

!testRun: #VariablesToExtractFinderTest #test09WhenReturnsAnInstVarFindsIt stamp: 'HAW 9/27/2020 18:52:26'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:26'!
m1
		^Object! !

!testRun: #VariablesToExtractFinderTest #test10DoesNotFindClasses stamp: 'HAW 9/27/2020 18:52:26'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:27'!
m1
		^Smalltalk! !

!testRun: #VariablesToExtractFinderTest #test11DoesNotFindGlobals stamp: 'HAW 9/27/2020 18:52:27'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 9/27/2020 18:52:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test01SelectorMustNotBeEmpty stamp: 'HAW 9/27/2020 18:52:28'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test02SelectorMustNotContainInvalidCharacters stamp: 'HAW 9/27/2020 18:52:28'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test03SelectorMustNotStartWithInvalidStartOfSelector stamp: 'HAW 9/27/2020 18:52:29'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test04CreatesVariablesToParametrizeKeywordsDefinitionsWithSelector stamp: 'HAW 9/27/2020 18:52:29'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test05FirstKeywordMustNotStartWithAnInvalidStartOfSelector stamp: 'HAW 9/27/2020 18:52:29'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test06ParameterNamesMustNotBeRepeated stamp: 'HAW 9/27/2020 18:52:30'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test07VariablesToParametrizeMustNotBeRepeated stamp: 'HAW 9/27/2020 18:52:30'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test08CreatesVariablesToParametrizeKeywordsDefinitionsWithDefinitions stamp: 'HAW 9/27/2020 18:52:31'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test09WhenNoVariablesToParametrizeBuildsSelector stamp: 'HAW 9/27/2020 18:52:31'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test10WhenVariablesToParametrizeBuildsSelectorFromKeywordsInOrder stamp: 'HAW 9/27/2020 18:52:32'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test11WhenVariablesToParametrizeBuildsMessageSending stamp: 'HAW 9/27/2020 18:52:32'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test12WhenNoVariablesToParametrizeBuildsMessageHeader stamp: 'HAW 9/27/2020 18:52:32'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test13WhenVariablesToParametrizeBuildsMessageHeader stamp: 'HAW 9/27/2020 18:52:33'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:33'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:33'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:33'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:33' prior: 50865643!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:52:33'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 9/27/2020 18:52:33'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:34'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:34'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:34'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:34' prior: 50865684!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 9/27/2020 18:52:34'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'HAW 9/27/2020 18:52:34'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:35'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:35'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:35'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 9/27/2020 18:52:35'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:36'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:36'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:36'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'HAW 9/27/2020 18:52:36'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:37'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:37'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:37'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:37'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:37'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:37'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:37' prior: 50865832!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:52:37'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 9/27/2020 18:52:37'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:37'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:38'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:38'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:38'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:38'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:38'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:38'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:38'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:38'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:38' prior: 50865890!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:52:38'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 9/27/2020 18:52:38'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 9/27/2020 18:52:38'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:38'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:39'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:39'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:39'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:39'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:39'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:39'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:39'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:39'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:39' prior: 50865954!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:52:39'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 9/27/2020 18:52:39'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 9/27/2020 18:52:39'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:39'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:40'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:40'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:40'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:40'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:40'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:40'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:40'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:40' prior: 50866019!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:52:40'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 9/27/2020 18:52:40'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 9/27/2020 18:52:40'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:41'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:41'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:41'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:41'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:41' prior: 50866073!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:52:41'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'HAW 9/27/2020 18:52:41'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:41'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:41'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:41'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:41'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:41'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:41' prior: 50866121!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 9/27/2020 18:52:41'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 9/27/2020 18:52:41'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:42'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:42'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:42'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:42'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:42'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:42'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:42' prior: 50866181!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:52:42'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 9/27/2020 18:52:42'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:43'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:43'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:43'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:43'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:43'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:43' prior: 50866227!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 9/27/2020 18:52:43'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'HAW 9/27/2020 18:52:43'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:44'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:44'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:44'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:44'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:44'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:44'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 9/27/2020 18:52:44'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 9/27/2020 18:52:45'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:45'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:45'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:45'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:45'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:45' prior: 50866327!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 9/27/2020 18:52:45'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'HAW 9/27/2020 18:52:45'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:46'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'HAW 9/27/2020 18:52:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:46'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:46'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:46'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:46'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:46' prior: 50866373!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 9/27/2020 18:52:46'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 9/27/2020 18:52:46'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:47'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:47'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:47'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:47'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:47'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 9/27/2020 18:52:47'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:48'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:48'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:48'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:48'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:48'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:48'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:48'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:48' prior: 50866472!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 9/27/2020 18:52:48'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 9/27/2020 18:52:48'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:49'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:49'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:49'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:49'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:49'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:49'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:49'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:49'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:49'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:49' prior: 50866532!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 9/27/2020 18:52:49'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 9/27/2020 18:52:49'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 9/27/2020 18:52:49'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:50'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:50'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:50'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:50'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:50'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:50'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:50'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:50'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:50'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:50' prior: 50866598!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 9/27/2020 18:52:50'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 9/27/2020 18:52:50'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 9/27/2020 18:52:50'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:51'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:51'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:51'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:51'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:51'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:51'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:51'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:51'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:51'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:51' prior: 50866665!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 9/27/2020 18:52:51'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 9/27/2020 18:52:51'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 9/27/2020 18:52:51'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:52'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:52'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:52'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:52'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:52'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:52'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:52' prior: 50866722!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 9/27/2020 18:52:52'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'HAW 9/27/2020 18:52:52'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:53'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:53'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:53'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:53'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:53' prior: 50866772!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 9/27/2020 18:52:53'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 9/27/2020 18:52:53'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:54'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:54'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:54'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:54'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:54'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:54'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:54'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:54' prior: 50866834!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 9/27/2020 18:52:54'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 9/27/2020 18:52:54'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:54'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:55'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:55'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:55'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:55'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:55'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:55' prior: 50866883!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 9/27/2020 18:52:55'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'HAW 9/27/2020 18:52:55'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:55'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:55'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:55'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:55'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:55'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:55'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 9/27/2020 18:52:55'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:56'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 9/27/2020 18:52:56'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:57'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:57'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:57'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:57'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:57'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:57' prior: 50866986!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 9/27/2020 18:52:57'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'HAW 9/27/2020 18:52:57'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:57'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 9/27/2020 18:52:58'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:58'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:58'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:58'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:58'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:58' prior: 50867031!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 9/27/2020 18:52:58'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 9/27/2020 18:52:58'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:52:58'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:59'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:59'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:59'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:59'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:52:59'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 9/27/2020 18:52:59'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:52:59'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:52:59'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:52:59'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:00'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:00'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:00'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:00'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:00' prior: 50867127!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 9/27/2020 18:53:00'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 9/27/2020 18:53:00'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:53:00'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:53:00'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:00'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:01'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:01'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:01'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:01'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:01'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:01' prior: 50867186!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 9/27/2020 18:53:01'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 9/27/2020 18:53:01'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 9/27/2020 18:53:01'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:53:01'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:53:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:01'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:02'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:02'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:02'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:02'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:02'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:02' prior: 50867250!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 9/27/2020 18:53:02'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 9/27/2020 18:53:02'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 9/27/2020 18:53:02'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:53:02'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:53:02'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:02'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:03'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:03'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:03'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:03'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:03'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:03'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:03' prior: 50867315!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 9/27/2020 18:53:03'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 9/27/2020 18:53:03'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 9/27/2020 18:53:03'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:53:03'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:53:03'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:04'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:04'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:04'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:04' prior: 50867369!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 9/27/2020 18:53:04'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'HAW 9/27/2020 18:53:04'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:53:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:04'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:04'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:04'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:04'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:04' prior: 50867417!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 9/27/2020 18:53:04'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 9/27/2020 18:53:04'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:53:05'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:53:05'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:05'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:05'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:05'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:05'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:05'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:05'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:05' prior: 50867477!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 9/27/2020 18:53:05'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 9/27/2020 18:53:05'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:53:06'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:53:06'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:06'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:06'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:06'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:06'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:06' prior: 50867523!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 9/27/2020 18:53:06'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'HAW 9/27/2020 18:53:06'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:53:07'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:07'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 9/27/2020 18:53:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:07'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:07'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 9/27/2020 18:53:07'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 9/27/2020 18:53:07'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 9/27/2020 18:53:08'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 9/27/2020 18:53:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 9/27/2020 18:53:08'!
PASSED!

----QUIT----(27 September 2020 18:53:08) CuisUniversity-4383.image priorSource: 16016647!

----STARTUP---- (27 September 2020 21:19:37) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/macos64/CuisUniversity-4383.image!


----End fileIn of /Users/hernan/Downloads/Tools-Finder-4.pck.st----!

----QUIT----(27 September 2020 21:20:16) CuisUniversity-4383.image priorSource: 17150444!

----STARTUP---- (23 October 2020 19:11:32) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


TestSuite subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

!classDefinition: #MarsRoverTests category: 'EjercicioMarsRover' stamp: 'EMI 10/23/2020 19:15:53'!
TestSuite subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

!classDefinition: #MarsRover category: 'EjercicioMarsRover' stamp: 'EMI 10/23/2020 19:16:26'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!
!MarsRoverTests class methodsFor: 'nil' stamp: 'EMI 10/23/2020 19:16:57'!
test01
! !
!MarsRoverTests class methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:19:17' prior: 50869426!
test01
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.! !
!MarsRoverTests class methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:23:22' prior: 50869430!
test01
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:24:00'!
test01
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests class #test01 stamp: 'EMI 10/23/2020 19:24:00'!
test01
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).!

TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

!classDefinition: #MarsRoverTests category: 'EjercicioMarsRover' stamp: 'EMI 10/23/2020 19:24:22'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:24:25'!
ERROR!

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:24:25'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'EMI 10/23/2020 19:24:57'!
at: aPoint withOrientation: aCharacter 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: aPoint withOrientation: aCharacter ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'EMI 10/23/2020 19:25:26' prior: 50869476!
at: aPoint withOrientation: aCardinal
	^self new initializeAt: aPoint withOrientation: aCardinal. ! !

!classDefinition: #MarsRover category: 'EjercicioMarsRover' stamp: 'EMI 10/23/2020 19:25:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

!classDefinition: #MarsRover category: 'EjercicioMarsRover' stamp: 'EMI 10/23/2020 19:25:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'point cardinal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!
!MarsRover methodsFor: 'initalize' stamp: 'EMI 10/23/2020 19:25:59'!
initializeAt: aPoint withOrientation: aCardinal 
	self shouldBeImplemented.
	point := aPoint.
	cardinal := aCardinal.! !
!MarsRover methodsFor: 'initalize' stamp: 'EMI 10/23/2020 19:26:13' prior: 50869507!
initializeAt: aPoint withOrientation: aCardinal 
	point _ aPoint.
	cardinal _ aCardinal.! !

!classDefinition: #MarsRover category: 'EjercicioMarsRover' stamp: 'EMI 10/23/2020 19:26:40'!
Object subclass: #MarsRover
	instanceVariableNames: 'point cardinal position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

!classDefinition: #MarsRover category: 'EjercicioMarsRover' stamp: 'EMI 10/23/2020 19:26:42'!
Object subclass: #MarsRover
	instanceVariableNames: 'point cardinal position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!
!MarsRover methodsFor: 'initalize' stamp: 'EMI 10/23/2020 19:26:37' prior: 50869514!
initializeAt: aPoint withOrientation: aCardinal 
	position _ aPoint.
	orientation _ aCardinal.! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:27:12'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'EMI 10/23/2020 19:27:26'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'accessing' stamp: 'EMI 10/23/2020 19:27:32' prior: 50869544!
position
	^position! !
!MarsRover methodsFor: 'accessing' stamp: 'EMI 10/23/2020 19:28:01'!
orientation
	self shouldBeImplemented.
	^orientation! !
!MarsRover methodsFor: 'accessing' stamp: 'EMI 10/23/2020 19:28:06' prior: 50869552!
orientation
	^orientation.! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:28:21'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:28:27'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

!classDefinition: #MarsRover category: 'EjercicioMarsRover' stamp: 'EMI 10/23/2020 19:28:40'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:29:46'!
test02
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:30:34' prior: 50869578!
test02
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: ''.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:30:53' prior: 50869586!
test02
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: ''.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:30:59'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:30:59'!
ERROR!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:30:59'!
ERROR!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 19:32:54'!
receiveInstructions: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 19:33:18' prior: 50869611!
receiveInstructions: anInstructionsString
	^self.! !

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:33:32'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:33:34'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:33:34'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:35:19'!
test03
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'f'.
	self assert: (rover position = (0@1)).
	self assert: (rover orientation = $N).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:35:27'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:35:27'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:35:27'!
FAILURE!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:35:27'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 19:37:06' prior: 50869616!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty ifTrue:[^self.].
	position _ 0@1.
	^self.! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 19:37:31' prior: 50869647!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty ifFalse:[position _ 0@1.].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:37:44'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:37:44'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:37:44'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:38:11'!
test04
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'b'.
	self assert: (rover position = (2@1)).
	self assert: (rover orientation = $N).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:38:19'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:38:19'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:38:19'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:38:19'!
FAILURE!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:38:19'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 19:39:33' prior: 50869654!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString = 'f' ifTrue: [position _ 0@1.] ifFalse: [position _ 2@1].
		].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:39:41'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:39:41'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:39:41'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:39:41'!
PASSED!

----SNAPSHOT----(23 October 2020 19:39:50) CuisUniversity-4383.image priorSource: 17207870!

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:41:15'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:41:15'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:41:15'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:41:15'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:41:38'!
test05
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'l'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $W).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:41:44'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:41:44'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:41:44'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:41:44'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 19:41:44'!
FAILURE!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 19:41:44'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 19:44:13' prior: 50869689!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString = 'f' ifTrue: [position _ 0@1.].
		anInstructionsString = 'b' ifTrue: [position _ 2@1].
		anInstructionsString = 'l' ifTrue: [orientation _ $W].
	].! !

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 19:44:28'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:44:31'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:44:31'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:44:31'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:44:31'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 19:44:31'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:44:41' prior: 50869720!
test05
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'r'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $E).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:41:38' prior: 50869769!
test05
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'l'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $W).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:45:11'!
test06
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'r'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $E).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:45:19'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:45:19'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:45:19'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:45:20'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 19:45:20'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 19:45:20'!
FAILURE!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 19:45:20'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 19:45:55' prior: 50869743!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString = 'f' ifTrue: [position _ 0@1.].
		anInstructionsString = 'b' ifTrue: [position _ 2@1].
		anInstructionsString = 'l' ifTrue: [orientation _ $W].
		anInstructionsString = 'r' ifTrue: [orientation _ $E].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:46:06'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:46:06'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:46:06'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:46:06'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 19:46:06'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 19:46:06'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:49:38'!
test07
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'v'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:51:04' prior: 50869840!
test07
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'fb'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:51:12'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:51:12'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:51:12'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:51:12'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 19:51:12'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 19:51:12'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 19:51:12'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:53:43' prior: 50869849!
test07
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'ff'.
	self assert: (rover position = (3@1)).
	self assert: (rover orientation = $N).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:53:49'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:53:49'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:53:49'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:53:49'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 19:53:49'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 19:53:49'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 19:53:49'!
FAILURE!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 19:53:49'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 19:54:50' prior: 50869813!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString = 'f' ifTrue: [position _ 0@1.].
		anInstructionsString = 'ff' ifTrue: [position _ -1@1.].
		anInstructionsString = 'b' ifTrue: [position _ 2@1].
		anInstructionsString = 'l' ifTrue: [orientation _ $W].
		anInstructionsString = 'r' ifTrue: [orientation _ $E].
	].! !

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 19:54:56'!
FAILURE!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 19:55:08' prior: 50869875!
test07
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'ff'.
	self assert: (rover position = (-1@1)).
	self assert: (rover orientation = $N).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 19:55:11'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 19:55:11'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 19:55:11'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 19:55:11'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 19:55:11'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 19:55:11'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 19:55:11'!
PASSED!

----End fileIn of /home/doraserver/CuisUniversity/Packages/TerseGuide.pck.st----!

a _ 1@1.!

ea _ a x.!

ea _ a x - 1.!

ea _ a x.!

ea _ a x - 1.!

a _ 1@1.
ea _ a x.
ea _ a x - 1.
a!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 20:03:31' prior: 50869903!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			aCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
		].
		anInstructionsString = 'b' ifTrue: [position _ 2@1].
		anInstructionsString = 'l' ifTrue: [orientation _ $W].
		anInstructionsString = 'r' ifTrue: [orientation _ $E].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 20:03:41'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 20:03:41'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 20:03:41'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 20:03:41'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 20:03:41'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 20:03:41'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 20:03:41'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 20:04:00'!
test08
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'bb'.
	self assert: (rover position = (3@1)).
	self assert: (rover orientation = $N).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 20:04:04'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 20:04:04'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 20:04:04'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 20:04:04'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 20:04:04'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 20:04:04'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 20:04:04'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/23/2020 20:04:04'!
FAILURE!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/23/2020 20:04:04'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 20:04:43' prior: 50872885!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			aCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
		].
		anInstructionsString = 'l' ifTrue: [orientation _ $W].
		anInstructionsString = 'r' ifTrue: [orientation _ $E].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 20:04:52'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 20:04:52'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 20:04:52'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 20:04:52'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 20:04:52'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 20:04:52'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 20:04:52'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/23/2020 20:04:52'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 20:05:19'!
test09
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 20:05:26'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 20:05:26'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 20:05:26'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 20:05:26'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 20:05:26'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 20:05:26'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 20:05:26'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/23/2020 20:05:26'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/23/2020 20:05:26'!
FAILURE!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/23/2020 20:05:26'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 20:11:39' prior: 50872948!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			aCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
			aCharacter = $l ifTrue:[
				orientation = $N ifTrue:[^orientation _ $W].	
				orientation = $S ifTrue:[^orientation _ $E].	
				orientation = $W ifTrue:[^orientation _ $S].	
				orientation = $E ifTrue:[^orientation _ $N].	
			].
		].
		anInstructionsString = 'r' ifTrue: [orientation _ $E].
	].! !

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/23/2020 20:11:51'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 20:13:28' prior: 50873016!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			aCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
			aCharacter = $l ifTrue:[
				orientation = $N ifTrue:[orientation _ $W].	
				orientation = $S ifTrue:[orientation _ $E].	
				orientation = $W ifTrue:[orientation _ $S].	
				orientation = $E ifTrue:[orientation _ $N].	
			].
		].
		anInstructionsString = 'r' ifTrue: [orientation _ $E].
	].! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 20:16:54' prior: 50873039!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			aCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
		].
		anInstructionsString = 'l' ifTrue: [orientation _ $W].
		anInstructionsString = 'll' ifTrue: [orientation _ $S].
		anInstructionsString = 'r' ifTrue: [orientation _ $E].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 20:17:05'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 20:17:05'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 20:17:05'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 20:17:05'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 20:17:05'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 20:17:05'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 20:17:05'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/23/2020 20:17:05'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/23/2020 20:17:05'!
PASSED!

----SNAPSHOT----(23 October 2020 20:17:10) CuisUniversity-4383.image priorSource: 17217793!

Object subclass: #MarsRover
	instanceVariableNames: 'position orientation rotationsCounterClockwise'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

!classDefinition: #MarsRover category: 'EjercicioMarsRover' stamp: 'EMI 10/23/2020 20:21:52'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation rotationsCounterClockwise'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!
!MarsRover methodsFor: 'initialize' stamp: 'EMI 10/23/2020 20:22:54' prior: 50869536!
initializeAt: aPoint withOrientation: aCardinal 
	position _ aPoint.
	orientation _ aCardinal.
	rotationsCounterClockwise _ Dictionary new.
	rotationsCounterClockwise at:$N put:$W.
	rotationsCounterClockwise at:$W put:$S.
	rotationsCounterClockwise at:$S put:$E.
	rotationsCounterClockwise at:$E put:$N.! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 20:23:52' prior: 50873060!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			aCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
			aCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
		].
		anInstructionsString = 'r' ifTrue: [orientation _ $E].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 20:23:56'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 20:23:56'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 20:23:56'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 20:23:56'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 20:23:56'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 20:23:56'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 20:23:56'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/23/2020 20:23:56'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/23/2020 20:23:56'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 20:24:20'!
test10
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 20:24:42' prior: 50873167!
test10
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'rr'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 20:24:45'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 20:24:45'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 20:24:45'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 20:24:45'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 20:24:45'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 20:24:45'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 20:24:45'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/23/2020 20:24:45'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/23/2020 20:24:45'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/23/2020 20:24:45'!
FAILURE!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/23/2020 20:24:45'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 20:25:13' prior: 50873129!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			aCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
			aCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
		].
		anInstructionsString = 'r' ifTrue: [orientation _ $E].
		anInstructionsString = 'rr' ifTrue: [orientation _ $S].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 20:25:18'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 20:25:18'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 20:25:18'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 20:25:18'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 20:25:18'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 20:25:18'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 20:25:18'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/23/2020 20:25:18'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/23/2020 20:25:18'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/23/2020 20:25:18'!
PASSED!

----SNAPSHOT----(23 October 2020 20:25:24) CuisUniversity-4383.image priorSource: 17326326!

Object subclass: #MarsRover
	instanceVariableNames: 'position orientation rotationsCounterClockwise rotationsClockwise'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

!classDefinition: #MarsRover category: 'EjercicioMarsRover' stamp: 'EMI 10/23/2020 20:25:41'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation rotationsCounterClockwise rotationsClockwise'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!
!MarsRover methodsFor: 'initialize' stamp: 'EMI 10/23/2020 20:26:42' prior: 50873116!
initializeAt: aPoint withOrientation: aCardinal 
	position _ aPoint.
	orientation _ aCardinal.
	
	rotationsCounterClockwise _ Dictionary new.
	rotationsCounterClockwise at:$N put:$W.
	rotationsCounterClockwise at:$W put:$S.
	rotationsCounterClockwise at:$S put:$E.
	rotationsCounterClockwise at:$E put:$N.
	
	rotationsClockwise _ Dictionary new.
	rotationsClockwise at:$N put:$E.
	rotationsClockwise at:$E put:$S.
	rotationsClockwise at:$S put:$W.
	rotationsClockwise at:$W put:$N.! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/23/2020 20:27:06' prior: 50873211!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			aCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
			aCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
			aCharacter = $r ifTrue: [orientation _ rotationsClockwise at: orientation ].
		].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 20:27:16'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 20:27:16'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 20:27:16'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 20:27:16'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 20:27:16'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 20:27:16'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 20:27:16'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/23/2020 20:27:16'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/23/2020 20:27:16'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/23/2020 20:27:16'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 20:29:58'!
test11
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'rr'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/23/2020 20:30:06' prior: 50873331!
test11
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'er'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/23/2020 20:30:09'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/23/2020 20:30:09'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/23/2020 20:30:09'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/23/2020 20:30:09'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/23/2020 20:30:09'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/23/2020 20:30:09'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/23/2020 20:30:09'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/23/2020 20:30:09'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/23/2020 20:30:09'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/23/2020 20:30:09'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/23/2020 20:30:09'!
FAILURE!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/23/2020 20:30:09'!
FAILURE!

----SNAPSHOT----(23 October 2020 20:30:26) CuisUniversity-4383.image priorSource: 17331265!

----QUIT----(23 October 2020 20:32:27) CuisUniversity-4383.image priorSource: 17335252!

----STARTUP---- (24 October 2020 16:49:07) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 17:14:32'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 17:14:32'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 17:14:32'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 17:14:32'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 17:14:32'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 17:14:32'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 17:14:32'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 17:14:32'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 17:14:32'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 17:14:32'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 17:14:32'!
FAILURE!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 17:14:32'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:16:35' prior: 50873290!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			(#($f $b $l $r) includes: aCharacter) ifFalse:[^self].
			aCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
			aCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
			aCharacter = $r ifTrue: [orientation _ rotationsClockwise at: orientation ].
		].
	].! !

----SNAPSHOT----(24 October 2020 17:16:52) CuisUniversity-4383.image priorSource: 17335345!

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 17:16:55'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:21:11'!
xxx: anInstructionCharacter
	anInstructionCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
	anInstructionCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
	anInstructionCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
	anInstructionCharacter = $r ifTrue: [orientation _ rotationsClockwise at: orientation ].! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:25:08'!
yyy
	position _ ((position x + 1)@position y)
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 17:26:08'!
test12
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $W.
	rover receiveInstructions: 'f'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 17:26:12'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'EMI 10/24/2020 17:26:12'!
FAILURE!

!testRun: #MarsRoverTests #test12 stamp: 'EMI 10/24/2020 17:26:12'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:30:23' prior: 50873416!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			(#($f $b $l $r) includes: aCharacter) ifFalse:[^self].
			aCharacter = $f ifTrue: [
				orientation = $W
				ifTrue:[
					position _ (position x@(position y - 1))
					] 
				ifFalse: [
					position _ ((position x -1)@position y)
					].
				].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
			aCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
			aCharacter = $r ifTrue: [orientation _ rotationsClockwise at: orientation ].
		].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'EMI 10/24/2020 17:30:40'!
PASSED!

a _ 1@1.!

a rotatedBy: (90 degreesToRadians).!

a!

a rotatedBy: (90 degreesToRadians).!

a rotatedBy: (45 degreesToRadians).!

45 degreesToRadians!

a rotatedBy: (-90 degreesToRadians).!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:38:07' prior: 50873524!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			(#($f $b $l $r) includes: aCharacter) ifFalse:[^self].
			aCharacter = $f ifTrue: [
				orientation = $W ifTrue:[position _ (position x@(position y - 1))] .
				orientation = $N ifTrue: [position _ ((position x -1)@position y)].
				].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
			aCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
			aCharacter = $r ifTrue: [orientation _ rotationsClockwise at: orientation ].
		].
	].! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:39:04' prior: 50873582!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			(#($f $b $l $r) includes: aCharacter) ifFalse:[^self].
			aCharacter = $f ifTrue: [
				orientation = $W ifTrue:[position _ (position x@(position y - 1))] .
				orientation = $N ifTrue: [position _ ((position x -1)@position y)].
				orientation = $S ifTrue: [position _ ((position x + 1)@position y)].
				orientation = $E ifTrue: [position _ (position x@(position y +1))].
				].
			aCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
			aCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
			aCharacter = $r ifTrue: [orientation _ rotationsClockwise at: orientation ].
		].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'EMI 10/24/2020 17:39:12'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 17:40:11' prior: 50873484!
test12
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'EMI 10/24/2020 17:40:15'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 17:40:43'!
test13
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'rb'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $E).! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'EMI 10/24/2020 17:40:49'!
PASSED!

!testRun: #MarsRoverTests #test13 stamp: 'EMI 10/24/2020 17:40:49'!
FAILURE!

!testRun: #MarsRoverTests #test13 stamp: 'EMI 10/24/2020 17:40:49'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:41:44' prior: 50873604!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			(#($f $b $l $r) includes: aCharacter) ifFalse:[^self].
			aCharacter = $f ifTrue: [
				orientation = $W ifTrue:[position _ (position x@(position y - 1))] .
				orientation = $N ifTrue: [position _ ((position x -1)@position y)].
				orientation = $S ifTrue: [position _ ((position x + 1)@position y)].
				orientation = $E ifTrue: [position _ (position x@(position y +1))].
				].
			aCharacter = $b ifTrue: [
				orientation = $W ifTrue:[position _ (position x@(position y + 1))] .
				orientation = $N ifTrue: [position _ ((position x +1)@position y)].
				orientation = $S ifTrue: [position _ ((position x - 1)@position y)].
				orientation = $E ifTrue: [position _ (position x@(position y - 1))].
				].
			aCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
			aCharacter = $r ifTrue: [orientation _ rotationsClockwise at: orientation ].
		].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

!testRun: #MarsRoverTests #test13 stamp: 'EMI 10/24/2020 17:41:54'!
PASSED!

----SNAPSHOT----(24 October 2020 17:42:59) CuisUniversity-4383.image priorSource: 17337078!

----SNAPSHOT----(24 October 2020 17:43:48) CuisUniversity-4383.image priorSource: 17348992!

!methodRemoval: MarsRover #xxx: stamp: 'EMI 10/24/2020 17:44:05'!
xxx: anInstructionCharacter
	anInstructionCharacter = $f ifTrue: [position _ ((position x -1)@position y)].
	anInstructionCharacter = $b ifTrue: [position _ ((position x +1)@position y)].
	anInstructionCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
	anInstructionCharacter = $r ifTrue: [orientation _ rotationsClockwise at: orientation ].!

!methodRemoval: MarsRover #yyy stamp: 'EMI 10/24/2020 17:44:09'!
yyy
	position _ ((position x + 1)@position y)
!

----SNAPSHOT----(24 October 2020 17:44:13) CuisUniversity-4383.image priorSource: 17349085!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:50:01'!
xxx: anInstructionsCharacter
	| pasoSobreEje |
	pasoSobreEje _ anInstructionsCharacter = $f ifTrue:[1] ifFalse:[-1].
	orientation = $W ifTrue:[position _ (position x@(position y - pasoSobreEje ))] .
	orientation = $N ifTrue: [position _ ((position x - pasoSobreEje )@position y)].
	orientation = $S ifTrue: [position _ ((position x + pasoSobreEje )@position y)].
	orientation = $E ifTrue: [position _ (position x@(position y +pasoSobreEje ))].! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:51:43'!
oneStep: anInstructionsCharacter
	| pasoSobreEje |
	pasoSobreEje _ anInstructionsCharacter = $f ifTrue:[1] ifFalse:[-1].
	orientation = $W ifTrue:[position _ (position x@(position y - pasoSobreEje ))] .
	orientation = $N ifTrue: [position _ ((position x - pasoSobreEje )@position y)].
	orientation = $S ifTrue: [position _ ((position x + pasoSobreEje )@position y)].
	orientation = $E ifTrue: [position _ (position x@(position y +pasoSobreEje ))].! !

!methodRemoval: MarsRover #xxx: stamp: 'EMI 10/24/2020 17:51:43'!
xxx: anInstructionsCharacter
	| pasoSobreEje |
	pasoSobreEje _ anInstructionsCharacter = $f ifTrue:[1] ifFalse:[-1].
	orientation = $W ifTrue:[position _ (position x@(position y - pasoSobreEje ))] .
	orientation = $N ifTrue: [position _ ((position x - pasoSobreEje )@position y)].
	orientation = $S ifTrue: [position _ ((position x + pasoSobreEje )@position y)].
	orientation = $E ifTrue: [position _ (position x@(position y +pasoSobreEje ))].!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:54:49'!
oneStepFoward
	self oneStep: $f.! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:54:59'!
oneStepBackwards
	self oneStep: $b.! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 17:55:47' prior: 50873741!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			(#($f $b $l $r) includes: aCharacter) ifFalse:[^self].
			aCharacter = $f ifTrue: [self oneStepFoward.].
			aCharacter = $b ifTrue: [self oneStepBackwards.].
			aCharacter = $l ifTrue: [orientation _ rotationsCounterClockwise at: orientation ].
			aCharacter = $r ifTrue: [orientation _ rotationsClockwise at: orientation ].
		].
	].! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!

!testRun: #MarsRoverTests #test13 stamp: 'EMI 10/24/2020 18:00:02'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 18:03:07'!
rotate: aRotationsDictionary
	orientation _ aRotationsDictionary at: orientation.
! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 18:03:32'!
rotateLeft
	self rotate: rotationsCounterClockwise.
! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 18:03:42'!
rotateRight
	self rotate: rotationsClockwise.
! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 18:04:29' prior: 50873891!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			(#($f $b $l $r) includes: aCharacter) ifFalse:[^self].
			aCharacter = $f ifTrue: [self oneStepFoward.].
			aCharacter = $b ifTrue: [self oneStepBackwards.].
			aCharacter = $l ifTrue: [self rotateLeft.].
			aCharacter = $r ifTrue: [self rotateRight.].
		].
	].! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 18:05:03' prior: 50873954!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			(#($f $b $l $r) includes: aCharacter) ifFalse:[^self].
			aCharacter = $f ifTrue: [self oneStepFoward.].
			aCharacter = $b ifTrue: [self oneStepBackwards.].
			aCharacter = $l ifTrue: [self rotateLeft.].
			aCharacter = $r ifTrue: [self rotateRight.].
		].
	].! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/24/2020 18:11:01' prior: 50873850!
oneStep: anInstructionsCharacter
	| pasoSobreEje |
	pasoSobreEje _ anInstructionsCharacter = $f ifTrue:[1] ifFalse:[-1].
	orientation = $W ifTrue:[position _ (position x@(position y - pasoSobreEje ))] .
	orientation = $N ifTrue: [position _ ((position x - pasoSobreEje )@position y)].
	orientation = $S ifTrue: [position _ ((position x + pasoSobreEje )@position y)].
	orientation = $E ifTrue: [position _ (position x@(position y +pasoSobreEje ))].! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:14:53'!
test14
	self should: [MarsRover at: 1@1 withOrientation: $Z.] raise: Error.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:17:21' prior: 50874003!
test14
	self should: [MarsRover at: 1@1 withOrientation: $Z.] 
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText = MarsRover invalidOrientationErrorMessage ].
	
! !
!MarsRover class methodsFor: 'nil' stamp: 'EMI 10/24/2020 18:18:37'!
invalidOrientationErrorMessage
	^'Invalid orientation, should be #N, #S, #W or #E'.! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test13 stamp: 'EMI 10/24/2020 18:18:49'!
PASSED!

!testRun: #MarsRoverTests #test14 stamp: 'EMI 10/24/2020 18:18:49'!
FAILURE!

!testRun: #MarsRoverTests #test14 stamp: 'EMI 10/24/2020 18:18:49'!
FAILURE!
!MarsRover methodsFor: 'initialize' stamp: 'EMI 10/24/2020 18:19:26' prior: 50873272!
initializeAt: aPoint withOrientation: aCardinal 
	position _ aPoint.

	orientation _ aCardinal.
	
	rotationsCounterClockwise _ Dictionary new.
	rotationsCounterClockwise at:$N put:$W.
	rotationsCounterClockwise at:$W put:$S.
	rotationsCounterClockwise at:$S put:$E.
	rotationsCounterClockwise at:$E put:$N.
	
	rotationsClockwise _ Dictionary new.
	rotationsClockwise at:$N put:$E.
	rotationsClockwise at:$E put:$S.
	rotationsClockwise at:$S put:$W.
	rotationsClockwise at:$W put:$N.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:19:37' prior: 50874018!
invalidOrientationErrorMessage
	^'Invalid orientation, should be $N, $S, $W or $E'.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:20:02' prior: 50874079!
invalidOrientationErrorMessage
	^'Invalid orientation, should be N, S, W or E'.! !
!MarsRover methodsFor: 'initialize' stamp: 'EMI 10/24/2020 18:22:30' prior: 50874060!
initializeAt: aPoint withOrientation: aCardinal 
	position _ aPoint.
	(#($N $W $S $E) includes: aCardinal) ifFalse: [^self error: self class invalidOrientationErrorMessage.].
	orientation _ aCardinal.
	
	rotationsCounterClockwise _ Dictionary new.
	rotationsCounterClockwise at:$N put:$W.
	rotationsCounterClockwise at:$W put:$S.
	rotationsCounterClockwise at:$S put:$E.
	rotationsCounterClockwise at:$E put:$N.
	
	rotationsClockwise _ Dictionary new.
	rotationsClockwise at:$N put:$E.
	rotationsClockwise at:$E put:$S.
	rotationsClockwise at:$S put:$W.
	rotationsClockwise at:$W put:$N.! !
!MarsRover methodsFor: 'initialize' stamp: 'EMI 10/24/2020 18:22:49' prior: 50874091!
initializeAt: aPoint withOrientation: aCardinal 
	position _ aPoint.
	(#($N $W $S $E) includes: aCardinal) ifFalse: [^Error signal: self class invalidOrientationErrorMessage.].
	orientation _ aCardinal.
	
	rotationsCounterClockwise _ Dictionary new.
	rotationsCounterClockwise at:$N put:$W.
	rotationsCounterClockwise at:$W put:$S.
	rotationsCounterClockwise at:$S put:$E.
	rotationsCounterClockwise at:$E put:$N.
	
	rotationsClockwise _ Dictionary new.
	rotationsClockwise at:$N put:$E.
	rotationsClockwise at:$E put:$S.
	rotationsClockwise at:$S put:$W.
	rotationsClockwise at:$W put:$N.! !

!testRun: #MarsRoverTests #test01 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test09 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test11 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test12 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test13 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

!testRun: #MarsRoverTests #test14 stamp: 'EMI 10/24/2020 18:23:26'!
PASSED!

----SNAPSHOT----(24 October 2020 18:28:37) CuisUniversity-4383.image priorSource: 17349735!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:31:02'!
test01MarsRoverCreatedCorrectPositionAndOrientation
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test01 stamp: 'EMI 10/24/2020 18:31:02'!
test01
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:33:56'!
test01MarsRoverGivenNoInstructionsDoesNotMoveNorRotate
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test01MarsRoverCreatedCorrectPositionAndOrientation stamp: 'EMI 10/24/2020 18:33:56'!
test01MarsRoverCreatedCorrectPositionAndOrientation
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:34:39'!
test02MarsRoverGivenEmptyInstructionsDoesNotMoveNorRotate
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: ''.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test02 stamp: 'EMI 10/24/2020 18:34:39'!
test02
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: ''.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:37:40'!
test02MarsRoverReceivingEmptyInstructionsDoesNotMoveNorRotate
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: ''.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test02MarsRoverGivenEmptyInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/24/2020 18:37:40'!
test02MarsRoverGivenEmptyInstructionsDoesNotMoveNorRotate
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: ''.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:37:56'!
test01MarsRoverReceivingNoInstructionsDoesNotMoveNorRotate
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test01MarsRoverGivenNoInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/24/2020 18:37:56'!
test01MarsRoverGivenNoInstructionsDoesNotMoveNorRotate
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:39:03'!
test03MarsRoverMovesOneStep
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'f'.
	self assert: (rover position = (0@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test03 stamp: 'EMI 10/24/2020 18:39:03'!
test03
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'f'.
	self assert: (rover position = (0@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:39:30'!
test05MarsRoverRotates90Degrees
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'l'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $W).! !

!methodRemoval: MarsRoverTests #test05 stamp: 'EMI 10/24/2020 18:39:30'!
test05
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'l'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $W).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:40:02'!
test07MarsRoverMovesMoreThanOneStep
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'ff'.
	self assert: (rover position = (-1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test07 stamp: 'EMI 10/24/2020 18:40:02'!
test07
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'ff'.
	self assert: (rover position = (-1@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:40:58'!
test09MarsRoverRotatesMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !

!methodRemoval: MarsRoverTests #test09 stamp: 'EMI 10/24/2020 18:40:58'!
test09
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:43:44'!
test11MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'er'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test11 stamp: 'EMI 10/24/2020 18:43:44'!
test11
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'er'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:47:14'!
test12MarsRoveRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).! !

!methodRemoval: MarsRoverTests #test12 stamp: 'EMI 10/24/2020 18:47:14'!
test12
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:47:28'!
test12MarsRoverRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).! !

!methodRemoval: MarsRoverTests #test12MarsRoveRotatesAndMovesOneStepOrMore stamp: 'EMI 10/24/2020 18:47:28'!
test12MarsRoveRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/24/2020 18:49:04'!
test14CannotCreateMarsRoverWithWrongOrientation
	self should: [MarsRover at: 1@1 withOrientation: $Z.] 
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText = MarsRover invalidOrientationErrorMessage ].
	
! !

!methodRemoval: MarsRoverTests #test14 stamp: 'EMI 10/24/2020 18:49:04'!
test14
	self should: [MarsRover at: 1@1 withOrientation: $Z.] 
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText = MarsRover invalidOrientationErrorMessage ].
	
!

----SNAPSHOT----(24 October 2020 18:49:11) CuisUniversity-4383.image priorSource: 17360550!

!testRun: #MarsRoverTests #test01MarsRoverReceivingNoInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverReceivingEmptyInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverMovesOneStep stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverRotates90Degrees stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test10 stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test12MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test13 stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

!testRun: #MarsRoverTests #test14CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/24/2020 18:49:15'!
PASSED!

----SNAPSHOT----(24 October 2020 18:50:08) CuisUniversity-4383.image priorSource: 17368306!

----SNAPSHOT----(24 October 2020 18:51:54) CuisUniversity-4383.image priorSource: 17369809!
!MarsRover methodsFor: 'initialize' stamp: 'EMI 10/24/2020 18:54:29' prior: 50874113!
initializeAt: aPoint withOrientation: aCardinalCharacter 
	position _ aPoint.
	(#($N $W $S $E) includes: aCardinalCharacter) ifFalse: [^Error signal: self class invalidOrientationErrorMessage.].
	orientation _ aCardinalCharacter.
	
	rotationsCounterClockwise _ Dictionary new.
	rotationsCounterClockwise at:$N put:$W.
	rotationsCounterClockwise at:$W put:$S.
	rotationsCounterClockwise at:$S put:$E.
	rotationsCounterClockwise at:$E put:$N.
	
	rotationsClockwise _ Dictionary new.
	rotationsClockwise at:$N put:$E.
	rotationsClockwise at:$E put:$S.
	rotationsClockwise at:$S put:$W.
	rotationsClockwise at:$W put:$N.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'EMI 10/24/2020 18:54:49' prior: 50869486!
at: aPoint withOrientation: aCardinalCharacter
	^self new initializeAt: aPoint withOrientation: aCardinalCharacter. ! !

----SNAPSHOT----(24 October 2020 18:57:33) CuisUniversity-4383.image priorSource: 17369902!
!MarsRover methodsFor: 'instructions - private' stamp: 'EMI 10/24/2020 19:00:02' prior: 50873949!
rotateRight
	self rotate: rotationsClockwise.
! !

----SNAPSHOT----(24 October 2020 19:00:25) CuisUniversity-4383.image priorSource: 17370967!

!methodRemoval: MarsRoverTests #test04 stamp: 'EMI 10/24/2020 19:00:39'!
test04
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'b'.
	self assert: (rover position = (2@1)).
	self assert: (rover orientation = $N).!

!methodRemoval: MarsRoverTests #test06 stamp: 'EMI 10/24/2020 19:00:43'!
test06
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'r'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $E).!

!methodRemoval: MarsRoverTests #test08 stamp: 'EMI 10/24/2020 19:00:51'!
test08
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'bb'.
	self assert: (rover position = (3@1)).
	self assert: (rover orientation = $N).!

!methodRemoval: MarsRoverTests #test10 stamp: 'EMI 10/24/2020 19:00:57'!
test10
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'rr'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).!

!methodRemoval: MarsRoverTests #test13 stamp: 'EMI 10/24/2020 19:01:05'!
test13
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'rb'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $E).!

----SNAPSHOT----(24 October 2020 19:01:19) CuisUniversity-4383.image priorSource: 17371217!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/24/2020 19:01:47'!
test04MarsRoverRotates90Degrees
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'l'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $W).! !

!methodRemoval: MarsRoverTests #test05MarsRoverRotates90Degrees stamp: 'EMI 10/24/2020 19:01:47'!
test05MarsRoverRotates90Degrees
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'l'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $W).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/24/2020 19:01:55'!
test05MarsRoverMovesMoreThanOneStep
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'ff'.
	self assert: (rover position = (-1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test07MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/24/2020 19:01:55'!
test07MarsRoverMovesMoreThanOneStep
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'ff'.
	self assert: (rover position = (-1@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/24/2020 19:02:06'!
test06MarsRoverRotatesMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !

!methodRemoval: MarsRoverTests #test09MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/24/2020 19:02:06'!
test09MarsRoverRotatesMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/24/2020 19:02:16'!
test07MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'er'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test11MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/24/2020 19:02:16'!
test11MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'er'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/24/2020 19:02:25'!
test08MarsRoverRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).! !

!methodRemoval: MarsRoverTests #test12MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/24/2020 19:02:25'!
test12MarsRoverRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/24/2020 19:02:39'!
test09CannotCreateMarsRoverWithWrongOrientation
	self should: [MarsRover at: 1@1 withOrientation: $Z.] 
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText = MarsRover invalidOrientationErrorMessage ].
	
! !

!methodRemoval: MarsRoverTests #test14CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/24/2020 19:02:39'!
test14CannotCreateMarsRoverWithWrongOrientation
	self should: [MarsRover at: 1@1 withOrientation: $Z.] 
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText = MarsRover invalidOrientationErrorMessage ].
	
!

----SNAPSHOT----(24 October 2020 19:02:50) CuisUniversity-4383.image priorSource: 17372583!
!MarsRover methodsFor: 'instructions - private' stamp: 'EMI 10/24/2020 19:12:13'!
moveOnAxisX: offX andAxisY: offY
	position _ position + (offX@offY).
! !
!MarsRover methodsFor: 'instructions - private' stamp: 'EMI 10/24/2020 19:12:41' prior: 50874668!
moveOnAxisX: aXAxisOffset andAxisY: offY
	position _ position + (aXAxisOffset@offY).
! !
!MarsRover methodsFor: 'instructions - private' stamp: 'EMI 10/24/2020 19:13:13' prior: 50874674!
moveOnAxisX: aXAxisOffset andAxisY: aYAxisOffset
	position _ position + (aXAxisOffset@aYAxisOffset).
! !
!MarsRover methodsFor: 'instructions - private' stamp: 'EMI 10/24/2020 19:17:12' prior: 50873986!
oneStep: anInstructionsCharacter
	| pasoSobreEje |
	pasoSobreEje _ anInstructionsCharacter = $f ifTrue:[1] ifFalse:[-1].
	orientation = $W ifTrue:[self moveOnAxisX: 0 andAxisY: pasoSobreEje negated] .
	orientation = $N ifTrue: [self moveOnAxisX: pasoSobreEje negated andAxisY: 0 ].
	orientation = $S ifTrue: [self moveOnAxisX: pasoSobreEje andAxisY: 0].
	orientation = $E ifTrue: [self moveOnAxisX: 0 andAxisY: pasoSobreEje].
! !

!testRun: #MarsRoverTests #test01MarsRoverReceivingNoInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/24/2020 19:17:22'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverReceivingEmptyInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/24/2020 19:17:22'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverMovesOneStep stamp: 'EMI 10/24/2020 19:17:22'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverRotates90Degrees stamp: 'EMI 10/24/2020 19:17:22'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/24/2020 19:17:22'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/24/2020 19:17:22'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/24/2020 19:17:22'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/24/2020 19:17:22'!
PASSED!

!testRun: #MarsRoverTests #test09CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/24/2020 19:17:22'!
PASSED!
!MarsRover methodsFor: 'instructions - private' stamp: 'EMI 10/24/2020 19:18:04' prior: 50874687!
oneStep: anInstructionsCharacter
	| pasoSobreEje |
	pasoSobreEje _ anInstructionsCharacter = $f ifTrue:[1] ifFalse:[-1].
	orientation = $W ifTrue:[self moveOnAxisX: 0 andAxisY: pasoSobreEje negated].
	orientation = $N ifTrue: [self moveOnAxisX: pasoSobreEje negated andAxisY: 0 ].
	orientation = $S ifTrue: [self moveOnAxisX: pasoSobreEje andAxisY: 0].
	orientation = $E ifTrue: [self moveOnAxisX: 0 andAxisY: pasoSobreEje].
! !
!MarsRover methodsFor: 'instructions - private' stamp: 'EMI 10/24/2020 19:18:27' prior: 50874736!
oneStep: anInstructionsCharacter
	| stepOverAxis |
	stepOverAxis _ anInstructionsCharacter = $f ifTrue:[1] ifFalse:[-1].
	orientation = $W ifTrue:[self moveOnAxisX: 0 andAxisY: stepOverAxis negated].
	orientation = $N ifTrue: [self moveOnAxisX: stepOverAxis negated andAxisY: 0 ].
	orientation = $S ifTrue: [self moveOnAxisX: stepOverAxis andAxisY: 0].
	orientation = $E ifTrue: [self moveOnAxisX: 0 andAxisY: stepOverAxis].
! !

!testRun: #MarsRoverTests #test01MarsRoverReceivingNoInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/24/2020 19:22:11'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverReceivingEmptyInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/24/2020 19:22:11'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverMovesOneStep stamp: 'EMI 10/24/2020 19:22:11'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverRotates90Degrees stamp: 'EMI 10/24/2020 19:22:11'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/24/2020 19:22:11'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/24/2020 19:22:11'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/24/2020 19:22:11'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/24/2020 19:22:11'!
PASSED!

!testRun: #MarsRoverTests #test09CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/24/2020 19:22:11'!
PASSED!

----SNAPSHOT----(24 October 2020 19:23:21) CuisUniversity-4383.image priorSource: 17376452!

----QUIT----(24 October 2020 19:23:31) CuisUniversity-4383.image priorSource: 17380813!

----STARTUP---- (26 October 2020 08:52:34) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!MarsRover class methodsFor: 'error messages' stamp: 'EMI 10/26/2020 08:53:48'!
invalidInstructionErrorMessage
	^'Invalid instruction detected'.! !
!MarsRover methodsFor: 'instructions' stamp: 'EMI 10/26/2020 08:54:32' prior: 50873970!
receiveInstructions: anInstructionsString
	anInstructionsString isEmpty 
	ifFalse:[
		anInstructionsString do: [:aCharacter |
			(#($f $b $l $r) includes: aCharacter) ifFalse:[^Error signal: self class invalidInstructionErrorMessage ].
			aCharacter = $f ifTrue: [self oneStepFoward.].
			aCharacter = $b ifTrue: [self oneStepBackwards.].
			aCharacter = $l ifTrue: [self rotateLeft.].
			aCharacter = $r ifTrue: [self rotateRight.].
		].
	].! !
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 08:56:00' prior: 50874604!
test07MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	
	self should: [rover receiveInstructions: 'er'.] 
	raise: Error 
	withExceptionDo: [
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $N)
				].		! !

!testRun: #MarsRoverTests #test01MarsRoverReceivingNoInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 08:56:03'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverReceivingEmptyInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 08:56:03'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverMovesOneStep stamp: 'EMI 10/26/2020 08:56:03'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverRotates90Degrees stamp: 'EMI 10/26/2020 08:56:03'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/26/2020 08:56:03'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/26/2020 08:56:03'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 08:56:03'!
ERROR!

!testRun: #MarsRoverTests #test08MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/26/2020 08:56:03'!
PASSED!

!testRun: #MarsRoverTests #test09CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/26/2020 08:56:03'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 08:56:03'!
ERROR!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 08:56:22' prior: 50874832!
test07MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	
	self should: [rover receiveInstructions: 'er'.] 
	raise: Error 
	withExceptionDo: [:anError |
		
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $N)
				].		! !
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 08:57:24' prior: 50874880!
test07MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	
	self should: [rover receiveInstructions: 'er'.] 
	raise: Error 
	withExceptionDo: [:anError |
					self assert: anError messageText = MarsRover invalidInstructionErrorMessage.
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $N)
				].		! !

!testRun: #MarsRoverTests #test01MarsRoverReceivingNoInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 08:57:29'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverReceivingEmptyInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 08:57:29'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverMovesOneStep stamp: 'EMI 10/26/2020 08:57:29'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverRotates90Degrees stamp: 'EMI 10/26/2020 08:57:29'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/26/2020 08:57:29'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/26/2020 08:57:29'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 08:57:29'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/26/2020 08:57:29'!
PASSED!

!testRun: #MarsRoverTests #test09CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/26/2020 08:57:29'!
PASSED!

----SNAPSHOT----(26 October 2020 08:57:33) CuisUniversity-4383.image priorSource: 17380906!

----QUIT----(26 October 2020 08:57:36) CuisUniversity-4383.image priorSource: 17385254!

----STARTUP---- (26 October 2020 14:03:33) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


!testRun: #MarsRoverTests #test01MarsRoverReceivingNoInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 14:03:38'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverReceivingEmptyInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 14:03:38'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverMovesOneStep stamp: 'EMI 10/26/2020 14:03:38'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverRotates90Degrees stamp: 'EMI 10/26/2020 14:03:38'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/26/2020 14:03:38'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/26/2020 14:03:38'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 14:03:38'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/26/2020 14:03:38'!
PASSED!

!testRun: #MarsRoverTests #test09CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/26/2020 14:03:38'!
PASSED!

----SNAPSHOT----(26 October 2020 14:03:42) CuisUniversity-4383.image priorSource: 17385347!

----QUIT----(26 October 2020 14:03:53) CuisUniversity-4383.image priorSource: 17386568!

----STARTUP---- (26 October 2020 15:31:29) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 15:36:49' prior: 50874893!
test07MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	
	self should: [rover receiveInstructions: 'ref'.] 
	raise: Error 
	withExceptionDo: [:anError |
					self assert: anError messageText = MarsRover invalidInstructionErrorMessage.
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $W)
				].		! !

!testRun: #MarsRoverTests #test01MarsRoverReceivingNoInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 15:36:52'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverReceivingEmptyInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 15:36:52'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverMovesOneStep stamp: 'EMI 10/26/2020 15:36:52'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverRotates90Degrees stamp: 'EMI 10/26/2020 15:36:52'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/26/2020 15:36:52'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/26/2020 15:36:52'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 15:36:52'!
FAILURE!

!testRun: #MarsRoverTests #test08MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/26/2020 15:36:52'!
PASSED!

!testRun: #MarsRoverTests #test09CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/26/2020 15:36:52'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 15:36:52'!
FAILURE!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 15:37:08' prior: 50874990!
test07MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	
	self should: [rover receiveInstructions: 'ref'.] 
	raise: Error 
	withExceptionDo: [:anError |
					self assert: anError messageText = MarsRover invalidInstructionErrorMessage.
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $E)
				].		! !

!testRun: #MarsRoverTests #test01MarsRoverReceivingNoInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 15:37:12'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverReceivingEmptyInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 15:37:12'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverMovesOneStep stamp: 'EMI 10/26/2020 15:37:12'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverRotates90Degrees stamp: 'EMI 10/26/2020 15:37:12'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/26/2020 15:37:12'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/26/2020 15:37:12'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 15:37:12'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/26/2020 15:37:12'!
PASSED!

!testRun: #MarsRoverTests #test09CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/26/2020 15:37:12'!
PASSED!

----SNAPSHOT----(26 October 2020 15:37:18) CuisUniversity-4383.image priorSource: 17386661!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:09:15' prior: 50875041!
test07MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	self should: [rover receiveInstructions: 'ref'.] 
	raise: Error 
	withExceptionDo: [:anError |
					self assert: anError messageText = MarsRover invalidInstructionErrorMessage.
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $E)
				].		! !
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:24:11'!
test04MarsRoverMovesOneStepBackwards
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'b'.
	self assert: (rover position = (2@1)).
	self assert: (rover orientation = $N).! !
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:24:51'!
test05MarsRoverRotates90DegreesLeft
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'l'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $W).! !

!methodRemoval: MarsRoverTests #test04MarsRoverRotates90Degrees stamp: 'EMI 10/26/2020 16:24:51'!
test04MarsRoverRotates90Degrees
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'l'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $W).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:25:04'!
test06MarsRoverRotates90DegreesRight
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'l'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $W).! !
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:25:25'!
test07MarsRoverMovesMoreThanOneStep
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'ff'.
	self assert: (rover position = (-1@1)).
	self assert: (rover orientation = $N).! !

!methodRemoval: MarsRoverTests #test05MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/26/2020 16:25:25'!
test05MarsRoverMovesMoreThanOneStep
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'ff'.
	self assert: (rover position = (-1@1)).
	self assert: (rover orientation = $N).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:25:36' prior: 50875134!
test06MarsRoverRotates90DegreesRight
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'r'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $E).! !
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:25:51'!
test07MarsRoverRotatesMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !

!methodRemoval: MarsRoverTests #test06MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/26/2020 16:25:51'!
test06MarsRoverRotatesMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:26:06'!
test08MarsRoverRotatesMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !

!methodRemoval: MarsRoverTests #test07MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/26/2020 16:26:06'!
test07MarsRoverRotatesMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:26:17'!
test09MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	self should: [rover receiveInstructions: 'ref'.] 
	raise: Error 
	withExceptionDo: [:anError |
					self assert: anError messageText = MarsRover invalidInstructionErrorMessage.
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $E)
				].		! !

!methodRemoval: MarsRoverTests #test07MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 16:26:17'!
test07MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	self should: [rover receiveInstructions: 'ref'.] 
	raise: Error 
	withExceptionDo: [:anError |
					self assert: anError messageText = MarsRover invalidInstructionErrorMessage.
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $E)
				].		!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:26:29'!
test10MarsRoverRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).! !

!methodRemoval: MarsRoverTests #test08MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/26/2020 16:26:29'!
test08MarsRoverRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:26:41'!
test11MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	self should: [rover receiveInstructions: 'ref'.] 
	raise: Error 
	withExceptionDo: [:anError |
					self assert: anError messageText = MarsRover invalidInstructionErrorMessage.
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $E)
				].		! !

!methodRemoval: MarsRoverTests #test09MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 16:26:41'!
test09MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	self should: [rover receiveInstructions: 'ref'.] 
	raise: Error 
	withExceptionDo: [:anError |
					self assert: anError messageText = MarsRover invalidInstructionErrorMessage.
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $E)
				].		!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:27:51'!
test08MarsRoverMovesMoreThanOneStepBackwards
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'bb'.
	self assert: (rover position = (3@1)).
	self assert: (rover orientation = $N).! !
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:28:03'!
test09MarsRoverRotatesMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !

!methodRemoval: MarsRoverTests #test08MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/26/2020 16:28:03'!
test08MarsRoverRotatesMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:28:12'!
test11CannotCreateMarsRoverWithWrongOrientation
	self should: [MarsRover at: 1@1 withOrientation: $Z.] 
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText = MarsRover invalidOrientationErrorMessage ].
	
! !

!methodRemoval: MarsRoverTests #test09CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/26/2020 16:28:12'!
test09CannotCreateMarsRoverWithWrongOrientation
	self should: [MarsRover at: 1@1 withOrientation: $Z.] 
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText = MarsRover invalidOrientationErrorMessage ].
	
!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:28:27'!
test12MarsRoverRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).! !

!methodRemoval: MarsRoverTests #test10MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/26/2020 16:28:27'!
test10MarsRoverRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:28:52'!
test10MarsRoverRotatesRightMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'rr'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:29:09'!
test09MarsRoverRotatesLeftMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).! !

!methodRemoval: MarsRoverTests #test09MarsRoverRotatesMoreThanOnce stamp: 'EMI 10/26/2020 16:29:09'!
test09MarsRoverRotatesMoreThanOnce
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'll'.
	self assert: (rover position = (1@1)).
	self assert: (rover orientation = $S).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:29:42'!
test11MarsRoverRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).! !

!methodRemoval: MarsRoverTests #test12MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/26/2020 16:29:42'!
test12MarsRoverRotatesAndMovesOneStepOrMore
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	rover receiveInstructions: 'lf'.
	self assert: (rover position = (1@0)).
	self assert: (rover orientation = $W).!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:29:52'!
test12CannotCreateMarsRoverWithWrongOrientation
	self should: [MarsRover at: 1@1 withOrientation: $Z.] 
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText = MarsRover invalidOrientationErrorMessage ].
	
! !

!methodRemoval: MarsRoverTests #test11CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/26/2020 16:29:52'!
test11CannotCreateMarsRoverWithWrongOrientation
	self should: [MarsRover at: 1@1 withOrientation: $Z.] 
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText = MarsRover invalidOrientationErrorMessage ].
	
!
!MarsRoverTests methodsFor: 'tests' stamp: 'EMI 10/26/2020 16:29:59'!
test13MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	self should: [rover receiveInstructions: 'ref'.] 
	raise: Error 
	withExceptionDo: [:anError |
					self assert: anError messageText = MarsRover invalidInstructionErrorMessage.
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $E)
				].		! !

!methodRemoval: MarsRoverTests #test11MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 16:29:59'!
test11MarsRoverStopsProcessingOnInvalidInstruction
	| rover |
	rover _ MarsRover at: 1@1 withOrientation: $N.
	
	self should: [rover receiveInstructions: 'ref'.] 
	raise: Error 
	withExceptionDo: [:anError |
					self assert: anError messageText = MarsRover invalidInstructionErrorMessage.
					self assert: (rover position = (1@1)).
					self assert: (rover orientation = $E)
				].		!

----SNAPSHOT----(26 October 2020 16:30:23) CuisUniversity-4383.image priorSource: 17389991!

!testRun: #MarsRoverTests #test01MarsRoverReceivingNoInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test02MarsRoverReceivingEmptyInstructionsDoesNotMoveNorRotate stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test03MarsRoverMovesOneStep stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test04MarsRoverMovesOneStepBackwards stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test05MarsRoverRotates90DegreesLeft stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test06MarsRoverRotates90DegreesRight stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test07MarsRoverMovesMoreThanOneStep stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test08MarsRoverMovesMoreThanOneStepBackwards stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test09MarsRoverRotatesLeftMoreThanOnce stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test10MarsRoverRotatesRightMoreThanOnce stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test11MarsRoverRotatesAndMovesOneStepOrMore stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test12CannotCreateMarsRoverWithWrongOrientation stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!

!testRun: #MarsRoverTests #test13MarsRoverStopsProcessingOnInvalidInstruction stamp: 'EMI 10/26/2020 16:30:26'!
PASSED!
!MarsRover methodsFor: 'instructions - private' stamp: 'EMI 10/26/2020 16:31:32' prior: 50874680!
moveOnAxisX: anXAxisOffset andAxisY: aYAxisOffset
	position _ position + (anXAxisOffset@aYAxisOffset).
! !
!MarsRover methodsFor: 'instructions - private' stamp: 'EMI 10/26/2020 16:31:41' prior: 50875511!
moveOnAxisX: anXAxisOffset andAxisY: anYAxisOffset
	position _ position + (anXAxisOffset@anYAxisOffset).
! !

----SNAPSHOT----(26 October 2020 16:35:23) CuisUniversity-4383.image priorSource: 17401949!

----QUIT----(26 October 2020 16:35:37) CuisUniversity-4383.image priorSource: 17403948!

----STARTUP---- (29 October 2020 17:13:27) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


!classRemoval: #MarsRover stamp: 'EMI 10/29/2020 17:13:44'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation rotationsCounterClockwise rotationsClockwise'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

!classRemoval: #MarsRoverTests stamp: 'EMI 10/29/2020 17:13:45'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioMarsRover'!

TestSuite subclass: #TerniLapilliTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTests category: 'TerniLapilli' stamp: 'EMI 10/29/2020 17:22:11'!
TestSuite subclass: #TerniLapilliTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTests methodsFor: 'nil' stamp: 'EMI 10/29/2020 17:23:34'!
test01! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:23:37'!
test02! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:23:39'!
test03! !

Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 17:28:37'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:30:38'!
test01TerniLapilliNewGameNotOver! !

!methodRemoval: TerniLapilliTests #test01 stamp: 'EMI 10/29/2020 17:30:38'!
test01!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:32:18' prior: 50875581!
test01TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self deny: partida isOver.
	self deny: partida isTied.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !
!TerniLapilli class methodsFor: 'nil' stamp: 'EMI 10/29/2020 17:32:54'!
newGame
	^self new.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:33:48'!
test02TerniLapilliXPlaysFirst! !

!methodRemoval: TerniLapilliTests #test02 stamp: 'EMI 10/29/2020 17:33:48'!
test02!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:34:06' prior: 50875602!
test02TerniLapilliXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:34:13' prior: 50875588!
test01TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
	self deny: partida isTied.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:35:28'!
test03TerniLapilliNewGameHasNoWinner! !

!methodRemoval: TerniLapilliTests #test03 stamp: 'EMI 10/29/2020 17:35:28'!
test03!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:35:46' prior: 50875626!
test03TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:35:56' prior: 50875617!
test01TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
	self deny: partida isTied.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:36:08' prior: 50875641!
test01TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:36:17' prior: 50875633!
test03TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.! !
!TerniLapilli methodsFor: 'nil' stamp: 'EMI 10/29/2020 17:36:37'!
isPlayingX! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:36:45'!
isPlayingO! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:36:56'!
isOver! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:36:59'!
isTied! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:37:09'!
hasPlayerXWon! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:37:12'!
hasPlayerOWon! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:37:34'!
putXAt: aPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:37:37'!
putOAt: aPosition! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:49:42'!
test04TerniLapilliNewGamePlaxerXCanPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:50:04'!
test05TerniLapilliNewGamePlayerOCantPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:50:13'!
test04TerniLapilliNewGamePlayerXCanPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.! !

!methodRemoval: TerniLapilliTests #test04TerniLapilliNewGamePlaxerXCanPutPiece stamp: 'EMI 10/29/2020 17:50:14'!
test04TerniLapilliNewGamePlaxerXCanPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:51:55' prior: 50875709!
test04TerniLapilliNewGamePlayerXCanPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	 ! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:52:03' prior: 50875700!
test05TerniLapilliNewGamePlayerOCantPutPiece
	| partida |
	partida _ TerniLapilli newGame.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:59:59'!
test06TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:00:09'!
test07TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
! !

!methodRemoval: TerniLapilliTests #test05TerniLapilliNewGamePlayerOCantPutPiece stamp: 'EMI 10/29/2020 18:00:20'!
test05TerniLapilliNewGamePlayerOCantPutPiece
	| partida |
	partida _ TerniLapilli newGame.
!

!methodRemoval: TerniLapilliTests #test04TerniLapilliNewGamePlayerXCanPutPiece stamp: 'EMI 10/29/2020 18:00:24'!
test04TerniLapilliNewGamePlayerXCanPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	 !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:00:36'!
test04TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
! !

!methodRemoval: TerniLapilliTests #test01TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:00:36'!
test01TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:00:43'!
test05TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
! !

!methodRemoval: TerniLapilliTests #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:00:43'!
test04TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:00:51'!
test01TerniLapilliXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.! !

!methodRemoval: TerniLapilliTests #test02TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:00:51'!
test02TerniLapilliXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:01:01'!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
! !

!methodRemoval: TerniLapilliTests #test06TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:01:01'!
test06TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:01:11'!
test04TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.! !

!methodRemoval: TerniLapilliTests #test03TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:01:11'!
test03TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:01:18'!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
! !

!methodRemoval: TerniLapilliTests #test07TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:01:18'!
test07TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:01:40' prior: 50875804!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:02:30' prior: 50875845!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	self assert: partida isPlayingO.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:02:50' prior: 50875833!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putOAt: 0@0.
	self assert: partida isPlayingX.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:03:13' prior: 50875859!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	self assert: partida isPlayingX.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:08:26' prior: 50875815!
test04TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !

!methodRemoval: TerniLapilli #isTied stamp: 'EMI 10/29/2020 18:08:35'!
isTied!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:12:29'!
test04TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
! !

!methodRemoval: TerniLapilliTests #test05TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:12:29'!
test05TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:12:41'!
test05TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !

!methodRemoval: TerniLapilliTests #test04TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:12:41'!
test04TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.!
!TerniLapilli methodsFor: 'nil' stamp: 'EMI 10/29/2020 18:14:32' overrides: 16896425!
initialize! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 18:17:02' prior: 50875914 overrides: 16896425!
initialize! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:17:32' prior: 50875664!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:17:59' prior: 50875667!
isPlayingO
	^false.! !

!classRenamed: #TerniLapilliTests as: #TerniLapilliTest stamp: 'EMI 10/29/2020 18:18:35'!
Smalltalk renameClassNamed: #TerniLapilliTests as: #TerniLapilliTest!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'EMI 10/29/2020 18:21:07'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:21:14'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:21:14'!
FAILURE!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:21:14'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:21:14'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:21:14'!
ERROR!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:22:06' prior: 50875867!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:25:50' prior: 50875851!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.
! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:27:33'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:27:33'!
FAILURE!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:27:33'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:27:33'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:27:33'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:29:28'!
countPiecesPlayed! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:30:04' prior: 50875972!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.
	self assert: partida countPiecesPlayed equals: 1.
! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:30:14' prior: 50875963!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 2.
! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:31:12'!
test06TerniLapilliNewGameHasNoPieces
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:31:19' prior: 50876021!
test06TerniLapilliNewGameHasNoPieces
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida countPiecesPlayed equals: 0.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:31:24'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:31:24'!
FAILURE!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:31:24'!
FAILURE!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:31:24'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:31:24'!
ERROR!

!testRun: #TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:31:24'!
FAILURE!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:32:00'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 18:33:26'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:33:35' prior: 50875922!
isPlayingX
	^isXTurn.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:33:46' prior: 50875926!
isPlayingO
	^isXTurn not.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 18:33:58' prior: 50875599!
newGame
	^self new initialize .! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 18:34:09' prior: 50875918 overrides: 16896425!
initialize
	isXTurn _ true.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:34:29' prior: 50875997!
countPiecesPlayed
	^1.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:34:32'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:34:32'!
FAILURE!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:34:32'!
FAILURE!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:34:32'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:34:32'!
ERROR!

!testRun: #TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:34:32'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:35:06' prior: 50875684!
putXAt: aPosition
	isXTurn _ false.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:35:12'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:35:12'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:35:12'!
FAILURE!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:35:12'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:35:12'!
ERROR!

!testRun: #TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:35:12'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:36:07' prior: 50875688!
putOAt: aPosition
	isXTurn _ true.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 18:36:32'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn countPieces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:36:30' prior: 50876139!
putOAt: aPosition
	isXTurn _ true.
	countPieces _ countPieces + 1.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:36:45' prior: 50876114!
putXAt: aPosition
	isXTurn _ false.
	countPieces _ countPieces + 1.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 18:37:02' prior: 50876086 overrides: 16896425!
initialize
	isXTurn _ true.
	countPieces _ 0.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:37:06'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:37:06'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:37:06'!
FAILURE!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:37:06'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:37:06'!
ERROR!

!testRun: #TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:37:06'!
FAILURE!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:37:17'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:37:50' prior: 50876090!
countPiecesPlayed
	^countPieces .! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:37:53' prior: 50876191!
countPiecesPlayed
	^countPieces.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:37:58'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:37:58'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:37:58'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:37:58'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:37:58'!
ERROR!

!testRun: #TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:37:58'!
PASSED!

!methodRemoval: TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:39:17'!
test06TerniLapilliNewGameHasNoPieces
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida countPiecesPlayed equals: 0.!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:39:21'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:39:21'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:39:21'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:39:21'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:39:21'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:39:37' prior: 50875670!
isOver
	^false.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:39:40'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:39:40'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:39:40'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:39:40'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:39:40'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:39:40'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:40:09'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:40:48' prior: 50875676!
hasPlayerXWon
	^false.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:40:55' prior: 50875680!
hasPlayerOWon
	^false.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:40:58'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:40:58'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:40:58'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:40:58'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:40:58'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:42:33'!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:45:30' prior: 50876294!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | ].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:45:54' prior: 50876302!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | ].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | ].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:47:01' prior: 50876315!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli class cannotPlaceMoreThan3PiecesError].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli class cannotPlaceMoreThan3PiecesError].
	! !
!TerniLapilli class methodsFor: 'nil' stamp: 'EMI 10/29/2020 18:48:51'!
cannotPlaceMoreThan3PiecesError
	^'Cannot place more than 3 pieces per player'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:49:33'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:49:33'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:49:33'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:49:33'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:49:33'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:49:33'!
FAILURE!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:49:33'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn countPieces piecesX piecesO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 18:50:40'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn countPieces piecesX piecesO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:50:56' prior: 50876157!
putXAt: aPosition
	isXTurn _ false.
	countPieces _ countPieces + 1.
	piecesX _ piecesX + 1.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:51:10' prior: 50876151!
putOAt: aPosition
	isXTurn _ true.
	countPieces _ countPieces + 1.
	piecesO _ piecesO + 1.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 18:51:35' prior: 50876163 overrides: 16896425!
initialize
	isXTurn _ true.
	countPieces _ 0.
	piecesX _ 0.
	piecesO _ 0.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:53:00' prior: 50876400!
putOAt: aPosition
	piecesO > 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	countPieces _ countPieces + 1.
	piecesO _ piecesO + 1.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:53:10' prior: 50876394!
putXAt: aPosition
	piecesX > 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	countPieces _ countPieces + 1.
	piecesX _ piecesX + 1.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:53:14'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:53:14'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:53:14'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:53:14'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:53:14'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:53:14'!
FAILURE!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:53:14'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:53:40' prior: 50876413!
putOAt: aPosition
	piecesO = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	countPieces _ countPieces + 1.
	piecesO _ piecesO + 1.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:53:45' prior: 50876422!
putXAt: aPosition
	piecesX = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	countPieces _ countPieces + 1.
	piecesX _ piecesX + 1.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:53:48'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:53:48'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:53:48'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:53:48'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:53:48'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:53:48'!
ERROR!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:53:48'!
ERROR!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:54:13' prior: 50876331!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:58:57'!
test07PlayerWonInThreeRounds
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:59:59' prior: 50876536!
test07PlayerWonInThreeRounds
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerWonInThreeRounds stamp: 'EMI 10/29/2020 19:00:27'!
FAILURE!

!testRun: #TerniLapilliTest #test07PlayerWonInThreeRounds stamp: 'EMI 10/29/2020 19:00:27'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn board countPieces piecesX piecesO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 19:08:28'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn board countPieces piecesX piecesO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 19:08:43' prior: 50876407 overrides: 16896425!
initialize
	isXTurn _ true.
	countPieces _ 0.
	piecesX _ 0.
	piecesO _ 0.
	board _ OrderedCollection new.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:09:55' prior: 50876455!
putOAt: aPosition
	piecesO = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	countPieces _ countPieces + 1.
	piecesO _ piecesO + 1.
	board put: #($O aPosition).! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:10:51' prior: 50876464!
putXAt: aPosition
	piecesX = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	countPieces _ countPieces + 1.
	piecesX _ piecesX + 1.
	board put: #($X aPosition).! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:13:37' prior: 50876627!
putXAt: aPosition
	piecesX = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	countPieces _ countPieces + 1.
	piecesX _ piecesX + 1.
	board put: #($X aPosition).! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:20:57' prior: 50876617!
putOAt: aPosition
	piecesO = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	countPieces _ countPieces + 1.
	piecesO _ piecesO + 1.
	board put: #($O aPosition).! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 19:21:33' prior: 50876610 overrides: 16896425!
initialize
	isXTurn _ true.
	piecesX _ OrderedCollection new.
	piecesO _ OrderedCollection new.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 19:21:52' prior: 50876195!
countPiecesPlayed
	^piecesX size + piecesO size.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:22:23' prior: 50876647!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO put: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:22:44' prior: 50876637!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	piecesX put: aPosition.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 19:23:32' prior: 50875789!
test01TerniLapilliXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 19:23:54'!
test07PlayerOWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !

!methodRemoval: TerniLapilliTest #test07PlayerWonInThreeRounds stamp: 'EMI 10/29/2020 19:23:54'!
test07PlayerWonInThreeRounds
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:36:08' prior: 50876668!
putOAt: aPosition
	|f1 f2|
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO put: aPosition.
	
	f1 _ piecesO at:0.
	f2 _ (piecesO select: [:aPos | f1 eightNeighbors includes: aPos]) at: 0.
	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:20:54' prior: 50876719!
putOAt: aPosition
	
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO put: aPosition.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:21:16' prior: 50876730!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO put: aPosition.
	self checkIfPlayerWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:21:28' prior: 50876738!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO put: aPosition.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:21:36' prior: 50876676!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	piecesX put: aPosition.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:21:39' prior: 50876756!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	piecesX put: aPosition.
	self checkIfPlayerXWon.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 20:23:08'!
test08PlayerXWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 20:23:18' prior: 50876773!
test08PlayerXWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 20:23:41' prior: 50876786!
test08PlayerXWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 0@2.
	
	self assert: partida isOver.
	self deny: partida hasPlayerOWon.
	self assert: partida hasPlayerXWon.
	! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesX piecesO gameEnded'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 20:25:38'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesX piecesO gameEnded'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 20:25:45' prior: 50876243!
isOver
	^gameEnded.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 20:27:40'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesX piecesO gameEnded xIsWinner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 20:27:37' prior: 50876270!
hasPlayerXWon
	^gameEnded and: [xIsWinner].! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 20:28:10' prior: 50876274!
hasPlayerOWon
	^gameEnded and: [xIsWinner not].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:29:43'!
checkIfPlayerXWon! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:30:29' prior: 50876846!
checkIfPlayerXWon
	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:31:47' prior: 50876850!
checkIfPlayerXWon
	xIsWinner _ self checkHorizontalLine: piecesX.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:32:21'!
checkHorizontalLine: aPiecesCollection! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:38:18' prior: 50876859!
checkHorizontalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first - 0@1].
	estanALaDer _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first + 0@2].
	estanALaIzq _ (aPiecesCollection includes: (first - 0@1)) and: [aPiecesCollection includes: first - 0@2].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:38:34'!
checkVerticalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first - 0@1].
	estanALaDer _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first + 0@2].
	estanALaIzq _ (aPiecesCollection includes: (first - 0@1)) and: [aPiecesCollection includes: first - 0@2].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:39:15' prior: 50876883!
checkVerticalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanALaDer _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanALaIzq _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:39:29' prior: 50876902!
checkVerticalLine: aPiecesCollection
	|first estanArriba estanALaDer estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanALaDer _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanArriba _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanALaDer or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:39:39' prior: 50876921!
checkVerticalLine: aPiecesCollection
	|first estanArriba estanAbajo estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanAbajo _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanArriba _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:41:44'!
checkDiagonalLine: aPiecesCollection
	|first estanArriba estanAbajo estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanAbajo _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanArriba _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:44:26' prior: 50876959!
checkDiagonalLine: aPiecesCollection
	|first estanArriba estanAbajo estanAmbosLados puntosConDiagonal|
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanAbajo _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanArriba _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:45:11' prior: 50876978!
checkDiagonalLine: aPiecesCollection
	|center estanArriba estanAbajo estanAmbosLados |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (center + 1@0)) and: [aPiecesCollection includes: center - 1@0].
	estanAbajo _ (aPiecesCollection includes: (center + 1@0)) and: [aPiecesCollection includes: center + 2@0].
	estanArriba _ (aPiecesCollection includes: (center - 1@0)) and: [aPiecesCollection includes: center - 2@0].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:47:29' prior: 50876999!
checkDiagonalLine: aPiecesCollection
	|center estanArriba estanAbajo diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ aPiecesCollection at:0.
	
	diagonal  _ (aPiecesCollection includes: (center + 1@1)) and: [aPiecesCollection includes: center - 1@1].
	estanAbajo _ (aPiecesCollection includes: (center + 1@-1)) and: [aPiecesCollection includes: center + -1@1].
	
	^diagonal or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:47:40' prior: 50877020!
checkDiagonalLine: aPiecesCollection
	|center estanArriba diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ aPiecesCollection at:0.
	
	diagonal  _ (aPiecesCollection includes: (center + 1@1)) and: [aPiecesCollection includes: center - 1@1].
	diagonalInversa _ (aPiecesCollection includes: (center + 1@-1)) and: [aPiecesCollection includes: center + -1@1].
	
	^diagonal or:[diagonalInversa or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:47:50' prior: 50877037!
checkDiagonalLine: aPiecesCollection
	|center diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ aPiecesCollection at:0.
	
	diagonal  _ (aPiecesCollection includes: (center + 1@1)) and: [aPiecesCollection includes: center - 1@1].
	diagonalInversa _ (aPiecesCollection includes: (center + 1@-1)) and: [aPiecesCollection includes: center + -1@1].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:48:07' prior: 50877055!
checkDiagonalLine: aPiecesCollection
	|center diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ 1@1.
	
	diagonal  _ (aPiecesCollection includes: (center + 1@1)) and: [aPiecesCollection includes: center - 1@1].
	diagonalInversa _ (aPiecesCollection includes: (center + 1@-1)) and: [aPiecesCollection includes: center + -1@1].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:50:48' prior: 50876854!
checkIfPlayerXWon
	xIsWinner _ (self checkHorizontalLine: piecesX) or: [(self checkVerticalLine: piecesX) or:[self checkDiagonalLine: piecesX]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:51:15'!
checkIfPlayerOWon
	xIsWinner _ ((self checkHorizontalLine: piecesO) or: [(self checkVerticalLine: piecesO) or:[self checkDiagonalLine: piecesO]]) not.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:52:21' prior: 50877088!
checkIfPlayerXWon
	xIsWinner _ (self checkHorizontalLine: piecesX) or: [(self checkVerticalLine: piecesX) or:[self checkDiagonalLine: piecesX]].
	gameEnded _ xIsWinner.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:52:40' prior: 50877096!
checkIfPlayerOWon
	xIsWinner _ ((self checkHorizontalLine: piecesO) or: [(self checkVerticalLine: piecesO) or:[self checkDiagonalLine: piecesO]]) not.
	gameEnded _ xIsWinner not.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:53:29'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:54:00'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 20:54:28' prior: 50876657 overrides: 16896425!
initialize
	isXTurn _ true.
	piecesX _ OrderedCollection new.
	piecesO _ OrderedCollection new.
	gameEnded _ false.
	xIsWinner _ false.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:54:32'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:54:32'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:54:32'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:54:41'!
ERROR!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:54:53'!
ERROR!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:55:24' prior: 50876765!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	piecesX add: aPosition.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:55:29' prior: 50876747!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO add: aPosition.
	self checkIfPlayerOWon.

	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:55:33'!
ERROR!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:55:33'!
ERROR!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:55:33'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:55:33'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:55:33'!
ERROR!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:55:36'!
ERROR!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:57:03' prior: 50876864!
checkHorizontalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first - 0@1].
	estanALaDer _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first + 0@2].
	estanALaIzq _ (aPiecesCollection includes: (first - 0@1)) and: [aPiecesCollection includes: first - 0@2].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:57:17' prior: 50876940!
checkVerticalLine: aPiecesCollection
	|first estanArriba estanAbajo estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanAbajo _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanArriba _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:57:21'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:57:21'!
ERROR!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:57:21'!
ERROR!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:57:21'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:57:21'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:57:21'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:57:21'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:57:21'!
ERROR!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:57:25'!
ERROR!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:58:06' prior: 50877264!
checkHorizontalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + (0@1))) and: [aPiecesCollection includes: first - (0@1)].
	estanALaDer _ (aPiecesCollection includes: (first + (0@1))) and: [aPiecesCollection includes: first + (0@2)].
	estanALaIzq _ (aPiecesCollection includes: (first - (0@1))) and: [aPiecesCollection includes: first - (0@2)].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:58:35' prior: 50877283!
checkVerticalLine: aPiecesCollection
	|first estanArriba estanAbajo estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + (1@0))) and: [aPiecesCollection includes: first - (1@0)].
	estanAbajo _ (aPiecesCollection includes: (first + (1@0))) and: [aPiecesCollection includes: first + (2@0)].
	estanArriba _ (aPiecesCollection includes: (first - (1@0))) and: [aPiecesCollection includes: first - (2@0)].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:58:58' prior: 50877072!
checkDiagonalLine: aPiecesCollection
	|center diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ 1@1.
	
	diagonal  _ (aPiecesCollection includes: (center + (1@1))) and: [aPiecesCollection includes: center - (1@1)].
	diagonalInversa _ (aPiecesCollection includes: (center + (1@-1))) and: [aPiecesCollection includes: center + (-1@1)].
	
	^diagonal or:[diagonalInversa].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:00:37'!
test09PlayerXMovesAPiece
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 0@2.
	
	self assert: partida isOver.
	self deny: partida hasPlayerOWon.
	self assert: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:01:10' prior: 50877413!
test09PlayerXMovesAPiece
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self assert: partida isOver.
	self deny: partida hasPlayerOWon.
	self assert: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:01:17' prior: 50877425!
test09PlayerXMovesAPiece
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:05:38' prior: 50877438!
test09PlayerXMovesAPiece
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:06:12'!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	! !

!methodRemoval: TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'EMI 10/29/2020 21:06:12'!
test09PlayerXMovesAPiece
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:08:30' prior: 50877458!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:09:16' prior: 50877480!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:10:09'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:10:09'!
ERROR!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 21:10:57'!
moveXFrom: aOriginPosition To: aDestinationPosition
	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 21:11:16' prior: 50877543!
moveXFrom: aOriginPosition To: aDestinationPosition
	isXTurn _ false.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:14:25' prior: 50877494!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 1@2.
	partida putOAt: 2@0.
	
	partida moveXFrom: 1@2 To: 0@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self assert: partida countPiecesPlayed equals: 6.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:14:47'!
test10PlayerXMovesAPieceAndWins
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 1@2.
	partida putOAt: 2@0.
	
	partida moveXFrom: 1@2 To: 0@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self assert: partida countPiecesPlayed equals: 6.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:09:16' prior: 50877584!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:15:22'!
FAILURE!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:15:22'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 21:16:54' prior: 50877548!
moveXFrom: aOriginPosition To: aDestinationPosition
	isXTurn _ false.
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	self checkIfPlayerXWon. ! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 21:17:35' prior: 50877669!
moveXFrom: aOriginPosition To: aDestinationPosition
	isXTurn _ false.
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:18:39'!
test11PlayerOMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:21:30' prior: 50877719!
test11PlayerOMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	partida moveOFrom: 1@0 To: 2@0.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida isPlayingO.
	self assert: partida isPlayingX.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 21:21:56'!
moveOFrom: aOriginPosition To: aDestinationPosition
	isXTurn _ true.
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:22:02'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:22:02'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:23:41' prior: 50877735!
test11PlayerOMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	partida moveOFrom: 1@1 To: 1@2.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida isPlayingO.
	self assert: partida isPlayingX.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:23:41' prior: 50877801!
test11PlayerOMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	partida moveOFrom: 1@1 To: 1@2.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida isPlayingO.
	self assert: partida isPlayingX.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:23:41' prior: 50877855!
test11PlayerOMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	partida moveOFrom: 1@1 To: 1@2.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida isPlayingO.
	self assert: partida isPlayingX.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:24:55'!
test12PlayerOMovesAPieceAndWins
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	partida moveOFrom: 1@1 To: 1@2.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida isPlayingO.
	self assert: partida isPlayingX.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:25:47' prior: 50877926!
test12PlayerOMovesAPieceAndWins
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	partida moveOFrom: 1@0 To: 2@0.
	
	self assert: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida hasPlayerXWon .
	self assert: partida hasPlayerOWon .! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:26:43' prior: 50877616!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:26:51' prior: 50877600!
test10PlayerXMovesAPieceAndWins
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 1@2.
	partida putOAt: 2@0.
	
	partida moveXFrom: 1@2 To: 0@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self assert: partida countPiecesPlayed equals: 6.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:27:18' prior: 50876693!
test07PlayerOWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:27:23' prior: 50876799!
test08PlayerXWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 0@2.
	
	self assert: partida isOver.
	self deny: partida hasPlayerOWon.
	self assert: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:27:34' prior: 50876496!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	! !

----SNAPSHOT----(29 October 2020 21:27:46) CuisUniversity-4383.image priorSource: 17404041!

----STARTUP---- (29 October 2020 21:50:19) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


----QUIT----(29 October 2020 21:50:46) CuisUniversity-4383.image priorSource: 17485678!

----STARTUP---- (31 October 2020 19:36:12) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:44:24'!
test13CannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:44:57'!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.! !

!methodRemoval: TerniLapilliTest #test13CannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:44:57'!
test13CannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:46:30' prior: 50878100!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | ].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:47:11' prior: 50878058!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:48:03' prior: 50878119!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlacePieceOutOfTurn].! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 19:48:32'!
cannotPlacePieceOutOfTurn
	^'Cannot place place piece out of turn'.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:49:49' prior: 50878149!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText = TerniLapilli cannotPlacePieceOutOfTurn].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:54:32' prior: 50878165!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceOutOfTurn.
		self assert: partida countPiecesPlayed = 0.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:54:57' prior: 50878176!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceOutOfTurn.
		self assert: partida countPiecesPlayed = 2.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:55:08'!
FAILURE!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:55:08'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 19:56:19' prior: 50877225!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	isXTurn _ true.
	piecesO add: aPosition.
	self checkIfPlayerOWon.

	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:57:18'!
test14PlayerXCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	self should: [partida putXAt: 0@1.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceOutOfTurn.
		self assert: partida countPiecesPlayed = 3.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:57:27'!
FAILURE!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:57:27'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 19:57:51' prior: 50877216!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	isXTurn _ false.
	piecesX add: aPosition.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:59:48' prior: 50878128!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:00:30'!
test15PlayerOCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceOutOfTurn.
		self assert: partida countPiecesPlayed = 2.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:05:25' prior: 50878504!
test15PlayerOCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	partida putOAt: 0@2.
	self should: [partida putXAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:05:43'!
cannotPlacePieceInOccupiedPosition
	^'Cannot place place piece in occupied position'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:06:02'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:06:02'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:08:35' prior: 50878375!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	isXTurn _ false.
	piecesX add: aPosition.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:09:45' prior: 50878520!
test15PlayerOCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	partida putOAt: 0@2.
	self should: [partida putXAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	self should: [partida putXAt: 1@1.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:10:01'!
test15PlayerXCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	partida putOAt: 0@2.
	self should: [partida putXAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	self should: [partida putXAt: 1@1.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !

!methodRemoval: TerniLapilliTest #test15PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:10:01'!
test15PlayerOCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	partida putOAt: 0@2.
	self should: [partida putXAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	self should: [partida putXAt: 1@1.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:13:00'!
test16PlayerOCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	partida putXAt: 0@0.
	self should: [partida putOAt: 0@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 5.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	self should: [partida putOAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 5.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:13:03'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:13:03'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:13:20' prior: 50878254!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	isXTurn _ true.
	piecesO add: aPosition.
	self checkIfPlayerOWon.

	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:15:19' prior: 50878599!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:15:31' prior: 50878881!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:19:36'!
test17PlayerOCannotMoveBeforePlacing3Pieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	partida putXAt: 0@0.
	self should: [partida putOAt: 0@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 5.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	self should: [partida putOAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 5.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:24:18' prior: 50878982!
test17PlayerOCannotMoveBeforePlacing3Pieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	partida putXAt: 0@0.
	self should: [partida moveOFrom: 1@2 To: 0@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceBeforePlacingAllPieces.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:25:03'!
cannotMovePieceBeforePlacingAllPieces
	^'Cannot move piece before placing all pieces'.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:25:20' prior: 50878160!
cannotPlacePieceOutOfTurn
	^'Cannot place piece out of turn'.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:25:24' prior: 50878538!
cannotPlacePieceInOccupiedPosition
	^'Cannot place piece in occupied position'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:25:59'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:25:59'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:27:15' prior: 50877752!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	isXTurn _ true.
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:27:34'!
test18PlayerXCannotMoveBeforePlacing3Pieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	partida putXAt: 0@0.
	self should: [partida moveOFrom: 1@2 To: 0@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceBeforePlacingAllPieces.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:28:10' prior: 50879175!
test18PlayerXCannotMoveBeforePlacing3Pieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	self should: [partida moveXFrom: 2@0 To: 1@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceBeforePlacingAllPieces.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:28:13'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:28:13'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:28:32' prior: 50877678!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	isXTurn _ false.
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:28:46' prior: 50879274!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:29:00' prior: 50879106!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:32:34'!
test19PlayersCannotPlacePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	self should: [partida moveXFrom: 2@0 To: 1@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceBeforePlacingAllPieces.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:33:30' prior: 50879309!
test19PlayersCannotPlacePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putXAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida putXAt: 0@2.
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:33:48' prior: 50879326!
test19PlayersCannotPlacePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putXAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida countPiecesPlayed equals: 0.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida putXAt: 0@2.
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:34:13' prior: 50879340!
test19PlayersCannotPlacePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putXAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida countPiecesPlayed equals: 0.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida putXAt: 0@2.
	
	self should: [partida putOAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida countPiecesPlayed equals: 1.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:34:50'!
cannotPlacePiecesOutsideBoard
	^'Cannot place piece outside board'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:34:55'!
FAILURE!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:34:55'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:36:21' prior: 50878951!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:37:59'!
isInsideBoard: aPosition
	^ ((aPosition x) between: 0 and: 2) and: [(aPosition y) between: 0 and: 2].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:38:24' prior: 50878967!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

----SNAPSHOT----(31 October 2020 20:38:33) CuisUniversity-4383.image priorSource: 17485878!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:39:14'!
test20PlayersCannotMovePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putXAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida countPiecesPlayed equals: 0.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida putXAt: 0@2.
	
	self should: [partida putOAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida countPiecesPlayed equals: 1.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:40:47' prior: 50879566!
test20PlayersCannotMovePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: -1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
		
	self should: [partida putOAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:40:55' prior: 50879591!
test20PlayersCannotMovePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: -1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
		
	self should: [partida putOAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:42:16' prior: 50879616!
test20PlayersCannotMovePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: -1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida moveXFrom: 2@0 To: 2@1.

	self should: [partida moveOFrom: (1@0) To: (1@-1)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:42:34'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:42:34'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:43:55' prior: 50879298!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].

	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:43:58' prior: 50879740!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:44:12' prior: 50879286!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:44:31'!
cannotMovePiecesOutsideBoard
	^'Cannot move piece outside board'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:46:13'!
test21PlayersCanOnlyMoveOwnedPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: -1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida moveXFrom: 2@0 To: 2@1.

	self should: [partida moveOFrom: (1@0) To: (1@-1)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:51:06' prior: 50879859!
test21PlayersCanOnlyMoveOwnedPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@2 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesPlayerDoesntOwn.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida moveXFrom: 2@0 To: 2@1.

	self should: [partida moveOFrom: (1@-1) To: (1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesPlayerDoesntOwn.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:51:43'!
cannotMovePiecesPlayerDoesntOwn
	^'Player doesnt have a piece in that position'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 20:51:58'!
FAILURE!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 20:51:58'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:53:32' prior: 50879770!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	piecesX remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:53:42' prior: 50879755!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	piecesO remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

----SNAPSHOT----(31 October 2020 20:53:54) CuisUniversity-4383.image priorSource: 17533205!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:55:23'!
test22PlayerXCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@2 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesPlayerDoesntOwn.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida moveXFrom: 2@0 To: 2@1.

	self should: [partida moveOFrom: (1@-1) To: (1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesPlayerDoesntOwn.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:57:39' prior: 50880104!
test22PlayerXCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveOFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:58:08'!
cannotMovePieceToOccupiedPosition
	^'Cannot move piece to a occupied position'.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:58:13' prior: 50880157!
cannotMovePieceToOccupiedPosition
	^'Cannot move piece to an occupied position'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 20:58:56'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 20:58:56'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:59:48' prior: 50880012!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesO remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:00:00' prior: 50879995!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesX remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:00:27' prior: 50880249!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesO remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:00:31' prior: 50880271!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesX remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:00:34'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:00:34'!
FAILURE!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:01:56'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:01:56'!
FAILURE!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:01:58'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:04:38' prior: 50880293!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:04:48' prior: 50880315!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesX remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:04:54' prior: 50880516!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesX remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:05:01'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:05:01'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:06:27' prior: 50880542!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:06:34'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:06:34'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:07:09' prior: 50880131!
test22PlayerXCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:07:11'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:07:11'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:07:26' prior: 50880750!
test22PlayerXCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:07:53'!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:08:32' prior: 50880957!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida putXAt: 2@1.
	
	self should: [partida moveOFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:08:45' prior: 50880983!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:09:35' prior: 50881010!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 0@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].

	self should: [partida moveOFrom: 1@0 To: 1@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

----SNAPSHOT----(31 October 2020 21:10:01) CuisUniversity-4383.image priorSource: 17550399!

----SNAPSHOT----(31 October 2020 21:10:48) CuisUniversity-4383.image priorSource: 17583759!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:16:03'!
test24PlayerXCanOnlyMoveToNeighbour
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:17:23' prior: 50881229!
test24PlayerXCanOnlyMoveToNeighbour
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceMoreThanOneSpace.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 23:17:49'!
cannotMovePieceMoreThanOneSpace
	^'Cannot move piece more than one space'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:18:04'!
FAILURE!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:18:04'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:20:19' prior: 50880647!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:20:56'!
test25PlayerOCanOnlyMoveToNeighbour
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 0@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].

	self should: [partida moveOFrom: 1@0 To: 1@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:21:40' prior: 50881475!
test25PlayerOCanOnlyMoveToNeighbour
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 2@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceMoreThanOneSpace .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:21:47'!
FAILURE!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:21:47'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:22:24' prior: 50880493!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:23:25'!
test27PlayerOCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 2@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceMoreThanOneSpace .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:27:43' prior: 50881724!
test27PlayerOCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 0@1.
	partida putXAt: 1@1.
	partida putOAt: 2@1.
	partida putXAt: 0@2.
	partida putOAt: 1@0.
	partida moveXFrom: 1@1 To: 2@0.
	
	self should: [partida moveOFrom: 2@1 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 23:28:04'!
cannotMovePieceByInvalidDiagonal
	^'Cannot move piece by invalid diagonal'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:28:17'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:28:17'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:31:25' prior: 50881611!
moveOFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ #(1@0 0@1 1@2 2@1).
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:31:54'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:31:54'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:32:09'!
FAILURE!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:33:25'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:33:25'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:35:15' prior: 50881861!
moveOFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ #((1@0) (0@1) (1@2) (2@1)).
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:35:18'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:35:18'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:36:47' prior: 50882088!
moveOFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:37:17'!
test26PlayerXCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceMoreThanOneSpace.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:37:32' prior: 50882345!
test26PlayerXCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:38:46' prior: 50882363!
test26PlayerXCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@1 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:38:55'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:38:55'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:39:11' prior: 50881365!
moveXFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:39:26' prior: 50882496!
moveXFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

----SNAPSHOT----(31 October 2020 23:42:41) CuisUniversity-4383.image priorSource: 17583852!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:45:59' prior: 50882528!
moveXFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:46:03' prior: 50882218!
moveOFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:46:19' prior: 50882700!
moveOFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:46:31' prior: 50882662!
moveXFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:47:20'!
xxx: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:48:35' prior: 50882813!
xxx: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions|
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:48:37' prior: 50882851!
xxx: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:50:50'!
checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !

!methodRemoval: TerniLapilli #xxx:To: stamp: 'EMI 10/31/2020 23:50:50'!
xxx: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:51:09' prior: 50882889!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:51:45' prior: 50882776!
moveXFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:51:53' prior: 50882947!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:52:14' prior: 50882738!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

----SNAPSHOT----(31 October 2020 23:52:21) CuisUniversity-4383.image priorSource: 17632241!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:53:42' prior: 50882977!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:54:01' prior: 50883125!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:54:54'!
isPositionEmpty: aPosition
	((piecesO includes: aPosition ) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:55:56' prior: 50883003!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:56:11' prior: 50883151!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:56:14' prior: 50883207!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:57:28' prior: 50883229!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:57:37' prior: 50879455!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:57:41' prior: 50879480!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:08' prior: 50883386!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:28' prior: 50883405!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:38' prior: 50883367!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:41' prior: 50883441!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:58:45'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:58:45'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:38' prior: 50883457!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:41' prior: 50883566!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:38' prior: 50883582!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:57:37' prior: 50883598!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:57:41' prior: 50883425!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:02:29'!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:02:45' prior: 50883837!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	aPiecesCollection size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:03:17' prior: 50883185!
moveOFrom: aOriginPosition To: aDestinationPosition
	self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:03:29' prior: 50883345!
moveXFrom: aOriginPosition To: aDestinationPosition
	self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:04:51'!
hasEnoughPiecesToMove: aPiecesCollection
	aPiecesCollection size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:05:09' prior: 50883860!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	self hasEnoughPiecesToMove: aPiecesCollection.
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:06:36' prior: 50884001!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	self hasEnoughPiecesToMove: aPiecesCollection.
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 11/1/2020 00:09:33'!
cannotPlayOutOfTurn
	^'Cannot place piece out of turn'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 00:09:33' prior: 50883614!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 00:09:33' prior: 50883633!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !

!methodRemoval: TerniLapilli class #cannotPlacePieceOutOfTurn stamp: 'EMI 11/1/2020 00:09:33'!
cannotPlacePieceOutOfTurn
	^'Cannot place piece out of turn'.!

!methodRemoval: TerniLapilli class #cannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:10:53'!
cannotMovePieceToOccupiedPosition
	^'Cannot move piece to an occupied position'.!

!methodRemoval: TerniLapilli class #cannotMovePiecesOutsideBoard stamp: 'EMI 11/1/2020 00:11:01'!
cannotMovePiecesOutsideBoard
	^'Cannot move piece outside board'.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:11:36' prior: 50881037!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 0@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].

	self should: [partida moveOFrom: 1@0 To: 1@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:11:51' prior: 50884101!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 0@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].

	self should: [partida moveOFrom: 1@0 To: 1@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:12:10' prior: 50880856!
test22PlayerXCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:12:30' prior: 50879641!
test20PlayersCannotMovePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: -1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida moveXFrom: 2@0 To: 2@1.

	self should: [partida moveOFrom: (1@0) To: (1@-1)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:12:33'!
ERROR!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:12:33'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:12:33'!
FAILURE!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:12:33'!
FAILURE!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:12:33'!
FAILURE!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:13:03' prior: 50882927!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:13:18' prior: 50884022!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	self hasEnoughPiecesToMove: aPiecesCollection.
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:14:12' prior: 50883176!
isPositionEmpty: aPosition
	((piecesO includes: aPosition ) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:14:37'!
ERROR!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:14:37'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:14:58' prior: 50878191!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn.
		self assert: partida countPiecesPlayed = 2.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:15:18' prior: 50878308!
test14PlayerXCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	self should: [partida putXAt: 0@1.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn .
		self assert: partida countPiecesPlayed = 3.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:16:14' prior: 50882381!
test26PlayerXCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveOFrom: 0@1 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn .
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:16:20' prior: 50884568!
test26PlayerXCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@1 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:16:40'!
test28PlayerOCannotMoveOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@1 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:16:53' prior: 50884604!
test28PlayerOCannotMoveOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveOFrom: 0@1 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn .
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:17:28' prior: 50884622!
test28PlayerOCannotMoveOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveOFrom: 1@2 To: 2@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn .
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:18:07'!
test29PlayerXCannotMoveOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 0@1.
	partida putXAt: 1@1.
	partida putOAt: 2@1.
	partida putXAt: 0@2.
	partida putOAt: 1@0.
	partida moveXFrom: 1@1 To: 2@0.
	
	self should: [partida moveOFrom: 2@1 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:18:47' prior: 50884656!
test29PlayerXCannotMoveOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 0@1.
	partida putXAt: 1@1.
	partida putOAt: 2@1.
	partida putXAt: 0@2.
	partida putOAt: 1@0.
	partida moveXFrom: 1@1 To: 2@0.
	
	self should: [partida moveXFrom: 2@0 To: 1@1 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:19:06'!
FAILURE!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:19:06'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:19:26' prior: 50883883!
moveOFrom: aOriginPosition To: aDestinationPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:19:42' prior: 50883892!
moveXFrom: aOriginPosition To: aDestinationPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

----SNAPSHOT----(1 November 2020 00:19:52) CuisUniversity-4383.image priorSource: 17647067!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:21:13' prior: 50884048!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:21:32'!
xxx: aPiecesCollection
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:21:42' prior: 50884935!
xxx: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:22:52'!
hasRemainingPiecesToPlace: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].! !

!methodRemoval: TerniLapilli #hasRemainingPiecesToPlace: stamp: 'EMI 11/1/2020 00:22:58'!
hasRemainingPiecesToPlace: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:23:22' prior: 50884942!
xxx: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:23:37'!
hasRemainingPiecesToPlace: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].! !

!methodRemoval: TerniLapilli #xxx: stamp: 'EMI 11/1/2020 00:23:37'!
xxx: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:24:11' prior: 50884067!
putOAt: aPosition
	self hasRemainingPiecesToPlace: piecesO.
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:24:24' prior: 50884917!
putXAt: aPosition
	self hasRemainingPiecesToPlace: piecesX.

	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:24:57' prior: 50885002!
putXAt: aPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	self hasRemainingPiecesToPlace: piecesX.

	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:25:08' prior: 50884985!
putOAt: aPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	self hasRemainingPiecesToPlace: piecesO.

	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:25:51' prior: 50885135!
putOAt: aPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	self hasRemainingPiecesToPlace: piecesO.

	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:26:07' prior: 50885118!
putXAt: aPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	self hasRemainingPiecesToPlace: piecesX.

	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:26:22'!
FAILURE!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:26:22'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:29:10' prior: 50878433!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	partida moveXFrom: 0@1 To: 0@2.
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:30:25' prior: 50885152!
putOAt: aPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self hasRemainingPiecesToPlace: piecesO.
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	piecesO add: aPosition.
	
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:30:35' prior: 50885166!
putXAt: aPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self hasRemainingPiecesToPlace: piecesX.
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	piecesX add: aPosition.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:31:11'!
put: aPosition into: aPiecesCollection
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self hasRemainingPiecesToPlace: piecesX.
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	piecesX add: aPosition.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:31:37' prior: 50885434!
put: aPosition into: aPiecesCollection
	self hasRemainingPiecesToPlace: aPiecesCollection .
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	aPiecesCollection add: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:32:08' prior: 50885407!
putOAt: aPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self put: aPosition into: piecesO.
	
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:32:30' prior: 50885421!
putXAt: aPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self put: aPosition into: piecesX.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:33:20' prior: 50884804!
moveXFrom: aOriginPosition To: aDestinationPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:33:25' prior: 50884793!
moveOFrom: aOriginPosition To: aDestinationPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition.
	
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:40:11'!
doPlayerAction: aBlock
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	aBlock value.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:40:33'!
doPlayerXAction: aBlock
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	aBlock value.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!methodRemoval: TerniLapilli #doPlayerAction: stamp: 'EMI 11/1/2020 00:40:33'!
doPlayerAction: aBlock
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	aBlock value.
	
	isXTurn _ false.
	self checkIfPlayerXWon.!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:41:13' prior: 50885470!
putXAt: aPosition
	self doPlayerXAction:[self put: aPosition into: piecesX].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:41:42' prior: 50885578!
moveXFrom: aOriginPosition To: aDestinationPosition
	self doPlayerXAction: [ self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:43:23'!
doPlayerOAction: aBlock
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	
	aBlock value.
	
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:43:40' prior: 50885461!
putOAt: aPosition
	self doPlayerOAction: [self put: aPosition into: piecesO].


	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:43:58' prior: 50885589!
moveOFrom: aOriginPosition To: aDestinationPosition
	self doPlayerOAction: [self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition].
! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

----SNAPSHOT----(1 November 2020 00:44:15) CuisUniversity-4383.image priorSource: 17704402!

----SNAPSHOT----(1 November 2020 00:44:33) CuisUniversity-4383.image priorSource: 17734588!

----QUIT----(1 November 2020 00:44:46) CuisUniversity-4383.image priorSource: 17734681!

----STARTUP---- (1 November 2020 12:22:38) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:28:20'!
Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Object subclass: #TerniLapilliGameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliGameOverState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:28:50'!
Object subclass: #TerniLapilliGameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #TerniLapilliGameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliGameOverState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:29:01'!
TerniLapilliState subclass: #TerniLapilliGameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #TerniLapilliPlayerXPutPieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerXPutPieceState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:30:44'!
TerniLapilliState subclass: #TerniLapilliPlayerXPutPieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #TerniLapilliPlayerXMovePieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerXMovePieceState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:30:50'!
TerniLapilliState subclass: #TerniLapilliPlayerXMovePieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #TerniLapilliPlayerOMovePieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerOMovePieceState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:30:55'!
TerniLapilliState subclass: #TerniLapilliPlayerOMovePieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #TerniLapilliPlayerOPutPieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerOPutPieceState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:31:03'!
TerniLapilliState subclass: #TerniLapilliPlayerOPutPieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:32:13'!
isOver
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:32:19'!
isPlayingO
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:32:23'!
isPlayingX
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:32:33'!
hasPlayerXWon
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:32:36'!
hasPlayerOWon
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:33:16'!
countPiecesPlayed
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 12:34:59'!
putXAt: aPosition
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 12:35:01'!
putOAt: aPosition
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 12:35:24'!
moveXFrom: aOriginPosition To: aDestinationPosition
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 12:35:27'!
moveOFrom: aOriginPosition To: aDestinationPosition
	^self subclassResponsibility.! !
!TerniLapilliGameOverState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:37:05' overrides: 50885960!
isOver
	^true.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:37:16' overrides: 50885969!
isPlayingX
	^false.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:37:20' overrides: 50885964!
isPlayingO
	^false.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:37:48' overrides: 50885974!
hasPlayerXWon
	^true.! !

!classDefinition: #TerniLapilliGameOverState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:38:24'!
TerniLapilliState subclass: #TerniLapilliGameOverState
	instanceVariableNames: 'xWon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:38:22' prior: 50886025 overrides: 50885974!
hasPlayerXWon
	^xWon.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:38:34' overrides: 50885979!
hasPlayerOWon
	^xWon not.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:39:45' overrides: 50885988!
putXAt: aPosition
	^Error signal: super class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:39:50' overrides: 50885993!
putOAt: aPosition
	^Error signal: super class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:40:12' overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: super class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:40:16' overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: super class cannotPlayWhenGameOver.! !
!TerniLapilliState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:41:11'!
cannotPlayWhenGameOver
	^'Cannot put piece o move piece when game is over'.! !
!TerniLapilliGameOverState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:41:54'!
hasXWon: aBoolean! !
!TerniLapilliGameOverState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:42:19' prior: 50886080!
hasXWon: aBoolean
	! !
!TerniLapilliGameOverState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:43:16' prior: 50886085!
hasXWon: xIsWinnerBoolean
	^self new initialize: xIsWinnerBoolean.
	! !
!TerniLapilliGameOverState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:43:40'!
initialize: xIsWinnerBoolean
	xWon _ xIsWinnerBoolean.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:44:30' overrides: 50885960!
isOver
	^false.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:44:40' overrides: 50885969!
isPlayingX
	^true.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:44:45' overrides: 50885964!
isPlayingO
	^false.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:44:53' overrides: 50885974!
hasPlayerXWon
	^false.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:44:57' overrides: 50885979!
hasPlayerOWon
	^false.! !

!methodRemoval: TerniLapilliState #countPiecesPlayed stamp: 'EMI 11/1/2020 12:45:57'!
countPiecesPlayed
	^self subclassResponsibility.!
!TerniLapilliPlayerXPutPieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:46:32' overrides: 50885988!
putXAt: aPosition! !

Object subclass: #TerniLapilliState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:47:33'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliGameOverState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:48:22'!
ofGame: ATerniLapilliGame hasXWon: xIsWinnerBoolean
	^self new initialize: xIsWinnerBoolean.
	! !
!TerniLapilliGameOverState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:48:47' prior: 50886146!
ofGame: ATerniLapilliGame hasXWon: xIsWinnerBoolean
	^self new initialize: xIsWinnerBoolean hasXWon: xIsWinnerBoolean.
	! !
!TerniLapilliGameOverState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:49:12' prior: 50886153!
ofGame: aTerniLapilliGame hasXWon: xIsWinnerBoolean
	^self new initialize: aTerniLapilliGame hasXWon: xIsWinnerBoolean.
	! !

!methodRemoval: TerniLapilliGameOverState class #hasXWon: stamp: 'EMI 11/1/2020 12:49:16'!
hasXWon: xIsWinnerBoolean
	^self new initialize: xIsWinnerBoolean.
	!
!TerniLapilliGameOverState methodsFor: 'initialize' stamp: 'EMI 11/1/2020 12:49:56'!
initialize: xIsWinnerBoolean xIsWinnerBoolean: hasXWon 
	xWon _ xIsWinnerBoolean.! !

!methodRemoval: TerniLapilliGameOverState #initialize: stamp: 'EMI 11/1/2020 12:49:56'!
initialize: xIsWinnerBoolean
	xWon _ xIsWinnerBoolean.!
!TerniLapilliGameOverState methodsFor: 'initialize' stamp: 'EMI 11/1/2020 12:50:35' prior: 50886173!
initialize: aTerniLapilliGame xIsWinnerBoolean: xIsWinnerBoolean 
	game _ aTerniLapilliGame.
	xWon _ xIsWinnerBoolean.! !
!TerniLapilliGameOverState methodsFor: 'initialize' stamp: 'EMI 11/1/2020 12:50:47'!
initialize: aTerniLapilliGame xIsWinner: xIsWinnerBoolean 
	game _ aTerniLapilliGame.
	xWon _ xIsWinnerBoolean.! !

!methodRemoval: TerniLapilliGameOverState #initialize:xIsWinnerBoolean: stamp: 'EMI 11/1/2020 12:50:47'!
initialize: aTerniLapilliGame xIsWinnerBoolean: xIsWinnerBoolean 
	game _ aTerniLapilliGame.
	xWon _ xIsWinnerBoolean.!
!TerniLapilliGameOverState methodsFor: 'initialize' stamp: 'EMI 11/1/2020 12:51:20'!
initialize: aTerniLapilliGame hasXWon: xIsWinnerBoolean 
	game _ aTerniLapilliGame.
	xWon _ xIsWinnerBoolean.! !

!methodRemoval: TerniLapilliGameOverState #initialize:xIsWinner: stamp: 'EMI 11/1/2020 12:51:20'!
initialize: aTerniLapilliGame xIsWinner: xIsWinnerBoolean 
	game _ aTerniLapilliGame.
	xWon _ xIsWinnerBoolean.!

----SNAPSHOT----(1 November 2020 12:51:29) CuisUniversity-4383.image priorSource: 17734774!
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:51:53' prior: 50886130 overrides: 50885988!
putXAt: aPosition
	game putXAt: aPosition.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:52:07' overrides: 50885993!
putOAt: aPosition
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:52:42' prior: 50886229 overrides: 50885993!
putOAt: aPosition
	^Error signal: self class cannotPlayOutOfTurn
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:52:50' prior: 50886234 overrides: 50885993!
putOAt: aPosition
	^Error signal: game class cannotPlayOutOfTurn
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:52:56' prior: 50886241 overrides: 50885993!
putOAt: aPosition
	^Error signal: game class cannotPlayOutOfTurn.
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:53:41' overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:53:46' overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:54:10' prior: 50886260 overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayOutOfTurn.
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:54:51' prior: 50886254 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: self class cannotMovePieceBeforePlacingAllPieces 
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:54:53' prior: 50886275 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: self class cannotMovePieceBeforePlacingAllPieces.
	! !
!TerniLapilliPlayerXPutPieceState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:55:40'!
ofGame: aTerniLapilliGame
	^self new initialize: aTerniLapilliGame.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:56:04'!
initialize: aTerniLapilliGame
	game _ aTerniLapilliGame.! !
!TerniLapilliState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:57:09'!
initialize: aTerniLapilliGame
	game _ aTerniLapilliGame.! !

!methodRemoval: TerniLapilliPlayerXPutPieceState #initialize: stamp: 'EMI 11/1/2020 12:58:02'!
initialize: aTerniLapilliGame
	game _ aTerniLapilliGame.!
!TerniLapilliPlayerOPutPieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:58:34' overrides: 50885960!
isOver
	^false.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:03' overrides: 50885969!
isPlayingX
	^false.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:13' overrides: 50885964!
isPlayingO
	^true.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:23' overrides: 50885974!
hasPlayerXWon
	^false.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:26' overrides: 50885979!
hasPlayerOWon
	^false.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:46' overrides: 50885993!
putOAt: aPosition
	game putOAt: aPosition.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:55' overrides: 50885988!
putXAt: aPosition
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:00:11' prior: 50886342 overrides: 50885988!
putXAt: aPosition
	^Error signal: game class cannotPlayOutOfTurn.
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:00:38' overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:00:55' prior: 50886353 overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: self class cannotMovePieceBeforePlacingAllPieces.
	
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:00:59' overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: self class cannotMovePieceBeforePlacingAllPieces.
	
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:01:10' prior: 50886368 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayOutOfTurn.
	
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:01:19' prior: 50886360 overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotMovePieceBeforePlacingAllPieces.
	
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:01:38' prior: 50886284 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotMovePieceBeforePlacingAllPieces.
	! !
!TerniLapilliPlayerOPutPieceState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:02:15'!
ofGame: aTerniLapilliGame
	^self new initialize: aTerniLapilliGame.! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:02:48' overrides: 50885960!
isOver
	^false! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:02:54' overrides: 50885974!
hasPlayerXWon
	^false! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:02:57' overrides: 50885979!
hasPlayerOWon
	^false! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:03:05' overrides: 50885964!
isPlayingO
	^false! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:03:09' overrides: 50885969!
isPlayingX
	^true! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:03:28' overrides: 50885988!
putXAt: aPosition
	! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:04:06' prior: 50886431 overrides: 50885988!
putXAt: aPosition
	^Error signal: game class cannotPlaceMoreThan3PiecesError
	! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:04:23' overrides: 50885993!
putOAt: aPosition
	^Error signal: game class cannotPlayOutOfTurn.
	! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:04:57' overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayOutOfTurn.
	! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:05:16' overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	game moveXFrom: aOriginPosition To: aDestinationPosition.
	! !
!TerniLapilliPlayerXMovePieceState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:05:48'!
ofGame: aTerniLapilliGame
	^self new initialize: aTerniLapilliGame.! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:06:45' overrides: 50885969!
isPlayingX
	^false! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:06:49' overrides: 50885960!
isOver
	^false! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:06:54' overrides: 50885974!
hasPlayerXWon
	^false! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:06:57' overrides: 50885979!
hasPlayerOWon
	^false! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:07:10' overrides: 50885964!
isPlayingO
	^true! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:07:40' overrides: 50885988!
putXAt: aPosition
	^Error signal: game class cannotPlayOutOfTurn.! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:07:54' overrides: 50885993!
putOAt: aPosition
	^Error signal: game class cannotPlaceMoreThan3PiecesError.! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:08:22' overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayOutOfTurn.! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:08:43' overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	game moveOFrom: aOriginPosition To: aDestinationPosition.! !
!TerniLapilliPlayerOMovePieceState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:09:06'!
ofGame: aTerniLapilliGame
	^self new initialize: aTerniLapilliGame .! !
!TerniLapilliPlayerOMovePieceState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:09:07' prior: 50886525!
ofGame: aTerniLapilliGame
	^self new initialize: aTerniLapilliGame.! !

----SNAPSHOT----(1 November 2020 13:09:31) CuisUniversity-4383.image priorSource: 17746148!

----SNAPSHOT----(1 November 2020 13:09:54) CuisUniversity-4383.image priorSource: 17756358!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesX piecesO gameEnded xIsWinner gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 11/1/2020 13:13:42'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesX piecesO gameEnded xIsWinner gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:14:27' prior: 50877175 overrides: 16896425!
initialize
	isXTurn _ true.
	piecesX _ OrderedCollection new.
	piecesO _ OrderedCollection new.
	gameEnded _ false.
	xIsWinner _ false.
	gameState _ TerniLapilliPlayerXPutPieceState ofGame: self.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 11/1/2020 13:15:07' prior: 50876842!
hasPlayerOWon
	^gameState hasPlayerOWon.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 11/1/2020 13:15:18' prior: 50876837!
hasPlayerXWon
	^gameState hasPlayerXWon.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 11/1/2020 13:15:28' prior: 50876825!
isOver
	^gameState isOver.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 11/1/2020 13:15:40' prior: 50876076!
isPlayingO
	^gameState isPlayingO .! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 11/1/2020 13:15:48' prior: 50876072!
isPlayingX
	^gameState isPlayingX.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:18:10'!
putXWhenPlayerIsXAt: aPosition
	self doPlayerXAction:[self put: aPosition into: piecesX].! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:18:28' prior: 50886223 overrides: 50885988!
putXAt: aPosition
	game putXWhenPlayerIsXAt: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:18:47' prior: 50885623!
putXAt: aPosition
	gameState putXAt: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:19:18'!
putOWhenPlayerIsOAt: aPosition
	self doPlayerOAction: [self put: aPosition into: piecesO].


	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:19:36' prior: 50885744!
putOAt: aPosition
	gameState putOAt: aPosition.


	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:19:50' prior: 50886336 overrides: 50885993!
putOAt: aPosition
	game putOWhenPlayerIsOAt: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:20:13'!
moveOWhenPlayerIsOFrom: aOriginPosition To: aDestinationPosition
	self doPlayerOAction: [self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:20:35' prior: 50885750!
moveOFrom: aOriginPosition To: aDestinationPosition
	gameState moveOFrom: aOriginPosition To: aDestinationPosition.
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:20:48'!
moveXWhenPlayerIsXFrom: aOriginPosition To: aDestinationPosition
	self doPlayerXAction: [ self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:21:11' prior: 50885629!
moveXFrom: aOriginPosition To: aDestinationPosition
	gameState moveXFrom: aOriginPosition To: aDestinationPosition .! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:21:43' prior: 50886459 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	game moveXWhenPlayerIsXFrom: aOriginPosition To: aDestinationPosition.
	! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:21:56' prior: 50886518 overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	game moveOWhenPlayerIsOFrom: aOriginPosition To: aDestinationPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:23:10' prior: 50886589!
putXWhenPlayerIsXAt: aPosition
	self doPlayerXAction:[self put: aPosition into: piecesX].! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:23:44' prior: 50885607!
doPlayerXAction: aBlock
	aBlock value.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:24:16' prior: 50886672!
putXWhenPlayerIsXAt: aPosition
	self put: aPosition into: piecesX.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:24:36' prior: 50886606!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon.


	! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:26:12' prior: 50877113!
checkIfPlayerOWon
	xIsWinner _ ((self checkHorizontalLine: piecesO) or: [(self checkVerticalLine: piecesO) or:[self checkDiagonalLine: piecesO]]) not.
	(xIsWinner not) ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false].! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:26:28' prior: 50877104!
checkIfPlayerXWon
	xIsWinner _ (self checkHorizontalLine: piecesX) or: [(self checkVerticalLine: piecesX) or:[self checkDiagonalLine: piecesX]].
	xIsWinner ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: true].! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:27:36' prior: 50886683!
putXWhenPlayerIsXAt: aPosition
	self put: aPosition into: piecesX.
	self checkIfPlayerXWon.! !

----SNAPSHOT----(1 November 2020 13:28:27) CuisUniversity-4383.image priorSource: 17756451!
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:45:33' prior: 50886706!
checkIfPlayerXWon
	xIsWinner _ (self checkHorizontalLine: piecesX) or: [(self checkVerticalLine: piecesX) or:[self checkDiagonalLine: piecesX]].
	^xIsWinner.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:45:48' prior: 50886695!
checkIfPlayerOWon
	xIsWinner _ ((self checkHorizontalLine: piecesO) or: [(self checkVerticalLine: piecesO) or:[self checkDiagonalLine: piecesO]]) not.
	^xIsWinner not.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:47:21' prior: 50886716!
putXWhenPlayerIsXAt: aPosition
	self put: aPosition into: piecesX.
	self checkIfPlayerXWon 
	ifTrue:[gameState _ TerniLapilliGameOverState ofGame: self hasXWon: true]
	ifFalse:[gameState _ TerniLapilliPlayerOPutPieceState ofGame: self].! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:48:33' prior: 50886689!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false].


	! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:49:22' prior: 50886733!
checkIfPlayerOWon
	^((self checkHorizontalLine: piecesO) or: [(self checkVerticalLine: piecesO) or:[self checkDiagonalLine: piecesO]]).! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:49:29' prior: 50886725!
checkIfPlayerXWon
	^(self checkHorizontalLine: piecesX) or: [(self checkVerticalLine: piecesX) or:[self checkDiagonalLine: piecesX]].! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:50:10'!
checkIfPlayerWon: aPlayerPiecesCollection
	^((self checkHorizontalLine: aPlayerPiecesCollection) or: [(self checkVerticalLine: aPlayerPiecesCollection) or:[self checkDiagonalLine: aPlayerPiecesCollection]]).! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:50:28' prior: 50886768!
checkIfPlayerXWon
	^self checkIfPlayerWon: piecesX.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:50:37' prior: 50886761!
checkIfPlayerOWon
	^self checkIfPlayerWon: piecesO.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:51:31' prior: 50886752!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [].


	! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:52:21' prior: 50886795!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [
		piecesX size = 3 
		ifTrue:[gameState _ TerniLapilliPlayerXMovePieceState ofGame: self]
		].


	! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:52:34' prior: 50886804!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [
		piecesX size = 3 
		ifTrue:[gameState _ TerniLapilliPlayerXMovePieceState ofGame: self]
		ifFalse:[gameState _ TerniLapilliPlayerXPutPieceState ofGame: self]
		].


	! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:52:38' prior: 50886816!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [
		piecesX size = 3 
		ifTrue:[gameState _ TerniLapilliPlayerXMovePieceState ofGame: self]
		ifFalse:[gameState _ TerniLapilliPlayerXPutPieceState ofGame: self]
	].


	! !

!methodRemoval: TerniLapilli #doPlayerOAction: stamp: 'EMI 11/1/2020 14:53:34'!
doPlayerOAction: aBlock
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	
	aBlock value.
	
	isXTurn _ true.
	self checkIfPlayerOWon.

	!

!methodRemoval: TerniLapilli #doPlayerXAction: stamp: 'EMI 11/1/2020 14:53:39'!
doPlayerXAction: aBlock
	aBlock value.
	self checkIfPlayerXWon.!
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:54:47' prior: 50886639!
moveXWhenPlayerIsXFrom: aOriginPosition To: aDestinationPosition
	self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition.
	self checkIfPlayerXWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: true.]
	ifFalse: [gameState _ TerniLapilliPlayerOMovePieceState ofGame: self.]! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:55:23' prior: 50886623!
moveOWhenPlayerIsOFrom: aOriginPosition To: aDestinationPosition
	self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false.]
	ifFalse: [gameState _ TerniLapilliPlayerXMovePieceState ofGame: self.]
! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:56:11' prior: 50885449!
put: aPosition into: aPiecesCollection
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	aPiecesCollection add: aPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:56:15' prior: 50886882!
put: aPosition into: aPiecesCollection
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	aPiecesCollection add: aPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:56:31' prior: 50884321!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:57:14' prior: 50886558 overrides: 16896425!
initialize
	piecesX _ OrderedCollection new.
	piecesO _ OrderedCollection new.
	gameState _ TerniLapilliPlayerXPutPieceState ofGame: self.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'piecesX piecesO gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 11/1/2020 14:57:21'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'piecesX piecesO gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

----SNAPSHOT----(1 November 2020 14:57:41) CuisUniversity-4383.image priorSource: 17762270!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

partida _ TerniLapilli newGame.
partida putXAt: 0@0.
partida putOAt: 1@0.

partida putXAt: 0@1.
partida putOAt: 1@1.

partida putXAt: 2@0.
partida putOAt: 1@2.!

partida _ TerniLapilli newGame.
partida putXAt: 0@0.
partida putOAt: 1@0.

partida putXAt: 0@1.
partida putOAt: 1@1.

partida putXAt: 2@0.
partida putOAt: 1@2.

partida moveXFrom: 0@1 To: 0@2.!
!TerniLapilliState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 15:01:56' prior: 50886074!
cannotPlayWhenGameOver
	^'Cannot put piece or move piece when game is over'.! !

	^'Cannot put piece or move piece when game is over'.!
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 11/1/2020 15:02:34'!
cannotPlayWhenGameOver
	^'Cannot put piece or move piece when game is over'.! !

!methodRemoval: TerniLapilliState class #cannotPlayWhenGameOver stamp: 'EMI 11/1/2020 15:02:53'!
cannotPlayWhenGameOver
	^'Cannot put piece or move piece when game is over'.!
!TerniLapilliGameOverState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 15:03:01' prior: 50886068 overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 15:03:06' prior: 50886061 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 15:03:10' prior: 50886055 overrides: 50885993!
putOAt: aPosition
	^Error signal: game class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 15:03:16' prior: 50886049 overrides: 50885988!
putXAt: aPosition
	^Error signal: game class cannotPlayWhenGameOver.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:04:28'!
test30PlayersCannotPlayAfterGameIsOver
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:07:07' prior: 50887103!
test30PlayersCannotPlayAfterGameIsOver
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	
	self should: [partida moveXFrom: 0@1 To: 0@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayWhenGameOver.
		self assert: partida isOver.
		self assert: partida hasPlayerOWon.
		self deny: partida hasPlayerXWon.
		].
	
	self should: [partida moveOFrom: 1@2 To: 2@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayWhenGameOver.
		self assert: partida isOver.
		self assert: partida hasPlayerOWon.
		self deny: partida hasPlayerXWon.
		].
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:07:57'!
test01PlayerXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.! !

!methodRemoval: TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 15:07:57'!
test01TerniLapilliXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:08:10'!
test02PlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.
	self assert: partida countPiecesPlayed equals: 1.
! !

!methodRemoval: TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:08:10'!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.
	self assert: partida countPiecesPlayed equals: 1.
!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:08:20'!
test03PlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 2.
! !

!methodRemoval: TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:08:20'!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 2.
!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:08:43'!
test04NewGameCannotBeOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
! !

!methodRemoval: TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 15:08:43'!
test04TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:08:52'!
test05NewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !

!methodRemoval: TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 15:08:52'!
test05TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.!

----SNAPSHOT----(1 November 2020 15:09:01) CuisUniversity-4383.image priorSource: 17769313!

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!methodRemoval: TerniLapilli #hasRemainingPiecesToPlace: stamp: 'EMI 11/1/2020 15:10:45'!
hasRemainingPiecesToPlace: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].!

!methodRemoval: TerniLapilli #hasEnoughPiecesToMove: stamp: 'EMI 11/1/2020 15:10:48'!
hasEnoughPiecesToMove: aPiecesCollection
	aPiecesCollection size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].!

----SNAPSHOT----(1 November 2020 15:10:56) CuisUniversity-4383.image priorSource: 17781970!

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:11:00'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:11:00'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:11:00'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:11:00'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/1/2020 15:11:00'!
PASSED!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:16:07' prior: 50877371!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (2@2)) and: [aPiecesCollection includes: (0@0)].
	diagonalInversa _ (aPiecesCollection includes: (2@0)) and: [aPiecesCollection includes:  (0@2)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:19:43'!
checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition

	^ aOriginPosition eightNeighbors includes: anEmptyDestinationPosition! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:19:43' prior: 50884301!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:21:30'!
checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:22:03' prior: 50887583!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:22:12' prior: 50887618!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:22:29'!
checkIfMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 15:22:29' prior: 50886902!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition To: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !

!methodRemoval: TerniLapilli #checkIfMoveFrom:isValidTo: stamp: 'EMI 11/1/2020 15:22:29'!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:22:48'!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 15:22:48' prior: 50887670!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !

!methodRemoval: TerniLapilli #checkIfMoveFrom:To: stamp: 'EMI 11/1/2020 15:22:48'!
checkIfMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:23:04'!
checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 15:23:04' prior: 50887705!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !

!methodRemoval: TerniLapilli #checkIfIsNotInvalidDiagonalMoveFrom:isValidTo: stamp: 'EMI 11/1/2020 15:23:04'!
checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:23:42'!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 15:23:42' prior: 50887769!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !

!methodRemoval: TerniLapilli #checkIfIsNotInvalidDiagonalMoveFrom:To: stamp: 'EMI 11/1/2020 15:23:42'!
checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:23:52' prior: 50887575!
checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition
	^ aOriginPosition eightNeighbors includes: anEmptyDestinationPosition! !

----SNAPSHOT----(1 November 2020 15:24:09) CuisUniversity-4383.image priorSource: 17785762!

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:42:06' prior: 50884342!
isPositionEmpty: aPosition
	^((piecesO includes: aPosition ) or: [piecesX includes: aPosition ]).
! !
!TerniLapilli methodsFor: 'player actions - private' stamp: 'EMI 11/1/2020 15:42:29' prior: 50886892!
put: aPosition into: aPiecesCollection
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(self isPositionEmpty: aPosition) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	aPiecesCollection add: aPosition.! !
!TerniLapilli methodsFor: 'player actions - private' stamp: 'EMI 11/1/2020 15:42:49' prior: 50887721!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	(self isPositionEmpty: aDestinationPosition)  ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

----SNAPSHOT----(1 November 2020 15:44:18) CuisUniversity-4383.image priorSource: 17798391!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:45:24'!
test06PlayersCannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	partida moveXFrom: 0@1 To: 0@2.
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	! !

!methodRemoval: TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:45:24'!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	partida moveXFrom: 0@1 To: 0@2.
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:45:42'!
test06PlayersCannotPutMoreThan3Pieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	partida moveXFrom: 0@1 To: 0@2.
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	! !

!methodRemoval: TerniLapilliTest #test06PlayersCannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:45:42'!
test06PlayersCannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	partida moveXFrom: 0@1 To: 0@2.
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	!

----SNAPSHOT----(1 November 2020 15:50:14) CuisUniversity-4383.image priorSource: 17806289!

----SNAPSHOT----(1 November 2020 15:52:06) CuisUniversity-4383.image priorSource: 17809637!

partida _ TerniLapilli newGame!

partida putXAt: 1@1. !

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1

partida isOver.!

partida _ TerniLapilli newGame.!

partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1!

partida isOver.!

partida isOver.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.!

partida _ TerniLapilli newGame.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1.

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.!

partida isOver.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1.

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.

partida moveXFrom: 2@0 To: 1@2.
partida moveOFrom: 0@2 To: 1@1.

partida isOver.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1.

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.

partida moveXFrom: 0@1 To: 1@1.
partida moveOFrom: 2@2 To: 1@2.

partida isOver.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1.

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.

partida moveXFrom: 0@1 To: 1@1.
partida moveOFrom: 2@2 To: 1@2.

partida isOver. 

partida moveXFrom: 2@0 To: 2@1.
partida moveOFrom: 0@2 To: 0@1.

partida isOver. !

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1.

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.

partida moveXFrom: 0@1 To: 1@1.
partida moveOFrom: 2@2 To: 1@2.

partida isOver. 

partida moveXFrom: 2@0 To: 2@1.
partida moveOFrom: 0@2 To: 0@1.

partida isOver.

partida moveXFrom: 2@1 To: 2@2.
partida moveOFrom: 1@2 To: 0@2.

partida isOver.!

partida hasPlayerOWon.!

partida moveXFrom: 2@2 To: 1@2.!

----SNAPSHOT----(1 November 2020 16:03:49) CuisUniversity-4383.image priorSource: 17809730!

----SNAPSHOT----(1 November 2020 16:04:16) CuisUniversity-4383.image priorSource: 17812752!

----SNAPSHOT----(1 November 2020 16:04:55) CuisUniversity-4383.image priorSource: 17812845!

----QUIT----(1 November 2020 16:08:50) CuisUniversity-4383.image priorSource: 17812938!

----STARTUP---- (2 November 2020 16:01:33) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!TerniLapilli methodsFor: 'player actions - private' stamp: 'EMI 11/2/2020 16:03:40'!
hasPlayerXPlacedAllPieces

	^ piecesX size = 3! !
!TerniLapilli methodsFor: 'player actions - private' stamp: 'EMI 11/2/2020 16:03:40' prior: 50886830!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [
		self hasPlayerXPlacedAllPieces 
		ifTrue:[gameState _ TerniLapilliPlayerXMovePieceState ofGame: self]
		ifFalse:[gameState _ TerniLapilliPlayerXPutPieceState ofGame: self]
	].


	! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:09:42'!
bottomRightPosition

	^ 2@2! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:09:42' prior: 50887561!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self bottomRightPosition)) and: [aPiecesCollection includes: (0@0)].
	diagonalInversa _ (aPiecesCollection includes: (2@0)) and: [aPiecesCollection includes:  (0@2)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:12:39'!
centerPosition

	^ 1@1! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:12:39' prior: 50888340!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: self centerPosition) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self bottomRightPosition)) and: [aPiecesCollection includes: (0@0)].
	diagonalInversa _ (aPiecesCollection includes: (2@0)) and: [aPiecesCollection includes:  (0@2)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:12:58'!
topLeftPosition

	^ 0@0! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:12:58' prior: 50888359!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: self centerPosition) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self bottomRightPosition)) and: [aPiecesCollection includes: (self topLeftPosition)].
	diagonalInversa _ (aPiecesCollection includes: (2@0)) and: [aPiecesCollection includes:  (0@2)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:13:22'!
bottomLeftPosition

	^ 2@0! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:13:22' prior: 50888379!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: self centerPosition) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self bottomRightPosition)) and: [aPiecesCollection includes: (self topLeftPosition)].
	diagonalInversa _ (aPiecesCollection includes: (self bottomLeftPosition)) and: [aPiecesCollection includes:  (0@2)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:13:42'!
topRightPosition

	^ 0@2! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:13:42' prior: 50888400!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: self centerPosition) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self bottomRightPosition)) and: [aPiecesCollection includes: (self topLeftPosition)].
	diagonalInversa _ (aPiecesCollection includes: (self bottomLeftPosition)) and: [aPiecesCollection includes:  (self topRightPosition)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:18:39'!
topCenterPosition

	^ 0@1! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:18:39' prior: 50877332!
checkHorizontalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + (self topCenterPosition))) and: [aPiecesCollection includes: first - (0@1)].
	estanALaDer _ (aPiecesCollection includes: (first + (0@1))) and: [aPiecesCollection includes: first + (0@2)].
	estanALaIzq _ (aPiecesCollection includes: (first - (0@1))) and: [aPiecesCollection includes: first - (0@2)].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 10/29/2020 20:58:06' prior: 50888443!
checkHorizontalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + (0@1))) and: [aPiecesCollection includes: first - (0@1)].
	estanALaDer _ (aPiecesCollection includes: (first + (0@1))) and: [aPiecesCollection includes: first + (0@2)].
	estanALaIzq _ (aPiecesCollection includes: (first - (0@1))) and: [aPiecesCollection includes: first - (0@2)].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:20:40'!
centerLeftPosition

	^ 1@0! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:20:40' prior: 50887799!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (self centerLeftPosition) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:21:09' prior: 50888488!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (self centerLeftPosition) with: (self topCenterPosition)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:21:26'!
centerRightPosition

	^ 1@2! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:21:26' prior: 50888503!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (self centerLeftPosition) with: (self topCenterPosition)  with:(self centerRightPosition) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:21:47'!
bottomCenterPosition

	^ 2@1! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:21:47' prior: 50888523!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (self centerLeftPosition) with: (self topCenterPosition)  with:(self centerRightPosition) with:(self bottomCenterPosition).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:24:13'!
bottomCenterPosition

	^ 2@1! !

!methodRemoval: TerniLapilli #bottomCenterPosition stamp: 'EMI 11/2/2020 16:24:13'!
bottomCenterPosition

	^ 2@1!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:24:37'!
bottomLeftPosition

	^ 2@0! !

!methodRemoval: TerniLapilli #bottomLeftPosition stamp: 'EMI 11/2/2020 16:24:37'!
bottomLeftPosition

	^ 2@0!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:24:46'!
bottomRightPosition

	^ 2@2! !

!methodRemoval: TerniLapilli #bottomRightPosition stamp: 'EMI 11/2/2020 16:24:46'!
bottomRightPosition

	^ 2@2!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:24:57'!
centerLeftPosition

	^ 1@0! !

!methodRemoval: TerniLapilli #centerLeftPosition stamp: 'EMI 11/2/2020 16:24:57'!
centerLeftPosition

	^ 1@0!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:25:05'!
centerPosition

	^ 1@1! !

!methodRemoval: TerniLapilli #centerPosition stamp: 'EMI 11/2/2020 16:25:05'!
centerPosition

	^ 1@1!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:25:11'!
centerRightPosition

	^ 1@2! !

!methodRemoval: TerniLapilli #centerRightPosition stamp: 'EMI 11/2/2020 16:25:11'!
centerRightPosition

	^ 1@2!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:25:22'!
topCenterPosition

	^ 0@1! !

!methodRemoval: TerniLapilli #topCenterPosition stamp: 'EMI 11/2/2020 16:25:22'!
topCenterPosition

	^ 0@1!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:25:28'!
topLeftPosition

	^ 0@0! !

!methodRemoval: TerniLapilli #topLeftPosition stamp: 'EMI 11/2/2020 16:25:28'!
topLeftPosition

	^ 0@0!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:25:34'!
topRightPosition

	^ 0@2! !

!methodRemoval: TerniLapilli #topRightPosition stamp: 'EMI 11/2/2020 16:25:34'!
topRightPosition

	^ 0@2!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:27:00' prior: 50888421!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: self class centerPosition) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self class bottomRightPosition)) and: [aPiecesCollection includes: (self class topLeftPosition)].
	diagonalInversa _ (aPiecesCollection includes: (self class bottomLeftPosition)) and: [aPiecesCollection includes:  (self class topRightPosition)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli class methodsFor: 'constants - private' stamp: 'EMI 11/2/2020 16:28:36'!
invalidDiagonalPositions
	^OrderedCollection with: (self class centerLeftPosition) with: (self class topCenterPosition)  with:(self class centerRightPosition) with:(self class bottomCenterPosition).! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:29:03' prior: 50888543!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	^(self class invalidDiagonalPositions includes: aOriginPosition) and:[self class invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCannotPutMoreThan3Pieces stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:29:19'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCannotPutMoreThan3Pieces stamp: 'EMI 11/2/2020 16:29:27'!
ERROR!
!TerniLapilli class methodsFor: 'constants - private' stamp: 'EMI 11/2/2020 16:30:19' prior: 50888647!
invalidDiagonalPositions
	^OrderedCollection with: (self centerLeftPosition) with: (self topCenterPosition)  with:(self centerRightPosition) with:(self bottomCenterPosition).! !

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCannotPutMoreThan3Pieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCannotPutMoreThan3Pieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

----SNAPSHOT----(2 November 2020 16:30:59) CuisUniversity-4383.image priorSource: 17813031!
!TerniLapilli methodsFor: 'player actions - private' stamp: 'EMI 11/2/2020 16:35:07'!
putValidPiece: aPosition In: aPiecesCollection
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(self isPositionEmpty: aPosition) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	aPiecesCollection add: aPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/2/2020 16:35:07' prior: 50888320!
putOWhenPlayerIsOAt: aPosition
	self putValidPiece: aPosition In: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [
		self hasPlayerXPlacedAllPieces 
		ifTrue:[gameState _ TerniLapilliPlayerXMovePieceState ofGame: self]
		ifFalse:[gameState _ TerniLapilliPlayerXPutPieceState ofGame: self]
	].


	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/2/2020 16:35:07' prior: 50886741!
putXWhenPlayerIsXAt: aPosition
	self putValidPiece: aPosition In: piecesX.
	self checkIfPlayerXWon 
	ifTrue:[gameState _ TerniLapilliGameOverState ofGame: self hasXWon: true]
	ifFalse:[gameState _ TerniLapilliPlayerOPutPieceState ofGame: self].! !

!methodRemoval: TerniLapilli #put:into: stamp: 'EMI 11/2/2020 16:35:07'!
put: aPosition into: aPiecesCollection
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(self isPositionEmpty: aPosition) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	aPiecesCollection add: aPosition.!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:37:24'!
checkIfMoveIsValidFrom: aOriginPosition To: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/2/2020 16:37:24' prior: 50887975!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	(self isPositionEmpty: aDestinationPosition)  ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	self checkIfMoveIsValidFrom: aOriginPosition To: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !

!methodRemoval: TerniLapilli #checkIfMoveFrom:isValidTo: stamp: 'EMI 11/2/2020 16:37:24'!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:38:29'!
checkIfPosition: aOriginPosition isNeighbourOf: anEmptyDestinationPosition
	^ aOriginPosition eightNeighbors includes: anEmptyDestinationPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/2/2020 16:38:29' prior: 50889035!
checkIfMoveIsValidFrom: aOriginPosition To: anEmptyDestinationPosition
	(self checkIfPosition: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !

!methodRemoval: TerniLapilli #checkIfDestination:isNeighbourOf: stamp: 'EMI 11/2/2020 16:38:29'!
checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition
	^ aOriginPosition eightNeighbors includes: anEmptyDestinationPosition!

----SNAPSHOT----(2 November 2020 16:42:37) CuisUniversity-4383.image priorSource: 17834603!

----SNAPSHOT----(2 November 2020 16:43:35) CuisUniversity-4383.image priorSource: 17838974!

----SNAPSHOT----(2 November 2020 16:43:56) CuisUniversity-4383.image priorSource: 17839067!

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCannotPutMoreThan3Pieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

----SNAPSHOT----(2 November 2020 16:44:10) CuisUniversity-4383.image priorSource: 17839160!

----QUIT----(2 November 2020 16:44:18) CuisUniversity-4383.image priorSource: 17842482!